openapi: 3.0.0
info:
  title: Babylon gRPC API Docs
  version: 1.0.0
  description: >
    A Babylon gRPC Gateway is a REST interface for Babylon's gRPC.

    This is a merged specification of the Babylon gRPC Gateway and the CometBFT
    RPC.


    **Supported RPC protocols:**

    *   URI over HTTP

    *   JSONRPC over HTTP

    *   JSONRPC over websockets


    **Configuration**

    RPC can be configured by tuning parameters under "[rpc]" table in the

    `$CMTHOME/config/config.toml` file or by using the `--rpc.X` command-line

    flags.

    The default RPC listen address is `tcp://127.0.0.1:26657`.


    **URI/HTTP**

    A REST like interface. `curl localhost:26657/block?height=5`


    **JSONRPC/HTTP**

    JSONRPC requests can be POST'd to the root RPC endpoint via HTTP.

    `curl --header "Content-Type: application/json" --request POST --data
    '{"method": "block", "params": ["5"], "id": 1}' localhost:26657`


    **JSONRPC/websockets**

    JSONRPC requests can be also made via websocket.

    The websocket endpoint is at `/websocket`, e.g. `localhost:26657/websocket`.

    Asynchronous RPC functions like event "subscribe" and "unsubscribe" are

    only available via websockets.


    For example using the [websocat](https://github.com/vi/websocat) tool, you
    can subscribe for 'NewBlock' events

    with the following command:


    `echo '{ "jsonrpc": "2.0","method": "subscribe","id": 0,"params": {"query":
    "tm.event='"'NewBlock'"'"} }' | websocat -n -t
    ws://127.0.0.1:26657/websocket`
servers:
  - url: http://localhost:9090
    description: Run Babylon gRPC Gateway locally with default port 9090.
paths:
  /babylon/btccheckpoint/v1:
    get:
      parameters:
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          name: pagination.key
          required: false
          schema:
            format: byte
            type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          name: pagination.offset
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          name: pagination.limit
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          schema:
            type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          schema:
            type: boolean
      responses:
        '200':
          content:
            '*/*':
              schema:
                properties:
                  info_list:
                    items:
                      description: >-
                        BTCCheckpointInfoResponse contains all data about best
                        submission of checkpoint for

                        given epoch. Best submission is the submission which is
                        deeper in btc ledger.
                      properties:
                        best_submission_btc_block_hash:
                          title: >-
                            hash of the btc block which determines checkpoint
                            btc block height i.e.

                            youngest block of best submission Hexadecimal
                          type: string
                        best_submission_btc_block_height:
                          format: int64
                          title: btc height of the best submission of the epoch
                          type: integer
                        best_submission_transactions:
                          items:
                            properties:
                              hash:
                                description: Hash BTC Header hash as hex.
                                type: string
                              index:
                                description: Index Bitcoin Transaction index in block.
                                format: int64
                                type: integer
                              proof:
                                title: >-
                                  proof is the Merkle proof that this tx is
                                  included in the position in `key`
                                type: string
                              transaction:
                                description: >-
                                  transaction is the full transaction data as
                                  str hex.
                                type: string
                            title: >-
                              TransactionInfoResponse is the info of a tx on
                              Bitcoin,

                              including

                              - the position of the tx on BTC blockchain

                              - the full tx content

                              - the Merkle proof that this tx is on the above
                              position
                            type: object
                          title: >-
                            the BTC checkpoint transactions of the best
                            submission
                          type: array
                        best_submission_vigilante_address_list:
                          items:
                            properties:
                              reporter:
                                title: >-
                                  reporter is the address of the reporter who
                                  reported the submissions,

                                  calculated from submission message
                                  MsgInsertBTCSpvProof itself
                                type: string
                              submitter:
                                description: >-
                                  submitter is the address of the checkpoint
                                  submitter to BTC, extracted from

                                  the checkpoint itself.
                                type: string
                            title: >-
                              CheckpointAddressesResponse contains the addresses
                              of the submitter and reporter of a

                              given checkpoint
                            type: object
                          title: list of vigilantes' addresses of the best submission
                          type: array
                        epoch_number:
                          description: EpochNumber of this checkpoint.
                          format: uint64
                          type: string
                      type: object
                    type: array
                  pagination:
                    description: >-
                      PageResponse is to be embedded in gRPC response messages
                      where the

                      corresponding request message has used PageRequest.

                       message SomeResponse {
                               repeated Bar results = 1;
                               PageResponse page = 2;
                       }
                    properties:
                      next_key:
                        description: >-
                          next_key is the key to be passed to PageRequest.key to

                          query the next page most efficiently. It will be empty
                          if

                          there are no more results.
                        format: byte
                        type: string
                      total:
                        format: uint64
                        title: >-
                          total is total number of results available if
                          PageRequest.count_total

                          was set, its value is undefined otherwise
                        type: string
                    title: pagination defines the pagination in the response
                    type: object
                title: |-
                  QueryBtcCheckpointsInfoResponse is response type for the
                  Query/BtcCheckpointsInfo RPC method
                type: object
          description: A successful response.
        default:
          content:
            '*/*':
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      properties:
                        type_url:
                          type: string
                        value:
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      tags:
        - Babylon
      operationId: BtcCheckpointsInfo
      summary: BtcCheckpointsInfo returns checkpoint info for a range of epochs
  /babylon/btccheckpoint/v1/params:
    get:
      responses:
        '200':
          content:
            '*/*':
              schema:
                description: >-
                  QueryParamsResponse is response type for the Query/Params RPC
                  method.
                properties:
                  params:
                    description: params holds all the parameters of this module.
                    properties:
                      btc_confirmation_depth:
                        format: int64
                        title: >-
                          btc_confirmation_depth is the confirmation depth in
                          BTC.

                          A block is considered irreversible only when it is at
                          least k-deep in BTC

                          (k in research paper)
                        type: integer
                      checkpoint_finalization_timeout:
                        format: int64
                        title: >-
                          checkpoint_finalization_timeout is the maximum time
                          window (measured in BTC

                          blocks) between a checkpoint

                          - being submitted to BTC, and

                          - being reported back to BBN

                          If a checkpoint has not been reported back within w
                          BTC blocks, then BBN

                          has dishonest majority and is stalling checkpoints (w
                          in research paper)
                        type: integer
                      checkpoint_tag:
                        title: >-
                          4byte tag in hex format, required to be present in the
                          OP_RETURN transaction

                          related to babylon
                        type: string
                    type: object
                type: object
          description: A successful response.
        default:
          content:
            '*/*':
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      properties:
                        type_url:
                          type: string
                        value:
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      tags:
        - Babylon
      operationId: BtcCheckpointParams
      summary: Parameters queries the parameters of the module.
  /babylon/btccheckpoint/v1/{epoch_num}:
    get:
      parameters:
        - description: |-
            Number of epoch for which the earliest checkpointing btc height is
            requested
          in: path
          name: epoch_num
          required: true
          schema:
            format: uint64
            type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                properties:
                  info:
                    description: >-
                      BTCCheckpointInfoResponse contains all data about best
                      submission of checkpoint for

                      given epoch. Best submission is the submission which is
                      deeper in btc ledger.
                    properties:
                      best_submission_btc_block_hash:
                        title: >-
                          hash of the btc block which determines checkpoint btc
                          block height i.e.

                          youngest block of best submission Hexadecimal
                        type: string
                      best_submission_btc_block_height:
                        format: int64
                        title: btc height of the best submission of the epoch
                        type: integer
                      best_submission_transactions:
                        items:
                          properties:
                            hash:
                              description: Hash BTC Header hash as hex.
                              type: string
                            index:
                              description: Index Bitcoin Transaction index in block.
                              format: int64
                              type: integer
                            proof:
                              title: >-
                                proof is the Merkle proof that this tx is
                                included in the position in `key`
                              type: string
                            transaction:
                              description: >-
                                transaction is the full transaction data as str
                                hex.
                              type: string
                          title: >-
                            TransactionInfoResponse is the info of a tx on
                            Bitcoin,

                            including

                            - the position of the tx on BTC blockchain

                            - the full tx content

                            - the Merkle proof that this tx is on the above
                            position
                          type: object
                        title: the BTC checkpoint transactions of the best submission
                        type: array
                      best_submission_vigilante_address_list:
                        items:
                          properties:
                            reporter:
                              title: >-
                                reporter is the address of the reporter who
                                reported the submissions,

                                calculated from submission message
                                MsgInsertBTCSpvProof itself
                              type: string
                            submitter:
                              description: >-
                                submitter is the address of the checkpoint
                                submitter to BTC, extracted from

                                the checkpoint itself.
                              type: string
                          title: >-
                            CheckpointAddressesResponse contains the addresses
                            of the submitter and reporter of a

                            given checkpoint
                          type: object
                        title: list of vigilantes' addresses of the best submission
                        type: array
                      epoch_number:
                        description: EpochNumber of this checkpoint.
                        format: uint64
                        type: string
                    type: object
                title: |-
                  QueryBtcCheckpointInfoResponse is response type for the
                  Query/BtcCheckpointInfo RPC method
                type: object
          description: A successful response.
        default:
          content:
            '*/*':
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      properties:
                        type_url:
                          type: string
                        value:
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      tags:
        - Babylon
      operationId: BtcCheckpointInfo
      summary: BtcCheckpointInfo returns checkpoint info for a given epoch
  /babylon/btccheckpoint/v1/{epoch_num}/submissions:
    get:
      parameters:
        - description: Number of epoch for which submissions are requested
          in: path
          name: epoch_num
          required: true
          schema:
            format: uint64
            type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                properties:
                  keys:
                    description: >-
                      Keys All submissions transactions key saved during an
                      epoch.
                    items:
                      properties:
                        first_tx_block_hash:
                          description: FirstTxBlockHash is the BTCHeaderHashBytes in hex.
                          type: string
                        first_tx_index:
                          format: int64
                          type: integer
                        second_tx_block_hash:
                          description: SecondBlockHash is the BTCHeaderHashBytes in hex.
                          type: string
                        second_tx_index:
                          format: int64
                          type: integer
                      title: >-
                        SubmissionKeyResponse Checkpoint can be composed from
                        multiple transactions,

                        so to identify whole submission we need list of
                        transaction keys.

                        Each submission can generally be identified by this list
                        of (txIdx,

                        blockHash) tuples. Note: this could possibly be
                        optimized as if transactions

                        were in one block they would have the same block hash
                        and different indexes,

                        but each blockhash is only 33 (1  byte for prefix
                        encoding and 32 byte hash),

                        so there should be other strong arguments for this
                        optimization
                      type: object
                    type: array
                title: >-
                  QueryEpochSubmissionsResponse defines a response to get all
                  submissions in

                  given epoch (QueryEpochSubmissionsRequest)
                type: object
          description: A successful response.
        default:
          content:
            '*/*':
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      properties:
                        type_url:
                          type: string
                        value:
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      tags:
        - Babylon
      operationId: EpochSubmissions
      summary: EpochSubmissions returns all submissions for a given epoch
  /babylon/btclightclient/v1/baseheader:
    get:
      responses:
        '200':
          content:
            '*/*':
              schema:
                description: >-
                  QueryBaseHeaderResponse is the response type for the
                  Query/BaseHeader RPC

                  method.
                properties:
                  header:
                    description: >-
                      BTCHeaderInfoResponse is a structure that contains all
                      relevant information about a

                      BTC header response
                       - Full header as string hex.
                       - Header hash for easy retrieval as string hex.
                       - Height of the header in the BTC chain.
                       - Total work spent on the header. This is the sum of the work corresponding
                       to the header Bits field
                         and the total work of the header.
                    properties:
                      hash_hex:
                        type: string
                      header_hex:
                        type: string
                      height:
                        format: int64
                        type: integer
                      work:
                        description: Work is the sdkmath.Uint as string.
                        type: string
                    type: object
                type: object
          description: A successful response.
        default:
          content:
            '*/*':
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      properties:
                        type_url:
                          type: string
                        value:
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      tags:
        - Babylon
      operationId: BaseHeader
      summary: >-
        BaseHeader returns the base BTC header of the chain. This header is
        defined

        on genesis.
  /babylon/btclightclient/v1/contains:
    get:
      parameters:
        - in: query
          name: hash
          required: false
          schema:
            format: byte
            type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                description: >-
                  QueryContainsResponse is response type for the Query/Contains
                  RPC method.
                properties:
                  contains:
                    type: boolean
                type: object
          description: A successful response.
        default:
          content:
            '*/*':
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      properties:
                        type_url:
                          type: string
                        value:
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      tags:
        - Babylon
      operationId: Contains
      summary: Contains checks whether a hash is maintained by the module.
  /babylon/btclightclient/v1/containsBytes:
    get:
      parameters:
        - in: query
          name: hash
          required: false
          schema:
            format: byte
            type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                description: >-
                  QueryContainsResponse is response type for the temporary
                  Query/ContainsBytes

                  RPC method.
                properties:
                  contains:
                    type: boolean
                type: object
          description: A successful response.
        default:
          content:
            '*/*':
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      properties:
                        type_url:
                          type: string
                        value:
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      tags:
        - Babylon
      operationId: ContainsBytes
      summary: |-
        ContainsBytes is a temporary method that
        checks whether a hash is maintained by the module.
        See discussion at https://github.com/babylonlabs-io/babylon/pull/132
        for more details.
  /babylon/btclightclient/v1/depth/{hash}:
    get:
      parameters:
        - in: path
          name: hash
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                properties:
                  depth:
                    format: int64
                    type: integer
                title: >-
                  QueryMainChainDepthResponse is the response type for the
                  Query/MainChainDepth RPC

                  it contains depth of the block in main chain
                type: object
          description: A successful response.
        default:
          content:
            '*/*':
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      properties:
                        type_url:
                          type: string
                        value:
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      tags:
        - Babylon
      operationId: HeaderDepth
      summary: >-
        HeaderDepth returns the depth of the header in main chain or error if
        the

        block is not found or it exists on fork
  /babylon/btclightclient/v1/hashes:
    get:
      parameters:
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          name: pagination.key
          required: false
          schema:
            format: byte
            type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          name: pagination.offset
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          name: pagination.limit
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          schema:
            type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          schema:
            type: boolean
      responses:
        '200':
          content:
            '*/*':
              schema:
                description: >-
                  QueryHashesResponse is response type for the Query/Hashes RPC
                  method.
                properties:
                  hashes:
                    items:
                      format: byte
                      type: string
                    type: array
                  pagination:
                    description: >-
                      PageResponse is to be embedded in gRPC response messages
                      where the

                      corresponding request message has used PageRequest.

                       message SomeResponse {
                               repeated Bar results = 1;
                               PageResponse page = 2;
                       }
                    properties:
                      next_key:
                        description: >-
                          next_key is the key to be passed to PageRequest.key to

                          query the next page most efficiently. It will be empty
                          if

                          there are no more results.
                        format: byte
                        type: string
                      total:
                        format: uint64
                        title: >-
                          total is total number of results available if
                          PageRequest.count_total

                          was set, its value is undefined otherwise
                        type: string
                    type: object
                type: object
          description: A successful response.
        default:
          content:
            '*/*':
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      properties:
                        type_url:
                          type: string
                        value:
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      tags:
        - Babylon
      operationId: Hashes
      summary: Hashes retrieves the hashes maintained by the module.
  /babylon/btclightclient/v1/mainchain:
    get:
      parameters:
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          name: pagination.key
          required: false
          schema:
            format: byte
            type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          name: pagination.offset
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          name: pagination.limit
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          schema:
            type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          schema:
            type: boolean
      responses:
        '200':
          content:
            '*/*':
              schema:
                description: >-
                  QueryMainChainResponse is response type for the
                  Query/MainChain RPC method.
                properties:
                  headers:
                    items:
                      description: >-
                        BTCHeaderInfoResponse is a structure that contains all
                        relevant information about a

                        BTC header response
                         - Full header as string hex.
                         - Header hash for easy retrieval as string hex.
                         - Height of the header in the BTC chain.
                         - Total work spent on the header. This is the sum of the work corresponding
                         to the header Bits field
                           and the total work of the header.
                      properties:
                        hash_hex:
                          type: string
                        header_hex:
                          type: string
                        height:
                          format: int64
                          type: integer
                        work:
                          description: Work is the sdkmath.Uint as string.
                          type: string
                      type: object
                    type: array
                  pagination:
                    description: >-
                      PageResponse is to be embedded in gRPC response messages
                      where the

                      corresponding request message has used PageRequest.

                       message SomeResponse {
                               repeated Bar results = 1;
                               PageResponse page = 2;
                       }
                    properties:
                      next_key:
                        description: >-
                          next_key is the key to be passed to PageRequest.key to

                          query the next page most efficiently. It will be empty
                          if

                          there are no more results.
                        format: byte
                        type: string
                      total:
                        format: uint64
                        title: >-
                          total is total number of results available if
                          PageRequest.count_total

                          was set, its value is undefined otherwise
                        type: string
                    type: object
                type: object
          description: A successful response.
        default:
          content:
            '*/*':
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      properties:
                        type_url:
                          type: string
                        value:
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      tags:
        - Babylon
      operationId: MainChain
      summary: MainChain returns the canonical chain
  /babylon/btclightclient/v1/params:
    get:
      responses:
        '200':
          content:
            '*/*':
              schema:
                description: >-
                  QueryParamsResponse is the response type for the Query/Params
                  RPC method.
                properties:
                  params:
                    description: params holds all the parameters of this module.
                    properties:
                      insert_headers_allow_list:
                        items:
                          type: string
                        title: >-
                          List of addresses which are allowed to insert headers
                          to btc light client

                          if the list is empty, any address can insert headers
                        type: array
                    type: object
                type: object
          description: A successful response.
        default:
          content:
            '*/*':
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      properties:
                        type_url:
                          type: string
                        value:
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      tags:
        - Babylon
      operationId: BtcLightClientParams
      summary: Params queries the parameters of the module.
  /babylon/btclightclient/v1/tip:
    get:
      responses:
        '200':
          content:
            '*/*':
              schema:
                description: >-
                  QueryTipResponse is the response type for the Query/Tip RPC
                  method.
                properties:
                  header:
                    description: >-
                      BTCHeaderInfoResponse is a structure that contains all
                      relevant information about a

                      BTC header response
                       - Full header as string hex.
                       - Header hash for easy retrieval as string hex.
                       - Height of the header in the BTC chain.
                       - Total work spent on the header. This is the sum of the work corresponding
                       to the header Bits field
                         and the total work of the header.
                    properties:
                      hash_hex:
                        type: string
                      header_hex:
                        type: string
                      height:
                        format: int64
                        type: integer
                      work:
                        description: Work is the sdkmath.Uint as string.
                        type: string
                    type: object
                type: object
          description: A successful response.
        default:
          content:
            '*/*':
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      properties:
                        type_url:
                          type: string
                        value:
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      tags:
        - Babylon
      operationId: Tip
      summary: Tip return best header on canonical chain
  /babylon/btcstaking/v1/btc_delegation/{staking_tx_hash_hex}:
    get:
      parameters:
        - description: Hash of staking transaction in btc format
          in: path
          name: staking_tx_hash_hex
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                properties:
                  btc_delegation:
                    description: >-
                      BTCDelegation represents the client needed information of
                      an BTCDelegation.
                    properties:
                      active:
                        title: whether this delegation is active
                        type: boolean
                      btc_pk:
                        format: byte
                        title: >-
                          btc_pk is the Bitcoin secp256k1 PK of this BTC
                          delegation

                          the PK follows encoding in BIP-340 spec
                        type: string
                      covenant_sigs:
                        description: >-
                          covenant_sigs is a list of adaptor signatures on the
                          slashing tx

                          by each covenant member

                          It will be a part of the witness for the staking tx
                          output.
                        items:
                          properties:
                            adaptor_sigs:
                              items:
                                format: byte
                                type: string
                              title: >-
                                adaptor_sigs is a list of adaptor signatures,
                                each encrypted by a restaked

                                BTC finality provider's public key
                              type: array
                            cov_pk:
                              format: byte
                              title: >-
                                cov_pk is the public key of the covenant
                                emulator, used as the public key

                                of the adaptor signature
                              type: string
                          title: >-
                            CovenantAdaptorSignatures is a list adaptor
                            signatures signed by the

                            covenant with different finality provider's public
                            keys as encryption keys
                          type: object
                        type: array
                      delegator_slash_sig_hex:
                        description: >-
                          delegator_slash_sig_hex is the signature on the
                          slashing tx

                          by the delegator (i.e., SK corresponding to btc_pk) as
                          string hex.

                          It will be a part of the witness for the staking tx
                          output.
                        type: string
                      end_height:
                        format: int64
                        title: |-
                          end_height is the end height of the BTC delegation
                          it is the end BTC height of the timelock - w
                        type: integer
                      fp_btc_pk_list:
                        items:
                          format: byte
                          type: string
                        title: >-
                          fp_btc_pk_list is the list of BIP-340 PKs of the
                          finality providers that

                          this BTC delegation delegates to
                        type: array
                      params_version:
                        format: int64
                        title: params version used to validate delegation
                        type: integer
                      slashing_tx_hex:
                        title: slashing_tx_hex is the hex string of slashing tx
                        type: string
                      staker_addr:
                        description: >-
                          staker_addr is the address to receive rewards from BTC
                          delegation.
                        type: string
                      staking_output_idx:
                        format: int64
                        title: >-
                          staking_output_idx is the index of the staking output
                          in the staking tx
                        type: integer
                      staking_time:
                        format: int64
                        title: >-
                          staking_time is the number of blocks for which the
                          delegation is locked on

                          BTC chain
                        type: integer
                      staking_tx_hex:
                        title: staking_tx_hex is the hex string of staking tx
                        type: string
                      start_height:
                        format: int64
                        title: >-
                          start_height is the start BTC height of the BTC
                          delegation

                          it is the start BTC height of the timelock
                        type: integer
                      status_desc:
                        description: descriptive status of current delegation.
                        type: string
                      total_sat:
                        format: uint64
                        title: >-
                          total_sat is the total amount of BTC stakes in this
                          delegation

                          quantified in satoshi
                        type: string
                      unbonding_time:
                        format: int64
                        title: >-
                          unbonding_time used in unbonding output timelock path
                          and in slashing

                          transactions change outputs
                        type: integer
                      undelegation_response:
                        description: >-
                          undelegation_response is the undelegation info of this
                          delegation.
                        properties:
                          covenant_slashing_sigs:
                            description: >-
                              covenant_slashing_sigs is a list of adaptor
                              signatures on the

                              unbonding slashing tx by each covenant member

                              It will be a part of the witness for the staking
                              tx output.
                            items:
                              properties:
                                adaptor_sigs:
                                  items:
                                    format: byte
                                    type: string
                                  title: >-
                                    adaptor_sigs is a list of adaptor
                                    signatures, each encrypted by a restaked

                                    BTC finality provider's public key
                                  type: array
                                cov_pk:
                                  format: byte
                                  title: >-
                                    cov_pk is the public key of the covenant
                                    emulator, used as the public key

                                    of the adaptor signature
                                  type: string
                              title: >-
                                CovenantAdaptorSignatures is a list adaptor
                                signatures signed by the

                                covenant with different finality provider's
                                public keys as encryption keys
                              type: object
                            type: array
                          covenant_unbonding_sig_list:
                            items:
                              properties:
                                pk:
                                  format: byte
                                  type: string
                                sig:
                                  format: byte
                                  type: string
                              title: >-
                                SignatureInfo is a BIP-340 signature together
                                with its signer's BIP-340 PK
                              type: object
                            title: >-
                              covenant_unbonding_sig_list is the list of
                              signatures on the unbonding tx

                              by covenant members
                            type: array
                          delegator_slashing_sig_hex:
                            description: >-
                              delegator_slashing_sig is the signature on the
                              slashing tx

                              by the delegator (i.e., SK corresponding to
                              btc_pk).

                              It will be a part of the witness for the unbonding
                              tx output.

                              The delegator slashing sig as string hex.
                            type: string
                          delegator_unbonding_info_response:
                            properties:
                              spend_stake_tx_hex:
                                title: >-
                                  spend_stake_tx_hex is the transaction which
                                  spent the staking output. It is

                                  filled only if the spend_stake_tx_hex is
                                  different than the

                                  unbonding_tx_hex
                                type: string
                            title: >-
                              btc_undelegation_info contains all necessary info
                              about the transaction

                              which spent the staking output
                            type: object
                          slashing_tx_hex:
                            title: slashingTxHex is the hex string of slashing tx
                            type: string
                          unbonding_tx_hex:
                            description: >-
                              unbonding_tx is the transaction which will
                              transfer the funds from staking

                              output to unbonding output. Unbonding output will
                              usually have lower

                              timelock than staking output. The unbonding tx as
                              string hex.
                            type: string
                        title: >-
                          BTCUndelegationResponse provides all necessary info
                          about the undeleagation
                        type: object
                    type: object
                title: >-
                  QueryBTCDelegationResponse is response type matching

                  QueryBTCDelegationRequest and containing BTC delegation
                  information
                type: object
          description: A successful response.
        default:
          content:
            '*/*':
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }
                            // or ...
                            if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                              foo = any.unpack(Foo.getDefaultInstance());
                            }

                        Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                        Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".


                        JSON


                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      tags:
        - Babylon
      operationId: BTCDelegation
      summary: BTCDelegation retrieves delegation by corresponding staking tx hash
  /babylon/btcstaking/v1/btc_delegations/{status}:
    get:
      parameters:
        - description: status is the queried status for BTC delegations
          in: path
          name: status
          required: true
          schema:
            enum:
              - PENDING
              - VERIFIED
              - ACTIVE
              - UNBONDED
              - EXPIRED
              - ANY
            type: string
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          name: pagination.key
          required: false
          schema:
            format: byte
            type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          name: pagination.offset
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          name: pagination.limit
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          schema:
            type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          schema:
            type: boolean
      responses:
        '200':
          content:
            '*/*':
              schema:
                description: |-
                  QueryBTCDelegationsResponse is the response type for the
                  Query/BTCDelegations RPC method.
                properties:
                  btc_delegations:
                    items:
                      description: >-
                        BTCDelegationResponse is the client needed information
                        from a BTCDelegation

                        with the current status based on parameters.
                      properties:
                        active:
                          title: whether this delegation is active
                          type: boolean
                        btc_pk:
                          format: byte
                          title: >-
                            btc_pk is the Bitcoin secp256k1 PK of this BTC
                            delegation

                            the PK follows encoding in BIP-340 spec
                          type: string
                        covenant_sigs:
                          description: >-
                            covenant_sigs is a list of adaptor signatures on the
                            slashing tx

                            by each covenant member

                            It will be a part of the witness for the staking tx
                            output.
                          items:
                            properties:
                              adaptor_sigs:
                                items:
                                  format: byte
                                  type: string
                                title: >-
                                  adaptor_sigs is a list of adaptor signatures,
                                  each encrypted by a restaked

                                  BTC finality provider's public key
                                type: array
                              cov_pk:
                                format: byte
                                title: >-
                                  cov_pk is the public key of the covenant
                                  emulator, used as the public key

                                  of the adaptor signature
                                type: string
                            title: >-
                              CovenantAdaptorSignatures is a list adaptor
                              signatures signed by the

                              covenant with different finality provider's public
                              keys as encryption keys
                            type: object
                          type: array
                        delegator_slash_sig_hex:
                          description: >-
                            delegator_slash_sig_hex is the signature on the
                            slashing tx

                            by the delegator (i.e., SK corresponding to btc_pk)
                            as string hex.

                            It will be a part of the witness for the staking tx
                            output.
                          type: string
                        end_height:
                          format: int64
                          title: |-
                            end_height is the end height of the BTC delegation
                            it is the end BTC height of the timelock - w
                          type: integer
                        fp_btc_pk_list:
                          items:
                            format: byte
                            type: string
                          title: >-
                            fp_btc_pk_list is the list of BIP-340 PKs of the
                            finality providers that

                            this BTC delegation delegates to
                          type: array
                        params_version:
                          format: int64
                          title: params version used to validate delegation
                          type: integer
                        slashing_tx_hex:
                          title: slashing_tx_hex is the hex string of slashing tx
                          type: string
                        staker_addr:
                          description: >-
                            staker_addr is the address to receive rewards from
                            BTC delegation.
                          type: string
                        staking_output_idx:
                          format: int64
                          title: >-
                            staking_output_idx is the index of the staking
                            output in the staking tx
                          type: integer
                        staking_time:
                          format: int64
                          title: >-
                            staking_time is the number of blocks for which the
                            delegation is locked on

                            BTC chain
                          type: integer
                        staking_tx_hex:
                          title: staking_tx_hex is the hex string of staking tx
                          type: string
                        start_height:
                          format: int64
                          title: >-
                            start_height is the start BTC height of the BTC
                            delegation

                            it is the start BTC height of the timelock
                          type: integer
                        status_desc:
                          description: descriptive status of current delegation.
                          type: string
                        total_sat:
                          format: uint64
                          title: >-
                            total_sat is the total amount of BTC stakes in this
                            delegation

                            quantified in satoshi
                          type: string
                        unbonding_time:
                          format: int64
                          title: >-
                            unbonding_time used in unbonding output timelock
                            path and in slashing

                            transactions change outputs
                          type: integer
                        undelegation_response:
                          description: >-
                            undelegation_response is the undelegation info of
                            this delegation.
                          properties:
                            covenant_slashing_sigs:
                              description: >-
                                covenant_slashing_sigs is a list of adaptor
                                signatures on the

                                unbonding slashing tx by each covenant member

                                It will be a part of the witness for the staking
                                tx output.
                              items:
                                properties:
                                  adaptor_sigs:
                                    items:
                                      format: byte
                                      type: string
                                    title: >-
                                      adaptor_sigs is a list of adaptor
                                      signatures, each encrypted by a restaked

                                      BTC finality provider's public key
                                    type: array
                                  cov_pk:
                                    format: byte
                                    title: >-
                                      cov_pk is the public key of the covenant
                                      emulator, used as the public key

                                      of the adaptor signature
                                    type: string
                                title: >-
                                  CovenantAdaptorSignatures is a list adaptor
                                  signatures signed by the

                                  covenant with different finality provider's
                                  public keys as encryption keys
                                type: object
                              type: array
                            covenant_unbonding_sig_list:
                              items:
                                properties:
                                  pk:
                                    format: byte
                                    type: string
                                  sig:
                                    format: byte
                                    type: string
                                title: >-
                                  SignatureInfo is a BIP-340 signature together
                                  with its signer's BIP-340 PK
                                type: object
                              title: >-
                                covenant_unbonding_sig_list is the list of
                                signatures on the unbonding tx

                                by covenant members
                              type: array
                            delegator_slashing_sig_hex:
                              description: >-
                                delegator_slashing_sig is the signature on the
                                slashing tx

                                by the delegator (i.e., SK corresponding to
                                btc_pk).

                                It will be a part of the witness for the
                                unbonding tx output.

                                The delegator slashing sig as string hex.
                              type: string
                            delegator_unbonding_info_response:
                              properties:
                                spend_stake_tx_hex:
                                  title: >-
                                    spend_stake_tx_hex is the transaction which
                                    spent the staking output. It is

                                    filled only if the spend_stake_tx_hex is
                                    different than the

                                    unbonding_tx_hex
                                  type: string
                              title: >-
                                btc_undelegation_info contains all necessary
                                info about the transaction

                                which spent the staking output
                              type: object
                            slashing_tx_hex:
                              title: slashingTxHex is the hex string of slashing tx
                              type: string
                            unbonding_tx_hex:
                              description: >-
                                unbonding_tx is the transaction which will
                                transfer the funds from staking

                                output to unbonding output. Unbonding output
                                will usually have lower

                                timelock than staking output. The unbonding tx
                                as string hex.
                              type: string
                          title: >-
                            BTCUndelegationResponse provides all necessary info
                            about the undeleagation
                          type: object
                      type: object
                    title: >-
                      btc_delegations contains all the queried BTC delegations
                      under the given

                      status
                    type: array
                  pagination:
                    description: pagination defines the pagination in the response.
                    properties:
                      next_key:
                        description: >-
                          next_key is the key to be passed to PageRequest.key to

                          query the next page most efficiently. It will be empty
                          if

                          there are no more results.
                        format: byte
                        type: string
                      total:
                        format: uint64
                        title: >-
                          total is total number of results available if
                          PageRequest.count_total

                          was set, its value is undefined otherwise
                        type: string
                    type: object
                type: object
          description: A successful response.
        default:
          content:
            '*/*':
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }
                            // or ...
                            if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                              foo = any.unpack(Foo.getDefaultInstance());
                            }

                        Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                        Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".


                        JSON


                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      tags:
        - Babylon
      operationId: BTCDelegations
      summary: BTCDelegations queries all BTC delegations under a given status
  /babylon/btcstaking/v1/finality_providers:
    get:
      parameters:
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          name: pagination.key
          required: false
          schema:
            format: byte
            type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          name: pagination.offset
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          name: pagination.limit
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          schema:
            type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          schema:
            type: boolean
      responses:
        '200':
          content:
            '*/*':
              schema:
                description: |-
                  QueryFinalityProvidersResponse is the response type for the
                  Query/FinalityProviders RPC method.
                properties:
                  finality_providers:
                    items:
                      description: >-
                        FinalityProviderResponse defines a finality provider
                        with voting power

                        information.
                      properties:
                        addr:
                          description: >-
                            addr is the address to receive commission from
                            delegations.
                          type: string
                        btc_pk:
                          format: byte
                          title: >-
                            btc_pk is the Bitcoin secp256k1 PK of this finality
                            provider

                            the PK follows encoding in BIP-340 spec
                          type: string
                        commission:
                          description: >-
                            commission defines the commission rate of the
                            finality provider.
                          type: string
                        commission_info:
                          description: >-
                            commission_info contains information details of the
                            finality provider

                            commission.
                          properties:
                            max_change_rate:
                              description: >-
                                max_change_rate defines the maximum daily
                                increase of the validator commission, as a
                                fraction.
                              type: string
                            max_rate:
                              description: >-
                                max_rate defines the maximum commission rate
                                which validator can ever charge, as a fraction.
                              type: string
                            update_time:
                              description: >-
                                update_time is the last time the commission rate
                                was changed.
                              format: date-time
                              type: string
                          type: object
                        consumer_id:
                          description: >-
                            consumer_id is the ID of the consumer the finality
                            provider is operating

                            on. If it's missing / empty, it's assumed the
                            finality provider is

                            operating in the Babylon chain.
                          type: string
                        description:
                          description: >-
                            description defines the description terms for the
                            finality provider.
                          properties:
                            details:
                              description: details define other optional details.
                              type: string
                            identity:
                              description: >-
                                identity defines an optional identity signature
                                (ex. UPort or Keybase).
                              type: string
                            moniker:
                              description: >-
                                moniker defines a human-readable name for the
                                validator.
                              type: string
                            security_contact:
                              description: >-
                                security_contact defines an optional email for
                                security contact.
                              type: string
                            website:
                              description: website defines an optional website link.
                              type: string
                          type: object
                        height:
                          format: uint64
                          title: height is the queried Babylon height
                          type: string
                        highest_voted_height:
                          format: int64
                          title: >-
                            highest_voted_height is the highest height for which
                            the

                            finality provider has voted
                          type: integer
                        jailed:
                          title: >-
                            jailed defines whether the finality provider is
                            jailed
                          type: boolean
                        pop:
                          description: >-
                            pop is the proof of possession of the BTC_PK by the
                            fp addr.

                            Essentially is the signature where the BTC SK sigs
                            the fp addr.
                          properties:
                            btc_sig:
                              format: byte
                              title: >-
                                btc_sig is the signature generated via
                                sign(sk_btc, babylon_staker_address)

                                the signature follows encoding in either BIP-340
                                spec or BIP-322 spec
                              type: string
                            btc_sig_type:
                              default: BIP340
                              description: >-
                                - BIP340: BIP340 means the btc_sig will follow
                                the BIP-340 encoding
                                 - BIP322: BIP322 means the btc_sig will follow the BIP-322 encoding
                                 - ECDSA: ECDSA means the btc_sig will follow the ECDSA encoding
                                ref:
                                https://github.com/okx/js-wallet-sdk/blob/a57c2acbe6ce917c0aa4e951d96c4e562ad58444/packages/coin-bitcoin/src/BtcWallet.ts#L331
                              enum:
                                - BIP340
                                - BIP322
                                - ECDSA
                              title: >-
                                btc_sig_type indicates the type of btc_sig in
                                the pop
                              type: string
                          title: >-
                            ProofOfPossessionBTC is the proof of possession that
                            a Babylon

                            address and a Bitcoin secp256k1 secret key are held
                            by the same

                            person
                          type: object
                        slashed_babylon_height:
                          format: uint64
                          title: >-
                            slashed_babylon_height indicates the Babylon height
                            when

                            the finality provider is slashed.

                            if it's 0 then the finality provider is not slashed
                          type: string
                        slashed_btc_height:
                          format: int64
                          title: |-
                            slashed_btc_height indicates the BTC height when
                            the finality provider is slashed.
                            if it's 0 then the finality provider is not slashed
                          type: integer
                      type: object
                    title: finality_providers contains all the finality providers
                    type: array
                  pagination:
                    description: pagination defines the pagination in the response.
                    properties:
                      next_key:
                        description: >-
                          next_key is the key to be passed to PageRequest.key to

                          query the next page most efficiently. It will be empty
                          if

                          there are no more results.
                        format: byte
                        type: string
                      total:
                        format: uint64
                        title: >-
                          total is total number of results available if
                          PageRequest.count_total

                          was set, its value is undefined otherwise
                        type: string
                    type: object
                type: object
          description: A successful response.
        default:
          content:
            '*/*':
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }
                            // or ...
                            if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                              foo = any.unpack(Foo.getDefaultInstance());
                            }

                        Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                        Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".


                        JSON


                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      tags:
        - Babylon
      operationId: FinalityProviders
      summary: FinalityProviders queries all finality providers
  /babylon/btcstaking/v1/finality_providers/{fp_btc_pk_hex}/delegations:
    get:
      parameters:
        - description: >-
            fp_btc_pk_hex is the hex str of Bitcoin secp256k1 PK of the finality

            providerthat this BTC delegation delegates to the PK follows
            encoding in

            BIP-340 spec
          in: path
          name: fp_btc_pk_hex
          required: true
          schema:
            type: string
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          name: pagination.key
          required: false
          schema:
            format: byte
            type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          name: pagination.offset
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          name: pagination.limit
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          schema:
            type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          schema:
            type: boolean
      responses:
        '200':
          content:
            '*/*':
              schema:
                description: >-
                  QueryFinalityProviderDelegationsResponse is the response type
                  for the

                  Query/FinalityProviderDelegations RPC method.
                properties:
                  btc_delegator_delegations:
                    description: >-
                      btc_delegator_delegations contains all the queried BTC
                      delegations.
                    items:
                      description: >-
                        BTCDelegatorDelegationsResponse is a collection of BTC
                        delegations responses

                        from the same delegator.
                      properties:
                        dels:
                          items:
                            description: >-
                              BTCDelegationResponse is the client needed
                              information from a BTCDelegation

                              with the current status based on parameters.
                            properties:
                              active:
                                title: whether this delegation is active
                                type: boolean
                              btc_pk:
                                format: byte
                                title: >-
                                  btc_pk is the Bitcoin secp256k1 PK of this BTC
                                  delegation

                                  the PK follows encoding in BIP-340 spec
                                type: string
                              covenant_sigs:
                                description: >-
                                  covenant_sigs is a list of adaptor signatures
                                  on the slashing tx

                                  by each covenant member

                                  It will be a part of the witness for the
                                  staking tx output.
                                items:
                                  properties:
                                    adaptor_sigs:
                                      items:
                                        format: byte
                                        type: string
                                      title: >-
                                        adaptor_sigs is a list of adaptor
                                        signatures, each encrypted by a restaked

                                        BTC finality provider's public key
                                      type: array
                                    cov_pk:
                                      format: byte
                                      title: >-
                                        cov_pk is the public key of the covenant
                                        emulator, used as the public key

                                        of the adaptor signature
                                      type: string
                                  title: >-
                                    CovenantAdaptorSignatures is a list adaptor
                                    signatures signed by the

                                    covenant with different finality provider's
                                    public keys as encryption keys
                                  type: object
                                type: array
                              delegator_slash_sig_hex:
                                description: >-
                                  delegator_slash_sig_hex is the signature on
                                  the slashing tx

                                  by the delegator (i.e., SK corresponding to
                                  btc_pk) as string hex.

                                  It will be a part of the witness for the
                                  staking tx output.
                                type: string
                              end_height:
                                format: int64
                                title: >-
                                  end_height is the end height of the BTC
                                  delegation

                                  it is the end BTC height of the timelock - w
                                type: integer
                              fp_btc_pk_list:
                                items:
                                  format: byte
                                  type: string
                                title: >-
                                  fp_btc_pk_list is the list of BIP-340 PKs of
                                  the finality providers that

                                  this BTC delegation delegates to
                                type: array
                              params_version:
                                format: int64
                                title: params version used to validate delegation
                                type: integer
                              slashing_tx_hex:
                                title: >-
                                  slashing_tx_hex is the hex string of slashing
                                  tx
                                type: string
                              staker_addr:
                                description: >-
                                  staker_addr is the address to receive rewards
                                  from BTC delegation.
                                type: string
                              staking_output_idx:
                                format: int64
                                title: >-
                                  staking_output_idx is the index of the staking
                                  output in the staking tx
                                type: integer
                              staking_time:
                                format: int64
                                title: >-
                                  staking_time is the number of blocks for which
                                  the delegation is locked on

                                  BTC chain
                                type: integer
                              staking_tx_hex:
                                title: staking_tx_hex is the hex string of staking tx
                                type: string
                              start_height:
                                format: int64
                                title: >-
                                  start_height is the start BTC height of the
                                  BTC delegation

                                  it is the start BTC height of the timelock
                                type: integer
                              status_desc:
                                description: descriptive status of current delegation.
                                type: string
                              total_sat:
                                format: uint64
                                title: >-
                                  total_sat is the total amount of BTC stakes in
                                  this delegation

                                  quantified in satoshi
                                type: string
                              unbonding_time:
                                format: int64
                                title: >-
                                  unbonding_time used in unbonding output
                                  timelock path and in slashing

                                  transactions change outputs
                                type: integer
                              undelegation_response:
                                description: >-
                                  undelegation_response is the undelegation info
                                  of this delegation.
                                properties:
                                  covenant_slashing_sigs:
                                    description: >-
                                      covenant_slashing_sigs is a list of
                                      adaptor signatures on the

                                      unbonding slashing tx by each covenant
                                      member

                                      It will be a part of the witness for the
                                      staking tx output.
                                    items:
                                      properties:
                                        adaptor_sigs:
                                          items:
                                            format: byte
                                            type: string
                                          title: >-
                                            adaptor_sigs is a list of adaptor
                                            signatures, each encrypted by a restaked

                                            BTC finality provider's public key
                                          type: array
                                        cov_pk:
                                          format: byte
                                          title: >-
                                            cov_pk is the public key of the covenant
                                            emulator, used as the public key

                                            of the adaptor signature
                                          type: string
                                      title: >-
                                        CovenantAdaptorSignatures is a list
                                        adaptor signatures signed by the

                                        covenant with different finality
                                        provider's public keys as encryption
                                        keys
                                      type: object
                                    type: array
                                  covenant_unbonding_sig_list:
                                    items:
                                      properties:
                                        pk:
                                          format: byte
                                          type: string
                                        sig:
                                          format: byte
                                          type: string
                                      title: >-
                                        SignatureInfo is a BIP-340 signature
                                        together with its signer's BIP-340 PK
                                      type: object
                                    title: >-
                                      covenant_unbonding_sig_list is the list of
                                      signatures on the unbonding tx

                                      by covenant members
                                    type: array
                                  delegator_slashing_sig_hex:
                                    description: >-
                                      delegator_slashing_sig is the signature on
                                      the slashing tx

                                      by the delegator (i.e., SK corresponding
                                      to btc_pk).

                                      It will be a part of the witness for the
                                      unbonding tx output.

                                      The delegator slashing sig as string hex.
                                    type: string
                                  delegator_unbonding_info_response:
                                    properties:
                                      spend_stake_tx_hex:
                                        title: >-
                                          spend_stake_tx_hex is the transaction
                                          which spent the staking output. It is

                                          filled only if the spend_stake_tx_hex is
                                          different than the

                                          unbonding_tx_hex
                                        type: string
                                    title: >-
                                      btc_undelegation_info contains all
                                      necessary info about the transaction

                                      which spent the staking output
                                    type: object
                                  slashing_tx_hex:
                                    title: >-
                                      slashingTxHex is the hex string of
                                      slashing tx
                                    type: string
                                  unbonding_tx_hex:
                                    description: >-
                                      unbonding_tx is the transaction which will
                                      transfer the funds from staking

                                      output to unbonding output. Unbonding
                                      output will usually have lower

                                      timelock than staking output. The
                                      unbonding tx as string hex.
                                    type: string
                                title: >-
                                  BTCUndelegationResponse provides all necessary
                                  info about the undeleagation
                                type: object
                            type: object
                          type: array
                      type: object
                    type: array
                  pagination:
                    description: pagination defines the pagination in the response.
                    properties:
                      next_key:
                        description: >-
                          next_key is the key to be passed to PageRequest.key to

                          query the next page most efficiently. It will be empty
                          if

                          there are no more results.
                        format: byte
                        type: string
                      total:
                        format: uint64
                        title: >-
                          total is total number of results available if
                          PageRequest.count_total

                          was set, its value is undefined otherwise
                        type: string
                    type: object
                type: object
          description: A successful response.
        default:
          content:
            '*/*':
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }
                            // or ...
                            if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                              foo = any.unpack(Foo.getDefaultInstance());
                            }

                        Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                        Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".


                        JSON


                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      tags:
        - Babylon
      operationId: FinalityProviderDelegations
      summary: |-
        FinalityProviderDelegations queries all BTC delegations of the given
        finality provider
  /babylon/btcstaking/v1/finality_providers/{fp_btc_pk_hex}/finality_provider:
    get:
      parameters:
        - description: |-
            fp_btc_pk_hex is the hex str of Bitcoin secp256k1 PK of the finality
            provider
          in: path
          name: fp_btc_pk_hex
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                properties:
                  finality_provider:
                    description: >-
                      FinalityProviderResponse defines a finality provider with
                      voting power

                      information.
                    properties:
                      addr:
                        description: >-
                          addr is the address to receive commission from
                          delegations.
                        type: string
                      btc_pk:
                        format: byte
                        title: >-
                          btc_pk is the Bitcoin secp256k1 PK of this finality
                          provider

                          the PK follows encoding in BIP-340 spec
                        type: string
                      commission:
                        description: >-
                          commission defines the commission rate of the finality
                          provider.
                        type: string
                      commission_info:
                        description: >-
                          commission_info contains information details of the
                          finality provider

                          commission.
                        properties:
                          max_change_rate:
                            description: >-
                              max_change_rate defines the maximum daily increase
                              of the validator commission, as a fraction.
                            type: string
                          max_rate:
                            description: >-
                              max_rate defines the maximum commission rate which
                              validator can ever charge, as a fraction.
                            type: string
                          update_time:
                            description: >-
                              update_time is the last time the commission rate
                              was changed.
                            format: date-time
                            type: string
                        type: object
                      consumer_id:
                        description: >-
                          consumer_id is the ID of the consumer the finality
                          provider is operating

                          on. If it's missing / empty, it's assumed the finality
                          provider is

                          operating in the Babylon chain.
                        type: string
                      description:
                        description: >-
                          description defines the description terms for the
                          finality provider.
                        properties:
                          details:
                            description: details define other optional details.
                            type: string
                          identity:
                            description: >-
                              identity defines an optional identity signature
                              (ex. UPort or Keybase).
                            type: string
                          moniker:
                            description: >-
                              moniker defines a human-readable name for the
                              validator.
                            type: string
                          security_contact:
                            description: >-
                              security_contact defines an optional email for
                              security contact.
                            type: string
                          website:
                            description: website defines an optional website link.
                            type: string
                        type: object
                      height:
                        format: uint64
                        title: height is the queried Babylon height
                        type: string
                      highest_voted_height:
                        format: int64
                        title: >-
                          highest_voted_height is the highest height for which
                          the

                          finality provider has voted
                        type: integer
                      jailed:
                        title: jailed defines whether the finality provider is jailed
                        type: boolean
                      pop:
                        description: >-
                          pop is the proof of possession of the BTC_PK by the fp
                          addr.

                          Essentially is the signature where the BTC SK sigs the
                          fp addr.
                        properties:
                          btc_sig:
                            format: byte
                            title: >-
                              btc_sig is the signature generated via
                              sign(sk_btc, babylon_staker_address)

                              the signature follows encoding in either BIP-340
                              spec or BIP-322 spec
                            type: string
                          btc_sig_type:
                            default: BIP340
                            description: >-
                              - BIP340: BIP340 means the btc_sig will follow the
                              BIP-340 encoding
                               - BIP322: BIP322 means the btc_sig will follow the BIP-322 encoding
                               - ECDSA: ECDSA means the btc_sig will follow the ECDSA encoding
                              ref:
                              https://github.com/okx/js-wallet-sdk/blob/a57c2acbe6ce917c0aa4e951d96c4e562ad58444/packages/coin-bitcoin/src/BtcWallet.ts#L331
                            enum:
                              - BIP340
                              - BIP322
                              - ECDSA
                            title: >-
                              btc_sig_type indicates the type of btc_sig in the
                              pop
                            type: string
                        title: >-
                          ProofOfPossessionBTC is the proof of possession that a
                          Babylon

                          address and a Bitcoin secp256k1 secret key are held by
                          the same

                          person
                        type: object
                      slashed_babylon_height:
                        format: uint64
                        title: >-
                          slashed_babylon_height indicates the Babylon height
                          when

                          the finality provider is slashed.

                          if it's 0 then the finality provider is not slashed
                        type: string
                      slashed_btc_height:
                        format: int64
                        title: |-
                          slashed_btc_height indicates the BTC height when
                          the finality provider is slashed.
                          if it's 0 then the finality provider is not slashed
                        type: integer
                    title: finality_provider contains the FinalityProvider
                    type: object
                title: >-
                  QueryFinalityProviderResponse contains information about a
                  finality provider
                type: object
          description: A successful response.
        default:
          content:
            '*/*':
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }
                            // or ...
                            if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                              foo = any.unpack(Foo.getDefaultInstance());
                            }

                        Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                        Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".


                        JSON


                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      tags:
        - Babylon
      operationId: FinalityProvider
      summary: FinalityProvider info about one finality provider
  /babylon/btcstaking/v1/largest_btc_reorg:
    get:
      responses:
        '200':
          content:
            '*/*':
              schema:
                properties:
                  block_diff:
                    format: int64
                    title: >-
                      BlockDiff is the difference of the block height of the BTC
                      header Tip - the btc height

                      which it was rolled back
                    type: integer
                  rollback_from:
                    description: >-
                      BTCHeaderInfoResponse is a structure that contains all
                      relevant information about a

                      BTC header response
                       - Full header as string hex.
                       - Header hash for easy retrieval as string hex.
                       - Height of the header in the BTC chain.
                       - Total work spent on the header. This is the sum of the work corresponding
                       to the header Bits field
                         and the total work of the header.
                    properties:
                      hash_hex:
                        type: string
                      header_hex:
                        type: string
                      height:
                        format: int64
                        type: integer
                      work:
                        description: Work is the sdkmath.Uint as string.
                        type: string
                    title: >-
                      RollbackFrom is the latest BTC block header prior to
                      rollback
                    type: object
                  rollback_to:
                    description: >-
                      BTCHeaderInfoResponse is a structure that contains all
                      relevant information about a

                      BTC header response
                       - Full header as string hex.
                       - Header hash for easy retrieval as string hex.
                       - Height of the header in the BTC chain.
                       - Total work spent on the header. This is the sum of the work corresponding
                       to the header Bits field
                         and the total work of the header.
                    properties:
                      hash_hex:
                        type: string
                      header_hex:
                        type: string
                      height:
                        format: int64
                        type: integer
                      work:
                        description: Work is the sdkmath.Uint as string.
                        type: string
                    title: RollbackTo is the BTC block header which we rollback to
                    type: object
                title: >-
                  QueryLargestBtcReOrgResponse stores the largest BTC reorg
                  recorded
                type: object
          description: A successful response.
        default:
          content:
            '*/*':
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }
                            // or ...
                            if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                              foo = any.unpack(Foo.getDefaultInstance());
                            }

                        Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                        Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".


                        JSON


                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      tags:
        - Babylon
      operationId: LargestBtcReOrg
      summary: LargestBtcReOrg retrieves the largest BTC reorg
  /babylon/btcstaking/v1/params:
    get:
      responses:
        '200':
          content:
            '*/*':
              schema:
                description: >-
                  QueryParamsResponse is response type for the Query/Params RPC
                  method.
                properties:
                  params:
                    description: params holds all the parameters of this module.
                    properties:
                      allow_list_expiration_height:
                        format: uint64
                        title: >-
                          allow_list_expiration_height is the height at which
                          the allow list expires

                          i.e all staking transactions are allowed to enter
                          Babylon chain afterwards

                          setting it to 0 means allow list is disabled
                        type: string
                      btc_activation_height:
                        format: int64
                        title: >-
                          btc_activation_height is the btc height from which
                          parameters are activated

                          (inclusive)
                        type: integer
                      covenant_pks:
                        items:
                          format: byte
                          type: string
                        title: >-
                          PARAMETERS COVERING STAKING

                          covenant_pks is the list of public keys held by the
                          covenant committee

                          each PK follows encoding in BIP-340 spec on Bitcoin
                        type: array
                      covenant_quorum:
                        format: int64
                        title: >-
                          covenant_quorum is the minimum number of signatures
                          needed for the covenant

                          multisignature
                        type: integer
                      delegation_creation_base_gas_fee:
                        format: uint64
                        title: base gas fee for delegation creation
                        type: string
                      max_staking_time_blocks:
                        format: int64
                        title: >-
                          max_staking_time_blocks is the maximum lock time time
                          specified in staking

                          output script
                        type: integer
                      max_staking_value_sat:
                        format: int64
                        title: >-
                          max_staking_value_sat is the maximum of satoshis
                          locked in staking output
                        type: string
                      min_commission_rate:
                        title: >-
                          PARAMETERS COVERING FINALITY PROVIDERS

                          min_commission_rate is the chain-wide minimum
                          commission rate that a

                          finality provider can charge their delegators
                          expressed as a decimal (e.g.,

                          0.5 for 50%). Maximal precion is 2 decimal places
                        type: string
                      min_slashing_tx_fee_sat:
                        format: int64
                        title: >-
                          min_slashing_tx_fee_sat is the minimum amount of tx
                          fee (quantified

                          in Satoshi) needed for the pre-signed slashing tx. It
                          covers both:

                          staking slashing transaction and unbonding slashing
                          transaction
                        type: string
                      min_staking_time_blocks:
                        format: int64
                        title: >-
                          min_staking_time is the minimum lock time specified in
                          staking output

                          script
                        type: integer
                      min_staking_value_sat:
                        format: int64
                        title: >-
                          min_staking_value_sat is the minimum of satoshis
                          locked in staking output
                        type: string
                      slashing_pk_script:
                        format: byte
                        title: >-
                          PARAMETERS COVERING SLASHING

                          slashing_pk_script is the pk_script expected in
                          slashing output ie. the

                          first output of slashing transaction
                        type: string
                      slashing_rate:
                        title: >-
                          slashing_rate determines the portion of the staked
                          amount to be slashed,

                          expressed as a decimal (e.g., 0.5 for 50%). Maximal
                          precion is 2 decimal

                          places
                        type: string
                      unbonding_fee_sat:
                        format: int64
                        title: >-
                          unbonding_fee exact fee required for unbonding
                          transaction
                        type: string
                      unbonding_time_blocks:
                        format: int64
                        title: >-
                          PARAMETERS COVERING UNBONDING

                          unbonding_time is the exact unbonding time required
                          from unbonding

                          transaction it must be larger than
                          `checkpoint_finalization_timeout` from

                          `btccheckpoint` module
                        type: integer
                    type: object
                type: object
          description: A successful response.
        default:
          content:
            '*/*':
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }
                            // or ...
                            if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                              foo = any.unpack(Foo.getDefaultInstance());
                            }

                        Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                        Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".


                        JSON


                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      tags:
        - Babylon
      operationId: Params
      summary: Parameters queries the parameters of the module.
  /babylon/btcstaking/v1/params/btc_height/{btc_height}:
    get:
      parameters:
        - in: path
          name: btc_height
          required: true
          schema:
            format: int64
            type: integer
      responses:
        '200':
          content:
            '*/*':
              schema:
                description: |-
                  QueryParamsByBTCHeightResponse is response type for the
                  Query/QueryParamsByBTCHeightResponse RPC method.
                properties:
                  params:
                    description: params holds all the parameters of this module.
                    properties:
                      allow_list_expiration_height:
                        format: uint64
                        title: >-
                          allow_list_expiration_height is the height at which
                          the allow list expires

                          i.e all staking transactions are allowed to enter
                          Babylon chain afterwards

                          setting it to 0 means allow list is disabled
                        type: string
                      btc_activation_height:
                        format: int64
                        title: >-
                          btc_activation_height is the btc height from which
                          parameters are activated

                          (inclusive)
                        type: integer
                      covenant_pks:
                        items:
                          format: byte
                          type: string
                        title: >-
                          PARAMETERS COVERING STAKING

                          covenant_pks is the list of public keys held by the
                          covenant committee

                          each PK follows encoding in BIP-340 spec on Bitcoin
                        type: array
                      covenant_quorum:
                        format: int64
                        title: >-
                          covenant_quorum is the minimum number of signatures
                          needed for the covenant

                          multisignature
                        type: integer
                      delegation_creation_base_gas_fee:
                        format: uint64
                        title: base gas fee for delegation creation
                        type: string
                      max_staking_time_blocks:
                        format: int64
                        title: >-
                          max_staking_time_blocks is the maximum lock time time
                          specified in staking

                          output script
                        type: integer
                      max_staking_value_sat:
                        format: int64
                        title: >-
                          max_staking_value_sat is the maximum of satoshis
                          locked in staking output
                        type: string
                      min_commission_rate:
                        title: >-
                          PARAMETERS COVERING FINALITY PROVIDERS

                          min_commission_rate is the chain-wide minimum
                          commission rate that a

                          finality provider can charge their delegators
                          expressed as a decimal (e.g.,

                          0.5 for 50%). Maximal precion is 2 decimal places
                        type: string
                      min_slashing_tx_fee_sat:
                        format: int64
                        title: >-
                          min_slashing_tx_fee_sat is the minimum amount of tx
                          fee (quantified

                          in Satoshi) needed for the pre-signed slashing tx. It
                          covers both:

                          staking slashing transaction and unbonding slashing
                          transaction
                        type: string
                      min_staking_time_blocks:
                        format: int64
                        title: >-
                          min_staking_time is the minimum lock time specified in
                          staking output

                          script
                        type: integer
                      min_staking_value_sat:
                        format: int64
                        title: >-
                          min_staking_value_sat is the minimum of satoshis
                          locked in staking output
                        type: string
                      slashing_pk_script:
                        format: byte
                        title: >-
                          PARAMETERS COVERING SLASHING

                          slashing_pk_script is the pk_script expected in
                          slashing output ie. the

                          first output of slashing transaction
                        type: string
                      slashing_rate:
                        title: >-
                          slashing_rate determines the portion of the staked
                          amount to be slashed,

                          expressed as a decimal (e.g., 0.5 for 50%). Maximal
                          precion is 2 decimal

                          places
                        type: string
                      unbonding_fee_sat:
                        format: int64
                        title: >-
                          unbonding_fee exact fee required for unbonding
                          transaction
                        type: string
                      unbonding_time_blocks:
                        format: int64
                        title: >-
                          PARAMETERS COVERING UNBONDING

                          unbonding_time is the exact unbonding time required
                          from unbonding

                          transaction it must be larger than
                          `checkpoint_finalization_timeout` from

                          `btccheckpoint` module
                        type: integer
                    type: object
                  version:
                    format: int64
                    title: >-
                      version is the version of the params for the given BTC
                      height
                    type: integer
                type: object
          description: A successful response.
        default:
          content:
            '*/*':
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }
                            // or ...
                            if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                              foo = any.unpack(Foo.getDefaultInstance());
                            }

                        Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                        Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".


                        JSON


                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      tags:
        - Babylon
      operationId: ParamsByBTCHeight
      summary: >-
        ParamsByBTCHeight queries the parameters of the module for a specific
        BTC

        height
  /babylon/btcstaking/v1/params/{version}:
    get:
      parameters:
        - in: path
          name: version
          required: true
          schema:
            format: int64
            type: integer
      responses:
        '200':
          content:
            '*/*':
              schema:
                description: >-
                  QueryParamsResponse is response type for the Query/Params RPC
                  method.
                properties:
                  params:
                    description: params holds all the parameters of this module.
                    properties:
                      allow_list_expiration_height:
                        format: uint64
                        title: >-
                          allow_list_expiration_height is the height at which
                          the allow list expires

                          i.e all staking transactions are allowed to enter
                          Babylon chain afterwards

                          setting it to 0 means allow list is disabled
                        type: string
                      btc_activation_height:
                        format: int64
                        title: >-
                          btc_activation_height is the btc height from which
                          parameters are activated

                          (inclusive)
                        type: integer
                      covenant_pks:
                        items:
                          format: byte
                          type: string
                        title: >-
                          PARAMETERS COVERING STAKING

                          covenant_pks is the list of public keys held by the
                          covenant committee

                          each PK follows encoding in BIP-340 spec on Bitcoin
                        type: array
                      covenant_quorum:
                        format: int64
                        title: >-
                          covenant_quorum is the minimum number of signatures
                          needed for the covenant

                          multisignature
                        type: integer
                      delegation_creation_base_gas_fee:
                        format: uint64
                        title: base gas fee for delegation creation
                        type: string
                      max_staking_time_blocks:
                        format: int64
                        title: >-
                          max_staking_time_blocks is the maximum lock time time
                          specified in staking

                          output script
                        type: integer
                      max_staking_value_sat:
                        format: int64
                        title: >-
                          max_staking_value_sat is the maximum of satoshis
                          locked in staking output
                        type: string
                      min_commission_rate:
                        title: >-
                          PARAMETERS COVERING FINALITY PROVIDERS

                          min_commission_rate is the chain-wide minimum
                          commission rate that a

                          finality provider can charge their delegators
                          expressed as a decimal (e.g.,

                          0.5 for 50%). Maximal precion is 2 decimal places
                        type: string
                      min_slashing_tx_fee_sat:
                        format: int64
                        title: >-
                          min_slashing_tx_fee_sat is the minimum amount of tx
                          fee (quantified

                          in Satoshi) needed for the pre-signed slashing tx. It
                          covers both:

                          staking slashing transaction and unbonding slashing
                          transaction
                        type: string
                      min_staking_time_blocks:
                        format: int64
                        title: >-
                          min_staking_time is the minimum lock time specified in
                          staking output

                          script
                        type: integer
                      min_staking_value_sat:
                        format: int64
                        title: >-
                          min_staking_value_sat is the minimum of satoshis
                          locked in staking output
                        type: string
                      slashing_pk_script:
                        format: byte
                        title: >-
                          PARAMETERS COVERING SLASHING

                          slashing_pk_script is the pk_script expected in
                          slashing output ie. the

                          first output of slashing transaction
                        type: string
                      slashing_rate:
                        title: >-
                          slashing_rate determines the portion of the staked
                          amount to be slashed,

                          expressed as a decimal (e.g., 0.5 for 50%). Maximal
                          precion is 2 decimal

                          places
                        type: string
                      unbonding_fee_sat:
                        format: int64
                        title: >-
                          unbonding_fee exact fee required for unbonding
                          transaction
                        type: string
                      unbonding_time_blocks:
                        format: int64
                        title: >-
                          PARAMETERS COVERING UNBONDING

                          unbonding_time is the exact unbonding time required
                          from unbonding

                          transaction it must be larger than
                          `checkpoint_finalization_timeout` from

                          `btccheckpoint` module
                        type: integer
                    type: object
                type: object
          description: A successful response.
        default:
          content:
            '*/*':
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }
                            // or ...
                            if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                              foo = any.unpack(Foo.getDefaultInstance());
                            }

                        Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                        Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".


                        JSON


                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      tags:
        - Babylon
      operationId: ParamsByVersion
      summary: >-
        ParamsByVersion queries the parameters of the module for a specific
        version

        of past params.
  /babylon/btcstaking/v1/params_versions:
    get:
      parameters:
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          name: pagination.key
          required: false
          schema:
            format: byte
            type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          name: pagination.offset
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          name: pagination.limit
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          schema:
            type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          schema:
            type: boolean
      responses:
        '200':
          content:
            '*/*':
              schema:
                description: >-
                  QueryParamsVersionsResponse stores all the params with
                  versions.
                properties:
                  pagination:
                    description: pagination defines the pagination in the response.
                    properties:
                      next_key:
                        description: >-
                          next_key is the key to be passed to PageRequest.key to

                          query the next page most efficiently. It will be empty
                          if

                          there are no more results.
                        format: byte
                        type: string
                      total:
                        format: uint64
                        title: >-
                          total is total number of results available if
                          PageRequest.count_total

                          was set, its value is undefined otherwise
                        type: string
                    type: object
                  params:
                    description: params holds all the params with version from this module.
                    items:
                      properties:
                        params:
                          description: Params defines the parameters for the module.
                          properties:
                            allow_list_expiration_height:
                              format: uint64
                              title: >-
                                allow_list_expiration_height is the height at
                                which the allow list expires

                                i.e all staking transactions are allowed to
                                enter Babylon chain afterwards

                                setting it to 0 means allow list is disabled
                              type: string
                            btc_activation_height:
                              format: int64
                              title: >-
                                btc_activation_height is the btc height from
                                which parameters are activated

                                (inclusive)
                              type: integer
                            covenant_pks:
                              items:
                                format: byte
                                type: string
                              title: >-
                                PARAMETERS COVERING STAKING

                                covenant_pks is the list of public keys held by
                                the covenant committee

                                each PK follows encoding in BIP-340 spec on
                                Bitcoin
                              type: array
                            covenant_quorum:
                              format: int64
                              title: >-
                                covenant_quorum is the minimum number of
                                signatures needed for the covenant

                                multisignature
                              type: integer
                            delegation_creation_base_gas_fee:
                              format: uint64
                              title: base gas fee for delegation creation
                              type: string
                            max_staking_time_blocks:
                              format: int64
                              title: >-
                                max_staking_time_blocks is the maximum lock time
                                time specified in staking

                                output script
                              type: integer
                            max_staking_value_sat:
                              format: int64
                              title: >-
                                max_staking_value_sat is the maximum of satoshis
                                locked in staking output
                              type: string
                            min_commission_rate:
                              title: >-
                                PARAMETERS COVERING FINALITY PROVIDERS

                                min_commission_rate is the chain-wide minimum
                                commission rate that a

                                finality provider can charge their delegators
                                expressed as a decimal (e.g.,

                                0.5 for 50%). Maximal precion is 2 decimal
                                places
                              type: string
                            min_slashing_tx_fee_sat:
                              format: int64
                              title: >-
                                min_slashing_tx_fee_sat is the minimum amount of
                                tx fee (quantified

                                in Satoshi) needed for the pre-signed slashing
                                tx. It covers both:

                                staking slashing transaction and unbonding
                                slashing transaction
                              type: string
                            min_staking_time_blocks:
                              format: int64
                              title: >-
                                min_staking_time is the minimum lock time
                                specified in staking output

                                script
                              type: integer
                            min_staking_value_sat:
                              format: int64
                              title: >-
                                min_staking_value_sat is the minimum of satoshis
                                locked in staking output
                              type: string
                            slashing_pk_script:
                              format: byte
                              title: >-
                                PARAMETERS COVERING SLASHING

                                slashing_pk_script is the pk_script expected in
                                slashing output ie. the

                                first output of slashing transaction
                              type: string
                            slashing_rate:
                              title: >-
                                slashing_rate determines the portion of the
                                staked amount to be slashed,

                                expressed as a decimal (e.g., 0.5 for 50%).
                                Maximal precion is 2 decimal

                                places
                              type: string
                            unbonding_fee_sat:
                              format: int64
                              title: >-
                                unbonding_fee exact fee required for unbonding
                                transaction
                              type: string
                            unbonding_time_blocks:
                              format: int64
                              title: >-
                                PARAMETERS COVERING UNBONDING

                                unbonding_time is the exact unbonding time
                                required from unbonding

                                transaction it must be larger than
                                `checkpoint_finalization_timeout` from

                                `btccheckpoint` module
                              type: integer
                          title: 'NOTE: Parameters must always be provided'
                          type: object
                        version:
                          format: int64
                          title: >-
                            version of the stored parameters. Each parameters
                            update

                            increments version number by 1
                          type: integer
                      title: >-
                        StoredParams attach information about the version of
                        stored parameters
                      type: object
                    type: array
                type: object
          description: A successful response.
        default:
          content:
            '*/*':
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }
                            // or ...
                            if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                              foo = any.unpack(Foo.getDefaultInstance());
                            }

                        Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                        Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".


                        JSON


                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      tags:
        - Babylon
      operationId: ParamsVersions
      summary: ParamsVersions queries all the parameters of the module with version.
  /babylon/btcstkconsumer/v1/consumer_registry_list:
    get:
      parameters:
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          name: pagination.key
          required: false
          schema:
            format: byte
            type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          name: pagination.offset
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          name: pagination.limit
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          schema:
            type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          schema:
            type: boolean
      responses:
        '200':
          content:
            '*/*':
              schema:
                properties:
                  consumer_registers:
                    items:
                      properties:
                        consumer_description:
                          title: >-
                            consumer_description is a description for the
                            consumer (can be empty)
                          type: string
                        consumer_id:
                          title: >-
                            consumer_id is the ID of the consumer

                            - for Cosmos SDK chains, the consumer ID will be the
                            IBC client ID

                            - for ETH L2 chains, the consumer ID will be the
                            chain ID of the ETH L2
                              chain
                          type: string
                        consumer_name:
                          title: consumer_name is the name of the consumer
                          type: string
                        cosmos_channel_id:
                          title: >-
                            cosmos_channel_id is the IBC channel ID for the
                            consumer

                            set only for Cosmos integration
                          type: string
                        eth_l2_finality_contract_address:
                          title: >-
                            eth_l2_finality_contract_address is the address of
                            the finality contract

                            set only for ETH L2 integration
                          type: string
                      title: >-
                        ConsumerRegisterResponse contains the information for a
                        registered consumer

                        The struct is used in the query responses
                      type: object
                    title: >-
                      consumer_registers are the registered consumers in
                      ascending alphabetical order
                    type: array
                  pagination:
                    description: >-
                      PageResponse is to be embedded in gRPC response messages
                      where the

                      corresponding request message has used PageRequest.

                       message SomeResponse {
                               repeated Bar results = 1;
                               PageResponse page = 2;
                       }
                    properties:
                      next_key:
                        description: >-
                          next_key is the key to be passed to PageRequest.key to

                          query the next page most efficiently. It will be empty
                          if

                          there are no more results.
                        format: byte
                        type: string
                      total:
                        format: uint64
                        title: >-
                          total is total number of results available if
                          PageRequest.count_total

                          was set, its value is undefined otherwise
                        type: string
                    title: pagination defines the pagination in the response
                    type: object
                title: >-
                  QueryConsumerRegistryListResponse is response type for the
                  Query/ConsumerRegistryList RPC method
                type: object
          description: A successful response.
        default:
          content:
            '*/*':
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }
                            // or ...
                            if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                              foo = any.unpack(Foo.getDefaultInstance());
                            }

                        Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                        Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".


                        JSON


                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      tags:
        - Babylon
      operationId: ConsumerRegistryList
      summary: >-
        ConsumerRegistryList queries the list of consumers that are registered
        to Babylon
  /babylon/btcstkconsumer/v1/consumers_registry/{consumer_ids}:
    get:
      parameters:
        - in: path
          name: consumer_ids
          required: true
          schema:
            items:
              type: string
            minItems: 1
            type: array
          style: simple
      responses:
        '200':
          content:
            '*/*':
              schema:
                description: >-
                  QueryConsumersRegistryResponse is response type for the
                  Query/ConsumersRegistry RPC method.
                properties:
                  consumer_registers:
                    items:
                      properties:
                        consumer_description:
                          title: >-
                            consumer_description is a description for the
                            consumer (can be empty)
                          type: string
                        consumer_id:
                          title: >-
                            consumer_id is the ID of the consumer

                            - for Cosmos SDK chains, the consumer ID will be the
                            IBC client ID

                            - for ETH L2 chains, the consumer ID will be the
                            chain ID of the ETH L2
                              chain
                          type: string
                        consumer_name:
                          title: consumer_name is the name of the consumer
                          type: string
                        cosmos_channel_id:
                          title: >-
                            cosmos_channel_id is the IBC channel ID for the
                            consumer

                            set only for Cosmos integration
                          type: string
                        eth_l2_finality_contract_address:
                          title: >-
                            eth_l2_finality_contract_address is the address of
                            the finality contract

                            set only for ETH L2 integration
                          type: string
                      title: >-
                        ConsumerRegisterResponse contains the information for a
                        registered consumer

                        The struct is used in the query responses
                      type: object
                    type: array
                type: object
          description: A successful response.
        default:
          content:
            '*/*':
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }
                            // or ...
                            if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                              foo = any.unpack(Foo.getDefaultInstance());
                            }

                        Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                        Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".


                        JSON


                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      tags:
        - Babylon
      operationId: ConsumersRegistry
      summary: >-
        ConsumersRegistry queries the latest info for a given list of consumers
        in Babylon's view
  /babylon/btcstkconsumer/v1/finality_provider/{consumer_id}/{fp_btc_pk_hex}:
    get:
      parameters:
        - description: >-
            consumer id is the consumer id this finality provider is registered
            to
          in: path
          name: consumer_id
          required: true
          schema:
            type: string
        - description: >-
            fp_btc_pk_hex is the hex str of Bitcoin secp256k1 PK of the finality
            provider
          in: path
          name: fp_btc_pk_hex
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                properties:
                  finality_provider:
                    description: >-
                      FinalityProviderResponse defines a finality provider with
                      voting power information.
                    properties:
                      addr:
                        title: >-
                          babylon_pk is the Babylon secp256k1 PK of this
                          finality provider
                        type: string
                      btc_pk:
                        format: byte
                        title: >-
                          btc_pk is the Bitcoin secp256k1 PK of this finality
                          provider

                          the PK follows encoding in BIP-340 spec
                        type: string
                      commission:
                        description: >-
                          commission defines the commission rate of the finality
                          provider.
                        type: string
                      consumer_id:
                        title: >-
                          consumer_id is the consumer id this finality provider
                          is registered to
                        type: string
                      description:
                        description: >-
                          description defines the description terms for the
                          finality provider.
                        properties:
                          details:
                            description: details define other optional details.
                            type: string
                          identity:
                            description: >-
                              identity defines an optional identity signature
                              (ex. UPort or Keybase).
                            type: string
                          moniker:
                            description: >-
                              moniker defines a human-readable name for the
                              validator.
                            type: string
                          security_contact:
                            description: >-
                              security_contact defines an optional email for
                              security contact.
                            type: string
                          website:
                            description: website defines an optional website link.
                            type: string
                        type: object
                      height:
                        format: uint64
                        title: height is the queried Babylon height
                        type: string
                      pop:
                        properties:
                          btc_sig:
                            format: byte
                            title: >-
                              btc_sig is the signature generated via
                              sign(sk_btc, babylon_staker_address)

                              the signature follows encoding in either BIP-340
                              spec or BIP-322 spec
                            type: string
                          btc_sig_type:
                            default: BIP340
                            description: >-
                              - BIP340: BIP340 means the btc_sig will follow the
                              BIP-340 encoding
                               - BIP322: BIP322 means the btc_sig will follow the BIP-322 encoding
                               - ECDSA: ECDSA means the btc_sig will follow the ECDSA encoding
                              ref:
                              https://github.com/okx/js-wallet-sdk/blob/a57c2acbe6ce917c0aa4e951d96c4e562ad58444/packages/coin-bitcoin/src/BtcWallet.ts#L331
                            enum:
                              - BIP340
                              - BIP322
                              - ECDSA
                            title: >-
                              btc_sig_type indicates the type of btc_sig in the
                              pop
                            type: string
                        title: >-
                          pop is the proof of possession of babylon_pk and
                          btc_pk
                        type: object
                      slashed_babylon_height:
                        format: uint64
                        title: >-
                          slashed_babylon_height indicates the Babylon height
                          when

                          the finality provider is slashed.

                          if it's 0 then the finality provider is not slashed
                        type: string
                      slashed_btc_height:
                        format: int64
                        title: |-
                          slashed_btc_height indicates the BTC height when
                          the finality provider is slashed.
                          if it's 0 then the finality provider is not slashed
                        type: integer
                      voting_power:
                        format: uint64
                        title: >-
                          voting_power is the voting power of this finality
                          provider at the given height
                        type: string
                    title: finality_provider contains the FinalityProvider
                    type: object
                title: >-
                  QueryFinalityProviderResponse contains information about a
                  finality provider
                type: object
          description: A successful response.
        default:
          content:
            '*/*':
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }
                            // or ...
                            if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                              foo = any.unpack(Foo.getDefaultInstance());
                            }

                        Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                        Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".


                        JSON


                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      tags:
        - Babylon
      operationId: FinalityProviderConsumer
      summary: FinalityProvider info about one finality provider
  /babylon/btcstkconsumer/v1/finality_provider_consumer/{fp_btc_pk_hex}:
    get:
      parameters:
        - description: >-
            fp_btc_pk_hex is the hex str of Bitcoin secp256k1 PK of the finality
            provider
          in: path
          name: fp_btc_pk_hex
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                properties:
                  consumer_id:
                    type: string
                title: >-
                  QueryFinalityProviderConsumerResponse returns the CZ finality
                  provier consumer id
                type: object
          description: A successful response.
        default:
          content:
            '*/*':
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }
                            // or ...
                            if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                              foo = any.unpack(Foo.getDefaultInstance());
                            }

                        Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                        Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".


                        JSON


                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      tags:
        - Babylon
      operationId: FinalityProviderConsumer
      summary: FinalityProviderConsumer info about one finality provider's consumer id
  /babylon/btcstkconsumer/v1/finality_providers/{consumer_id}:
    get:
      parameters:
        - in: path
          name: consumer_id
          required: true
          schema:
            type: string
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          name: pagination.key
          required: false
          schema:
            format: byte
            type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          name: pagination.offset
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          name: pagination.limit
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          schema:
            type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          schema:
            type: boolean
      responses:
        '200':
          content:
            '*/*':
              schema:
                description: |-
                  QueryFinalityProvidersResponse is the response type for the
                  Query/FinalityProviders RPC method.
                properties:
                  finality_providers:
                    items:
                      description: >-
                        FinalityProviderResponse defines a finality provider
                        with voting power information.
                      properties:
                        addr:
                          title: >-
                            babylon_pk is the Babylon secp256k1 PK of this
                            finality provider
                          type: string
                        btc_pk:
                          format: byte
                          title: >-
                            btc_pk is the Bitcoin secp256k1 PK of this finality
                            provider

                            the PK follows encoding in BIP-340 spec
                          type: string
                        commission:
                          description: >-
                            commission defines the commission rate of the
                            finality provider.
                          type: string
                        consumer_id:
                          title: >-
                            consumer_id is the consumer id this finality
                            provider is registered to
                          type: string
                        description:
                          description: >-
                            description defines the description terms for the
                            finality provider.
                          properties:
                            details:
                              description: details define other optional details.
                              type: string
                            identity:
                              description: >-
                                identity defines an optional identity signature
                                (ex. UPort or Keybase).
                              type: string
                            moniker:
                              description: >-
                                moniker defines a human-readable name for the
                                validator.
                              type: string
                            security_contact:
                              description: >-
                                security_contact defines an optional email for
                                security contact.
                              type: string
                            website:
                              description: website defines an optional website link.
                              type: string
                          type: object
                        height:
                          format: uint64
                          title: height is the queried Babylon height
                          type: string
                        pop:
                          properties:
                            btc_sig:
                              format: byte
                              title: >-
                                btc_sig is the signature generated via
                                sign(sk_btc, babylon_staker_address)

                                the signature follows encoding in either BIP-340
                                spec or BIP-322 spec
                              type: string
                            btc_sig_type:
                              default: BIP340
                              description: >-
                                - BIP340: BIP340 means the btc_sig will follow
                                the BIP-340 encoding
                                 - BIP322: BIP322 means the btc_sig will follow the BIP-322 encoding
                                 - ECDSA: ECDSA means the btc_sig will follow the ECDSA encoding
                                ref:
                                https://github.com/okx/js-wallet-sdk/blob/a57c2acbe6ce917c0aa4e951d96c4e562ad58444/packages/coin-bitcoin/src/BtcWallet.ts#L331
                              enum:
                                - BIP340
                                - BIP322
                                - ECDSA
                              title: >-
                                btc_sig_type indicates the type of btc_sig in
                                the pop
                              type: string
                          title: >-
                            pop is the proof of possession of babylon_pk and
                            btc_pk
                          type: object
                        slashed_babylon_height:
                          format: uint64
                          title: >-
                            slashed_babylon_height indicates the Babylon height
                            when

                            the finality provider is slashed.

                            if it's 0 then the finality provider is not slashed
                          type: string
                        slashed_btc_height:
                          format: int64
                          title: |-
                            slashed_btc_height indicates the BTC height when
                            the finality provider is slashed.
                            if it's 0 then the finality provider is not slashed
                          type: integer
                        voting_power:
                          format: uint64
                          title: >-
                            voting_power is the voting power of this finality
                            provider at the given height
                          type: string
                      type: object
                    title: finality_providers contains all the finality providers
                    type: array
                  pagination:
                    description: pagination defines the pagination in the response.
                    properties:
                      next_key:
                        description: >-
                          next_key is the key to be passed to PageRequest.key to

                          query the next page most efficiently. It will be empty
                          if

                          there are no more results.
                        format: byte
                        type: string
                      total:
                        format: uint64
                        title: >-
                          total is total number of results available if
                          PageRequest.count_total

                          was set, its value is undefined otherwise
                        type: string
                    type: object
                type: object
          description: A successful response.
        default:
          content:
            '*/*':
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }
                            // or ...
                            if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                              foo = any.unpack(Foo.getDefaultInstance());
                            }

                        Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                        Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".


                        JSON


                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      tags:
        - Babylon
      operationId: FinalityProvidersConsumer
      summary: FinalityProviders queries all finality providers for a given consumer
  /babylon/btcstkconsumer/v1/params:
    get:
      responses:
        '200':
          content:
            '*/*':
              schema:
                description: >-
                  QueryParamsResponse is response type for the Query/Params RPC
                  method.
                properties:
                  params:
                    description: params holds all the parameters of this module.
                    properties:
                      permissioned_integration:
                        description: >-
                          permissioned_integration is a flag to enable
                          permissioned integration, i.e.,

                          requiring governance proposal to approve new
                          integrations.
                        type: boolean
                    type: object
                type: object
          description: A successful response.
        default:
          content:
            '*/*':
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }
                            // or ...
                            if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                              foo = any.unpack(Foo.getDefaultInstance());
                            }

                        Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                        Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".


                        JSON


                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      tags:
        - Babylon
      operationId: BtcStkConsumerParams
      summary: Parameters queries the parameters of the module.
  /babylon/checkpointing/v1/bls_public_keys/{epoch_num}:
    get:
      parameters:
        - description: epoch_num defines the epoch for the queried bls public keys
          in: path
          name: epoch_num
          required: true
          schema:
            format: uint64
            type: string
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          name: pagination.key
          required: false
          schema:
            format: byte
            type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          name: pagination.offset
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          name: pagination.limit
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          schema:
            type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          schema:
            type: boolean
      responses:
        '200':
          content:
            '*/*':
              schema:
                description: |-
                  QueryBlsPublicKeyListResponse is the response type for the
                  Query/BlsPublicKeys RPC method.
                properties:
                  pagination:
                    description: pagination defines the pagination in the response.
                    properties:
                      next_key:
                        description: >-
                          next_key is the key to be passed to PageRequest.key to

                          query the next page most efficiently. It will be empty
                          if

                          there are no more results.
                        format: byte
                        type: string
                      total:
                        format: uint64
                        title: >-
                          total is total number of results available if
                          PageRequest.count_total

                          was set, its value is undefined otherwise
                        type: string
                    type: object
                  validator_with_bls_keys:
                    items:
                      properties:
                        bls_pub_key_hex:
                          title: bls_pub_key is the BLS public key of the validator
                          type: string
                        validator_address:
                          title: validator_address is the address of the validator
                          type: string
                        voting_power:
                          format: uint64
                          title: >-
                            voting_power is the voting power of the validator at
                            the given epoch
                          type: string
                      title: >-
                        BlsPublicKeyListResponse couples validator address,
                        voting power, and its bls

                        public key
                      type: object
                    type: array
                type: object
          description: A successful response.
        default:
          content:
            '*/*':
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      properties:
                        type_url:
                          type: string
                        value:
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      tags:
        - Babylon
      operationId: BlsPublicKeyList
      summary: >-
        BlsPublicKeyList queries a list of bls public keys of the validators at
        a

        given epoch number.
  /babylon/checkpointing/v1/epochs/{epoch_num}/status:
    get:
      parameters:
        - in: path
          name: epoch_num
          required: true
          schema:
            format: uint64
            type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                description: >-
                  QueryEpochStatusResponse is the response type for the
                  Query/EpochStatus

                  RPC method.
                properties:
                  status:
                    default: CKPT_STATUS_ACCUMULATING
                    description: |-
                      CheckpointStatus is the status of a checkpoint.

                       - CKPT_STATUS_ACCUMULATING: ACCUMULATING defines a checkpoint that is awaiting for BLS signatures.
                       - CKPT_STATUS_SEALED: SEALED defines a checkpoint that has accumulated sufficient BLS signatures.
                       - CKPT_STATUS_SUBMITTED: SUBMITTED defines a checkpoint that is included on BTC.
                       - CKPT_STATUS_CONFIRMED: CONFIRMED defines a checkpoint that is k-deep on BTC.
                       - CKPT_STATUS_FINALIZED: FINALIZED defines a checkpoint that is w-deep on BTC.
                    enum:
                      - CKPT_STATUS_ACCUMULATING
                      - CKPT_STATUS_SEALED
                      - CKPT_STATUS_SUBMITTED
                      - CKPT_STATUS_CONFIRMED
                      - CKPT_STATUS_FINALIZED
                    type: string
                type: object
          description: A successful response.
        default:
          content:
            '*/*':
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      properties:
                        type_url:
                          type: string
                        value:
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      tags:
        - Babylon
      operationId: EpochStatus
      summary: EpochStatus queries the status of the checkpoint at a given epoch
  /babylon/checkpointing/v1/epochs:status_count:
    get:
      parameters:
        - description: >-
            epoch_count is the number of the most recent epochs to include in
            the

            aggregation.
          in: query
          name: epoch_count
          required: false
          schema:
            format: uint64
            type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                description: >-
                  QueryRecentEpochStatusCountResponse is the response type for
                  the

                  Query/EpochStatusCount RPC method.
                properties:
                  epoch_count:
                    format: uint64
                    type: string
                  status_count:
                    additionalProperties:
                      format: uint64
                      type: string
                    type: object
                  tip_epoch:
                    format: uint64
                    type: string
                type: object
          description: A successful response.
        default:
          content:
            '*/*':
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      properties:
                        type_url:
                          type: string
                        value:
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      tags:
        - Babylon
      operationId: RecentEpochStatusCount
      summary: |-
        RecentEpochStatusCount queries the number of epochs with each status in
        recent epochs
  /babylon/checkpointing/v1/last_raw_checkpoint/{status}:
    get:
      parameters:
        - in: path
          name: status
          required: true
          schema:
            enum:
              - CKPT_STATUS_ACCUMULATING
              - CKPT_STATUS_SEALED
              - CKPT_STATUS_SUBMITTED
              - CKPT_STATUS_CONFIRMED
              - CKPT_STATUS_FINALIZED
            type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                description: >-
                  QueryLastCheckpointWithStatusResponse is the response type for
                  the

                  Query/LastCheckpointWithStatus RPC method.
                properties:
                  raw_checkpoint:
                    properties:
                      bitmap:
                        format: byte
                        title: >-
                          bitmap defines the bitmap that indicates the signers
                          of the BLS multi sig
                        type: string
                      block_hash_hex:
                        title: >-
                          block_hash_hex defines the 'BlockID.Hash', which is
                          the hash of

                          the block that individual BLS sigs are signed on as
                          hex string
                        type: string
                      bls_multi_sig:
                        format: byte
                        title: >-
                          bls_multi_sig defines the multi sig that is aggregated
                          from individual BLS

                          sigs
                        type: string
                      epoch_num:
                        format: uint64
                        title: >-
                          epoch_num defines the epoch number the raw checkpoint
                          is for
                        type: string
                    title: >-
                      RawCheckpointResponse wraps the BLS multi sig with
                      metadata
                    type: object
                type: object
          description: A successful response.
        default:
          content:
            '*/*':
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      properties:
                        type_url:
                          type: string
                        value:
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      tags:
        - Babylon
      operationId: LastCheckpointWithStatus
      summary: >-
        LastCheckpointWithStatus queries the last checkpoint with a given status
        or

        a more matured status
  /babylon/checkpointing/v1/raw_checkpoint/{epoch_num}:
    get:
      parameters:
        - description: epoch_num defines the epoch for the queried checkpoint
          in: path
          name: epoch_num
          required: true
          schema:
            format: uint64
            type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                description: >-
                  QueryRawCheckpointResponse is the response type for the
                  Query/RawCheckpoint

                  RPC method.
                properties:
                  raw_checkpoint:
                    description: >-
                      RawCheckpointWithMetaResponse wraps the raw checkpoint
                      with metadata.
                    properties:
                      bls_aggr_pk:
                        format: byte
                        title: bls_aggr_pk defines the aggregated BLS public key
                        type: string
                      ckpt:
                        properties:
                          bitmap:
                            format: byte
                            title: >-
                              bitmap defines the bitmap that indicates the
                              signers of the BLS multi sig
                            type: string
                          block_hash_hex:
                            title: >-
                              block_hash_hex defines the 'BlockID.Hash', which
                              is the hash of

                              the block that individual BLS sigs are signed on
                              as hex string
                            type: string
                          bls_multi_sig:
                            format: byte
                            title: >-
                              bls_multi_sig defines the multi sig that is
                              aggregated from individual BLS

                              sigs
                            type: string
                          epoch_num:
                            format: uint64
                            title: >-
                              epoch_num defines the epoch number the raw
                              checkpoint is for
                            type: string
                        title: >-
                          RawCheckpointResponse wraps the BLS multi sig with
                          metadata
                        type: object
                      lifecycle:
                        description: >-
                          lifecycle defines the lifecycle of this checkpoint,
                          i.e., each state

                          transition and the time (in both timestamp and block
                          height) of this

                          transition.
                        items:
                          description: >-
                            CheckpointStateUpdateResponse defines a state
                            transition on the checkpoint.
                          properties:
                            block_height:
                              format: uint64
                              title: >-
                                block_height is the height of the Babylon block
                                that triggers the state

                                update
                              type: string
                            block_time:
                              format: date-time
                              title: >-
                                block_time is the timestamp in the Babylon block
                                that triggers the state

                                update
                              type: string
                            state:
                              default: CKPT_STATUS_ACCUMULATING
                              description: |-
                                CheckpointStatus is the status of a checkpoint.

                                 - CKPT_STATUS_ACCUMULATING: ACCUMULATING defines a checkpoint that is awaiting for BLS signatures.
                                 - CKPT_STATUS_SEALED: SEALED defines a checkpoint that has accumulated sufficient BLS signatures.
                                 - CKPT_STATUS_SUBMITTED: SUBMITTED defines a checkpoint that is included on BTC.
                                 - CKPT_STATUS_CONFIRMED: CONFIRMED defines a checkpoint that is k-deep on BTC.
                                 - CKPT_STATUS_FINALIZED: FINALIZED defines a checkpoint that is w-deep on BTC.
                              enum:
                                - CKPT_STATUS_ACCUMULATING
                                - CKPT_STATUS_SEALED
                                - CKPT_STATUS_SUBMITTED
                                - CKPT_STATUS_CONFIRMED
                                - CKPT_STATUS_FINALIZED
                              title: >-
                                state defines the event of a state transition
                                towards this state
                              type: string
                            status_desc:
                              description: >-
                                status_desc represents the description of status
                                enum.
                              type: string
                          type: object
                        type: array
                      power_sum:
                        format: uint64
                        title: >-
                          power_sum defines the accumulated voting power for the
                          checkpoint
                        type: string
                      status:
                        default: CKPT_STATUS_ACCUMULATING
                        description: |-
                          CheckpointStatus is the status of a checkpoint.

                           - CKPT_STATUS_ACCUMULATING: ACCUMULATING defines a checkpoint that is awaiting for BLS signatures.
                           - CKPT_STATUS_SEALED: SEALED defines a checkpoint that has accumulated sufficient BLS signatures.
                           - CKPT_STATUS_SUBMITTED: SUBMITTED defines a checkpoint that is included on BTC.
                           - CKPT_STATUS_CONFIRMED: CONFIRMED defines a checkpoint that is k-deep on BTC.
                           - CKPT_STATUS_FINALIZED: FINALIZED defines a checkpoint that is w-deep on BTC.
                        enum:
                          - CKPT_STATUS_ACCUMULATING
                          - CKPT_STATUS_SEALED
                          - CKPT_STATUS_SUBMITTED
                          - CKPT_STATUS_CONFIRMED
                          - CKPT_STATUS_FINALIZED
                        title: status defines the status of the checkpoint
                        type: string
                      status_desc:
                        description: status_desc represents the description of status enum.
                        type: string
                    type: object
                type: object
          description: A successful response.
        default:
          content:
            '*/*':
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      properties:
                        type_url:
                          type: string
                        value:
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      tags:
        - Babylon
      operationId: RawCheckpoint
      summary: RawCheckpoint queries a checkpoints at a given epoch number.
  /babylon/checkpointing/v1/raw_checkpoints:
    get:
      parameters:
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          name: pagination.key
          required: false
          schema:
            format: byte
            type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          name: pagination.offset
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          name: pagination.limit
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          schema:
            type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          schema:
            type: boolean
      responses:
        '200':
          content:
            '*/*':
              schema:
                description: >-
                  QueryRawCheckpointsResponse is the response type for the
                  Query/RawCheckpoints

                  RPC method.
                properties:
                  pagination:
                    description: pagination defines the pagination in the response.
                    properties:
                      next_key:
                        description: >-
                          next_key is the key to be passed to PageRequest.key to

                          query the next page most efficiently. It will be empty
                          if

                          there are no more results.
                        format: byte
                        type: string
                      total:
                        format: uint64
                        title: >-
                          total is total number of results available if
                          PageRequest.count_total

                          was set, its value is undefined otherwise
                        type: string
                    type: object
                  raw_checkpoints:
                    items:
                      description: >-
                        RawCheckpointWithMetaResponse wraps the raw checkpoint
                        with metadata.
                      properties:
                        bls_aggr_pk:
                          format: byte
                          title: bls_aggr_pk defines the aggregated BLS public key
                          type: string
                        ckpt:
                          properties:
                            bitmap:
                              format: byte
                              title: >-
                                bitmap defines the bitmap that indicates the
                                signers of the BLS multi sig
                              type: string
                            block_hash_hex:
                              title: >-
                                block_hash_hex defines the 'BlockID.Hash', which
                                is the hash of

                                the block that individual BLS sigs are signed on
                                as hex string
                              type: string
                            bls_multi_sig:
                              format: byte
                              title: >-
                                bls_multi_sig defines the multi sig that is
                                aggregated from individual BLS

                                sigs
                              type: string
                            epoch_num:
                              format: uint64
                              title: >-
                                epoch_num defines the epoch number the raw
                                checkpoint is for
                              type: string
                          title: >-
                            RawCheckpointResponse wraps the BLS multi sig with
                            metadata
                          type: object
                        lifecycle:
                          description: >-
                            lifecycle defines the lifecycle of this checkpoint,
                            i.e., each state

                            transition and the time (in both timestamp and block
                            height) of this

                            transition.
                          items:
                            description: >-
                              CheckpointStateUpdateResponse defines a state
                              transition on the checkpoint.
                            properties:
                              block_height:
                                format: uint64
                                title: >-
                                  block_height is the height of the Babylon
                                  block that triggers the state

                                  update
                                type: string
                              block_time:
                                format: date-time
                                title: >-
                                  block_time is the timestamp in the Babylon
                                  block that triggers the state

                                  update
                                type: string
                              state:
                                default: CKPT_STATUS_ACCUMULATING
                                description: >-
                                  CheckpointStatus is the status of a
                                  checkpoint.

                                   - CKPT_STATUS_ACCUMULATING: ACCUMULATING defines a checkpoint that is awaiting for BLS signatures.
                                   - CKPT_STATUS_SEALED: SEALED defines a checkpoint that has accumulated sufficient BLS signatures.
                                   - CKPT_STATUS_SUBMITTED: SUBMITTED defines a checkpoint that is included on BTC.
                                   - CKPT_STATUS_CONFIRMED: CONFIRMED defines a checkpoint that is k-deep on BTC.
                                   - CKPT_STATUS_FINALIZED: FINALIZED defines a checkpoint that is w-deep on BTC.
                                enum:
                                  - CKPT_STATUS_ACCUMULATING
                                  - CKPT_STATUS_SEALED
                                  - CKPT_STATUS_SUBMITTED
                                  - CKPT_STATUS_CONFIRMED
                                  - CKPT_STATUS_FINALIZED
                                title: >-
                                  state defines the event of a state transition
                                  towards this state
                                type: string
                              status_desc:
                                description: >-
                                  status_desc represents the description of
                                  status enum.
                                type: string
                            type: object
                          type: array
                        power_sum:
                          format: uint64
                          title: >-
                            power_sum defines the accumulated voting power for
                            the checkpoint
                          type: string
                        status:
                          default: CKPT_STATUS_ACCUMULATING
                          description: |-
                            CheckpointStatus is the status of a checkpoint.

                             - CKPT_STATUS_ACCUMULATING: ACCUMULATING defines a checkpoint that is awaiting for BLS signatures.
                             - CKPT_STATUS_SEALED: SEALED defines a checkpoint that has accumulated sufficient BLS signatures.
                             - CKPT_STATUS_SUBMITTED: SUBMITTED defines a checkpoint that is included on BTC.
                             - CKPT_STATUS_CONFIRMED: CONFIRMED defines a checkpoint that is k-deep on BTC.
                             - CKPT_STATUS_FINALIZED: FINALIZED defines a checkpoint that is w-deep on BTC.
                          enum:
                            - CKPT_STATUS_ACCUMULATING
                            - CKPT_STATUS_SEALED
                            - CKPT_STATUS_SUBMITTED
                            - CKPT_STATUS_CONFIRMED
                            - CKPT_STATUS_FINALIZED
                          title: status defines the status of the checkpoint
                          type: string
                        status_desc:
                          description: >-
                            status_desc represents the description of status
                            enum.
                          type: string
                      type: object
                    title: >-
                      the order is going from the newest to oldest based on the
                      epoch number
                    type: array
                type: object
          description: A successful response.
        default:
          content:
            '*/*':
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      properties:
                        type_url:
                          type: string
                        value:
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      tags:
        - Babylon
      operationId: RawCheckpoints
      summary: >-
        RawCheckpoints queries checkpoints for a epoch range specified in
        pagination params.
  /babylon/checkpointing/v1/raw_checkpoints/{status}:
    get:
      parameters:
        - description: status defines the status of the raw checkpoints of the query
          in: path
          name: status
          required: true
          schema:
            enum:
              - CKPT_STATUS_ACCUMULATING
              - CKPT_STATUS_SEALED
              - CKPT_STATUS_SUBMITTED
              - CKPT_STATUS_CONFIRMED
              - CKPT_STATUS_FINALIZED
            type: string
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          name: pagination.key
          required: false
          schema:
            format: byte
            type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          name: pagination.offset
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          name: pagination.limit
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          schema:
            type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          schema:
            type: boolean
      responses:
        '200':
          content:
            '*/*':
              schema:
                description: |-
                  QueryRawCheckpointListResponse is the response type for the
                  Query/RawCheckpoints RPC method.
                properties:
                  pagination:
                    description: pagination defines the pagination in the response.
                    properties:
                      next_key:
                        description: >-
                          next_key is the key to be passed to PageRequest.key to

                          query the next page most efficiently. It will be empty
                          if

                          there are no more results.
                        format: byte
                        type: string
                      total:
                        format: uint64
                        title: >-
                          total is total number of results available if
                          PageRequest.count_total

                          was set, its value is undefined otherwise
                        type: string
                    type: object
                  raw_checkpoints:
                    items:
                      description: >-
                        RawCheckpointWithMetaResponse wraps the raw checkpoint
                        with metadata.
                      properties:
                        bls_aggr_pk:
                          format: byte
                          title: bls_aggr_pk defines the aggregated BLS public key
                          type: string
                        ckpt:
                          properties:
                            bitmap:
                              format: byte
                              title: >-
                                bitmap defines the bitmap that indicates the
                                signers of the BLS multi sig
                              type: string
                            block_hash_hex:
                              title: >-
                                block_hash_hex defines the 'BlockID.Hash', which
                                is the hash of

                                the block that individual BLS sigs are signed on
                                as hex string
                              type: string
                            bls_multi_sig:
                              format: byte
                              title: >-
                                bls_multi_sig defines the multi sig that is
                                aggregated from individual BLS

                                sigs
                              type: string
                            epoch_num:
                              format: uint64
                              title: >-
                                epoch_num defines the epoch number the raw
                                checkpoint is for
                              type: string
                          title: >-
                            RawCheckpointResponse wraps the BLS multi sig with
                            metadata
                          type: object
                        lifecycle:
                          description: >-
                            lifecycle defines the lifecycle of this checkpoint,
                            i.e., each state

                            transition and the time (in both timestamp and block
                            height) of this

                            transition.
                          items:
                            description: >-
                              CheckpointStateUpdateResponse defines a state
                              transition on the checkpoint.
                            properties:
                              block_height:
                                format: uint64
                                title: >-
                                  block_height is the height of the Babylon
                                  block that triggers the state

                                  update
                                type: string
                              block_time:
                                format: date-time
                                title: >-
                                  block_time is the timestamp in the Babylon
                                  block that triggers the state

                                  update
                                type: string
                              state:
                                default: CKPT_STATUS_ACCUMULATING
                                description: >-
                                  CheckpointStatus is the status of a
                                  checkpoint.

                                   - CKPT_STATUS_ACCUMULATING: ACCUMULATING defines a checkpoint that is awaiting for BLS signatures.
                                   - CKPT_STATUS_SEALED: SEALED defines a checkpoint that has accumulated sufficient BLS signatures.
                                   - CKPT_STATUS_SUBMITTED: SUBMITTED defines a checkpoint that is included on BTC.
                                   - CKPT_STATUS_CONFIRMED: CONFIRMED defines a checkpoint that is k-deep on BTC.
                                   - CKPT_STATUS_FINALIZED: FINALIZED defines a checkpoint that is w-deep on BTC.
                                enum:
                                  - CKPT_STATUS_ACCUMULATING
                                  - CKPT_STATUS_SEALED
                                  - CKPT_STATUS_SUBMITTED
                                  - CKPT_STATUS_CONFIRMED
                                  - CKPT_STATUS_FINALIZED
                                title: >-
                                  state defines the event of a state transition
                                  towards this state
                                type: string
                              status_desc:
                                description: >-
                                  status_desc represents the description of
                                  status enum.
                                type: string
                            type: object
                          type: array
                        power_sum:
                          format: uint64
                          title: >-
                            power_sum defines the accumulated voting power for
                            the checkpoint
                          type: string
                        status:
                          default: CKPT_STATUS_ACCUMULATING
                          description: |-
                            CheckpointStatus is the status of a checkpoint.

                             - CKPT_STATUS_ACCUMULATING: ACCUMULATING defines a checkpoint that is awaiting for BLS signatures.
                             - CKPT_STATUS_SEALED: SEALED defines a checkpoint that has accumulated sufficient BLS signatures.
                             - CKPT_STATUS_SUBMITTED: SUBMITTED defines a checkpoint that is included on BTC.
                             - CKPT_STATUS_CONFIRMED: CONFIRMED defines a checkpoint that is k-deep on BTC.
                             - CKPT_STATUS_FINALIZED: FINALIZED defines a checkpoint that is w-deep on BTC.
                          enum:
                            - CKPT_STATUS_ACCUMULATING
                            - CKPT_STATUS_SEALED
                            - CKPT_STATUS_SUBMITTED
                            - CKPT_STATUS_CONFIRMED
                            - CKPT_STATUS_FINALIZED
                          title: status defines the status of the checkpoint
                          type: string
                        status_desc:
                          description: >-
                            status_desc represents the description of status
                            enum.
                          type: string
                      type: object
                    title: >-
                      the order is going from the newest to oldest based on the
                      epoch number
                    type: array
                type: object
          description: A successful response.
        default:
          content:
            '*/*':
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      properties:
                        type_url:
                          type: string
                        value:
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      tags:
        - Babylon
      operationId: RawCheckpointList
      summary: RawCheckpointList queries all checkpoints that match the given status.
  /babylon/epoching/v1/current_epoch:
    get:
      responses:
        '200':
          content:
            '*/*':
              schema:
                properties:
                  current_epoch:
                    format: uint64
                    title: current_epoch is the current epoch number
                    type: string
                  epoch_boundary:
                    format: uint64
                    title: epoch_boundary is the height of this epoch's last block
                    type: string
                title: >-
                  QueryCurrentEpochResponse is the response type for the
                  Query/CurrentEpoch RPC

                  method
                type: object
          description: A successful response.
        default:
          content:
            '*/*':
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }
                            // or ...
                            if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                              foo = any.unpack(Foo.getDefaultInstance());
                            }

                        Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                        Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".


                        JSON


                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      tags:
        - Babylon
      operationId: CurrentEpoch
      summary: CurrentEpoch queries the current epoch
  /babylon/epoching/v1/delegation_lifecycle/{del_addr}:
    get:
      parameters:
        - in: path
          name: del_addr
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                properties:
                  del_life:
                    properties:
                      del_addr:
                        type: string
                      del_life:
                        items:
                          properties:
                            amount:
                              description: >-
                                Coin defines a token with a denomination and an
                                amount.


                                NOTE: The amount field is an Int which
                                implements the custom method

                                signatures required by gogoproto.
                              properties:
                                amount:
                                  type: string
                                denom:
                                  type: string
                              type: object
                            block_height:
                              format: uint64
                              type: string
                            block_time:
                              format: date-time
                              type: string
                            state:
                              default: CREATED
                              description: >-
                                - CREATED: CREATED is when the
                                validator/delegation has been created
                                 - BONDED: CREATED is when the validator/delegation has become bonded
                                 - UNBONDING: CREATED is when the validator/delegation has become unbonding
                                 - UNBONDED: CREATED is when the validator/delegation has become unbonded
                                 - REMOVED: CREATED is when the validator/delegation has been removed
                              enum:
                                - CREATED
                                - BONDED
                                - UNBONDING
                                - UNBONDED
                                - REMOVED
                              title: >-
                                BondState is the bond state of a validator or
                                delegation
                              type: string
                            val_addr:
                              type: string
                          title: >-
                            DelegationStateUpdate is the message that records a
                            state update of a

                            delegation
                          type: object
                        type: array
                    title: >-
                      ValidatorLifecycle is a message that records the lifecycle
                      of

                      a delegation
                    type: object
                title: |-
                  QueryDelegationLifecycleRequest is the response type for the
                  Query/DelegationLifecycle RPC method
                type: object
          description: A successful response.
        default:
          content:
            '*/*':
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }
                            // or ...
                            if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                              foo = any.unpack(Foo.getDefaultInstance());
                            }

                        Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                        Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".


                        JSON


                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      tags:
        - Babylon
      operationId: DelegationLifecycle
      summary: DelegationLifecycle queries the lifecycle of a given delegation
  /babylon/epoching/v1/epochs:
    get:
      parameters:
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          name: pagination.key
          required: false
          schema:
            format: byte
            type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          name: pagination.offset
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          name: pagination.limit
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          schema:
            type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          schema:
            type: boolean
      responses:
        '200':
          content:
            '*/*':
              schema:
                properties:
                  epochs:
                    items:
                      properties:
                        current_epoch_interval:
                          format: uint64
                          title: >-
                            current_epoch_interval is the epoch interval at the
                            time of this epoch
                          type: string
                        epoch_number:
                          format: uint64
                          title: epoch_number is the number of this epoch
                          type: string
                        first_block_height:
                          format: uint64
                          title: >-
                            first_block_height is the height of the first block
                            in this epoch
                          type: string
                        last_block_time:
                          description: >-
                            last_block_time is the time of the last block in
                            this epoch.

                            Babylon needs to remember the last header's time of
                            each epoch to complete

                            unbonding validators/delegations when a previous
                            epoch's checkpoint is

                            finalised. The last_block_time field is nil in the
                            epoch's beginning, and

                            is set upon the end of this epoch.
                          format: date-time
                          type: string
                        sealer_app_hash_hex:
                          description: >-
                            sealer is the last block of the sealed epoch

                            sealer_app_hash points to the sealer but stored in
                            the 1st header

                            of the next epoch as hex string.
                          type: string
                        sealer_block_hash:
                          description: >-
                            sealer_block_hash is the hash of the sealer

                            the validator set has generated a BLS multisig on
                            the hash,

                            i.e., hash of the last block in the epoch as hex
                            string.
                          type: string
                      title: >-
                        EpochResponse is a structure that contains the metadata
                        of an epoch
                      type: object
                    type: array
                  pagination:
                    description: >-
                      PageResponse is to be embedded in gRPC response messages
                      where the

                      corresponding request message has used PageRequest.

                       message SomeResponse {
                               repeated Bar results = 1;
                               PageResponse page = 2;
                       }
                    properties:
                      next_key:
                        description: >-
                          next_key is the key to be passed to PageRequest.key to

                          query the next page most efficiently. It will be empty
                          if

                          there are no more results.
                        format: byte
                        type: string
                      total:
                        format: uint64
                        title: >-
                          total is total number of results available if
                          PageRequest.count_total

                          was set, its value is undefined otherwise
                        type: string
                    title: pagination defines the pagination in the response
                    type: object
                title: >-
                  QueryEpochsInfoResponse is the response type for the
                  Query/EpochInfos method
                type: object
          description: A successful response.
        default:
          content:
            '*/*':
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }
                            // or ...
                            if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                              foo = any.unpack(Foo.getDefaultInstance());
                            }

                        Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                        Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".


                        JSON


                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      tags:
        - Babylon
      operationId: EpochsInfo
      summary: >-
        EpochsInfo queries the metadata of epochs in a given range, depending on

        the parameters in the pagination request. Th main use case will be
        querying

        the latest epochs in time order.
  /babylon/epoching/v1/epochs/{epoch_num}:
    get:
      parameters:
        - in: path
          name: epoch_num
          required: true
          schema:
            format: uint64
            type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                properties:
                  epoch:
                    properties:
                      current_epoch_interval:
                        format: uint64
                        title: >-
                          current_epoch_interval is the epoch interval at the
                          time of this epoch
                        type: string
                      epoch_number:
                        format: uint64
                        title: epoch_number is the number of this epoch
                        type: string
                      first_block_height:
                        format: uint64
                        title: >-
                          first_block_height is the height of the first block in
                          this epoch
                        type: string
                      last_block_time:
                        description: >-
                          last_block_time is the time of the last block in this
                          epoch.

                          Babylon needs to remember the last header's time of
                          each epoch to complete

                          unbonding validators/delegations when a previous
                          epoch's checkpoint is

                          finalised. The last_block_time field is nil in the
                          epoch's beginning, and

                          is set upon the end of this epoch.
                        format: date-time
                        type: string
                      sealer_app_hash_hex:
                        description: >-
                          sealer is the last block of the sealed epoch

                          sealer_app_hash points to the sealer but stored in the
                          1st header

                          of the next epoch as hex string.
                        type: string
                      sealer_block_hash:
                        description: >-
                          sealer_block_hash is the hash of the sealer

                          the validator set has generated a BLS multisig on the
                          hash,

                          i.e., hash of the last block in the epoch as hex
                          string.
                        type: string
                    title: >-
                      EpochResponse is a structure that contains the metadata of
                      an epoch
                    type: object
                title: >-
                  QueryEpochInfoRequest is the response type for the
                  Query/EpochInfo method
                type: object
          description: A successful response.
        default:
          content:
            '*/*':
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }
                            // or ...
                            if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                              foo = any.unpack(Foo.getDefaultInstance());
                            }

                        Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                        Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".


                        JSON


                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      tags:
        - Babylon
      operationId: EpochInfo
      summary: EpochInfo queries the information of a given epoch
  /babylon/epoching/v1/epochs/{epoch_num}/messages:
    get:
      parameters:
        - description: epoch_num is the number of epoch of the requested msg queue
          in: path
          name: epoch_num
          required: true
          schema:
            format: uint64
            type: string
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          name: pagination.key
          required: false
          schema:
            format: byte
            type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          name: pagination.offset
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          name: pagination.limit
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          schema:
            type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          schema:
            type: boolean
      responses:
        '200':
          content:
            '*/*':
              schema:
                properties:
                  msgs:
                    items:
                      properties:
                        block_height:
                          format: uint64
                          title: >-
                            block_height is the height when this msg is
                            submitted to Babylon
                          type: string
                        block_time:
                          format: date-time
                          title: >-
                            block_time is the timestamp when this msg is
                            submitted to Babylon
                          type: string
                        msg:
                          description: >-
                            msg is the actual message that is sent by a user and
                            is queued by the

                            epoching module as string.
                          type: string
                        msg_id:
                          description: >-
                            msg_id is the original message ID, i.e., hash of the
                            marshaled message as hex.
                          type: string
                        tx_id:
                          description: >-
                            tx_id is the ID of the tx that contains the message
                            as hex.
                          type: string
                      title: >-
                        QueuedMessageResponse is a message that can change the
                        validator set and is delayed

                        to the end of an epoch
                      type: object
                    title: msgs is the list of messages queued in the current epoch
                    type: array
                  pagination:
                    description: >-
                      PageResponse is to be embedded in gRPC response messages
                      where the

                      corresponding request message has used PageRequest.

                       message SomeResponse {
                               repeated Bar results = 1;
                               PageResponse page = 2;
                       }
                    properties:
                      next_key:
                        description: >-
                          next_key is the key to be passed to PageRequest.key to

                          query the next page most efficiently. It will be empty
                          if

                          there are no more results.
                        format: byte
                        type: string
                      total:
                        format: uint64
                        title: >-
                          total is total number of results available if
                          PageRequest.count_total

                          was set, its value is undefined otherwise
                        type: string
                    title: pagination defines the pagination in the response
                    type: object
                title: >-
                  QueryEpochMsgsResponse is the response type for the
                  Query/EpochMsgs RPC

                  method
                type: object
          description: A successful response.
        default:
          content:
            '*/*':
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }
                            // or ...
                            if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                              foo = any.unpack(Foo.getDefaultInstance());
                            }

                        Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                        Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".


                        JSON


                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      tags:
        - Babylon
      operationId: EpochMsgs
      summary: EpochMsgs queries the messages of a given epoch
  /babylon/epoching/v1/epochs/{epoch_num}/validator_set:
    get:
      parameters:
        - in: path
          name: epoch_num
          required: true
          schema:
            format: uint64
            type: string
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          name: pagination.key
          required: false
          schema:
            format: byte
            type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          name: pagination.offset
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          name: pagination.limit
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          schema:
            type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          schema:
            type: boolean
      responses:
        '200':
          content:
            '*/*':
              schema:
                properties:
                  pagination:
                    description: >-
                      PageResponse is to be embedded in gRPC response messages
                      where the

                      corresponding request message has used PageRequest.

                       message SomeResponse {
                               repeated Bar results = 1;
                               PageResponse page = 2;
                       }
                    properties:
                      next_key:
                        description: >-
                          next_key is the key to be passed to PageRequest.key to

                          query the next page most efficiently. It will be empty
                          if

                          there are no more results.
                        format: byte
                        type: string
                      total:
                        format: uint64
                        title: >-
                          total is total number of results available if
                          PageRequest.count_total

                          was set, its value is undefined otherwise
                        type: string
                    type: object
                  total_voting_power:
                    format: int64
                    type: string
                  validators:
                    items:
                      properties:
                        addr:
                          format: byte
                          title: addr is the validator's address (in sdk.ValAddress)
                          type: string
                        power:
                          format: int64
                          title: power is the validator's voting power
                          type: string
                      title: Validator is a message that denotes a validator
                      type: object
                    type: array
                title: >-
                  QueryEpochValSetRequest is the response type for the
                  Query/EpochValSet RPC

                  method
                type: object
          description: A successful response.
        default:
          content:
            '*/*':
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }
                            // or ...
                            if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                              foo = any.unpack(Foo.getDefaultInstance());
                            }

                        Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                        Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".


                        JSON


                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      tags:
        - Babylon
      operationId: EpochValSet
      summary: EpochValSet queries the validator set of a given epoch
  /babylon/epoching/v1/epochs:latest/messages:
    get:
      parameters:
        - description: end_epoch is the number of the last epoch to query.
          in: query
          name: end_epoch
          required: false
          schema:
            format: uint64
            type: string
        - description: epoch_count is the number of epochs to query.
          in: query
          name: epoch_count
          required: false
          schema:
            format: uint64
            type: string
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          name: pagination.key
          required: false
          schema:
            format: byte
            type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          name: pagination.offset
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          name: pagination.limit
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          schema:
            type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          schema:
            type: boolean
      responses:
        '200':
          content:
            '*/*':
              schema:
                properties:
                  latest_epoch_msgs:
                    items:
                      properties:
                        epoch_number:
                          format: uint64
                          type: string
                        msgs:
                          items:
                            properties:
                              block_height:
                                format: uint64
                                title: >-
                                  block_height is the height when this msg is
                                  submitted to Babylon
                                type: string
                              block_time:
                                format: date-time
                                title: >-
                                  block_time is the timestamp when this msg is
                                  submitted to Babylon
                                type: string
                              msg:
                                description: >-
                                  msg is the actual message that is sent by a
                                  user and is queued by the

                                  epoching module as string.
                                type: string
                              msg_id:
                                description: >-
                                  msg_id is the original message ID, i.e., hash
                                  of the marshaled message as hex.
                                type: string
                              tx_id:
                                description: >-
                                  tx_id is the ID of the tx that contains the
                                  message as hex.
                                type: string
                            title: >-
                              QueuedMessageResponse is a message that can change
                              the validator set and is delayed

                              to the end of an epoch
                            type: object
                          type: array
                      title: >-
                        QueuedMessageList is a message that contains a list of
                        staking-related

                        messages queued for an epoch
                      type: object
                    title: >-
                      latest_epoch_msgs is a list of QueuedMessageList

                      each QueuedMessageList has a field identifying the epoch
                      number
                    type: array
                  pagination:
                    description: >-
                      PageResponse is to be embedded in gRPC response messages
                      where the

                      corresponding request message has used PageRequest.

                       message SomeResponse {
                               repeated Bar results = 1;
                               PageResponse page = 2;
                       }
                    properties:
                      next_key:
                        description: >-
                          next_key is the key to be passed to PageRequest.key to

                          query the next page most efficiently. It will be empty
                          if

                          there are no more results.
                        format: byte
                        type: string
                      total:
                        format: uint64
                        title: >-
                          total is total number of results available if
                          PageRequest.count_total

                          was set, its value is undefined otherwise
                        type: string
                    type: object
                title: |-
                  QueryLatestEpochMsgsResponse is the response type for the
                  Query/LatestEpochMsgs RPC method
                type: object
          description: A successful response.
        default:
          content:
            '*/*':
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }
                            // or ...
                            if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                              foo = any.unpack(Foo.getDefaultInstance());
                            }

                        Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                        Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".


                        JSON


                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      tags:
        - Babylon
      operationId: LatestEpochMsgs
      summary: >-
        LatestEpochMsgs queries the messages within a given number of most
        recent

        epochs
  /babylon/epoching/v1/params:
    get:
      responses:
        '200':
          content:
            '*/*':
              schema:
                description: >-
                  QueryParamsResponse is the response type for the Query/Params
                  RPC method.
                properties:
                  params:
                    description: params holds all the parameters of this module.
                    properties:
                      epoch_interval:
                        format: uint64
                        title: >-
                          epoch_interval is the number of consecutive blocks to
                          form an epoch
                        type: string
                    type: object
                type: object
          description: A successful response.
        default:
          content:
            '*/*':
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }
                            // or ...
                            if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                              foo = any.unpack(Foo.getDefaultInstance());
                            }

                        Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                        Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".


                        JSON


                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      tags:
        - Babylon
      operationId: EpochingParams
      summary: Params queries the parameters of the module.
  /babylon/epoching/v1/validator_lifecycle/{val_addr}:
    get:
      parameters:
        - in: path
          name: val_addr
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                properties:
                  val_addr:
                    type: string
                  val_life:
                    items:
                      description: >-
                        ValStateUpdateResponse is a message response that
                        records a state update of a validator.
                      properties:
                        block_height:
                          format: uint64
                          type: string
                        block_time:
                          format: date-time
                          type: string
                        state_desc:
                          description: StateDesc defines the descriptive state.
                          type: string
                      type: object
                    type: array
                title: |-
                  QueryValidatorLifecycleResponse is the response type for the
                  Query/ValidatorLifecycle RPC method
                type: object
          description: A successful response.
        default:
          content:
            '*/*':
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }
                            // or ...
                            if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                              foo = any.unpack(Foo.getDefaultInstance());
                            }

                        Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                        Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".


                        JSON


                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      tags:
        - Babylon
      operationId: ValidatorLifecycle
      summary: ValidatorLifecycle queries the lifecycle of a given validator
  /babylon/finality/v1/activated_height:
    get:
      responses:
        '200':
          content:
            '*/*':
              schema:
                description: >-
                  QueryActivatedHeightResponse is the response type for the
                  Query/ActivatedHeight RPC method.
                properties:
                  height:
                    format: uint64
                    type: string
                type: object
          description: A successful response.
        default:
          content:
            '*/*':
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      properties:
                        type_url:
                          type: string
                        value:
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      tags:
        - Babylon
      operationId: ActivatedHeight
      summary: >-
        ActivatedHeight queries the height when BTC staking protocol is
        activated, i.e., the first height when

        there exists 1 finality provider with voting power
  /babylon/finality/v1/blocks:
    get:
      parameters:
        - description: >-
            status indicates the status of blocks that the querier wants to
            query.

             - NON_FINALIZED: NON_FINALIZED means the block is not finalised
             - FINALIZED: FINALIZED means the block is finalized
             - ANY: ANY means the block can be in any status
          in: query
          name: status
          required: false
          schema:
            default: NON_FINALIZED
            enum:
              - NON_FINALIZED
              - FINALIZED
              - ANY
            type: string
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          name: pagination.key
          required: false
          schema:
            format: byte
            type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          name: pagination.offset
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          name: pagination.limit
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          schema:
            type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          schema:
            type: boolean
      responses:
        '200':
          content:
            '*/*':
              schema:
                description: |-
                  QueryListBlocksResponse is the response type for the
                  Query/ListBlocks RPC method.
                properties:
                  blocks:
                    items:
                      properties:
                        app_hash:
                          format: byte
                          title: app_hash is the AppHash of the block
                          type: string
                        finalized:
                          title: >-
                            finalized indicates whether the IndexedBlock is
                            finalised by 2/3

                            finality providers or not
                          type: boolean
                        height:
                          format: uint64
                          title: height is the height of the block
                          type: string
                      title: >-
                        IndexedBlock is the necessary metadata and finalization
                        status of a block
                      type: object
                    title: blocks is the list of blocks at the given status
                    type: array
                  pagination:
                    description: pagination defines the pagination in the response.
                    properties:
                      next_key:
                        description: >-
                          next_key is the key to be passed to PageRequest.key to

                          query the next page most efficiently. It will be empty
                          if

                          there are no more results.
                        format: byte
                        type: string
                      total:
                        format: uint64
                        title: >-
                          total is total number of results available if
                          PageRequest.count_total

                          was set, its value is undefined otherwise
                        type: string
                    type: object
                type: object
          description: A successful response.
        default:
          content:
            '*/*':
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      properties:
                        type_url:
                          type: string
                        value:
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      tags:
        - Babylon
      operationId: ListBlocks
      summary: ListBlocks is a range query for blocks at a given status
  /babylon/finality/v1/blocks/{height}:
    get:
      parameters:
        - description: height is the height of the Babylon block
          in: path
          name: height
          required: true
          schema:
            format: uint64
            type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                description: |-
                  QueryBlockResponse is the response type for the
                  Query/Block RPC method.
                properties:
                  block:
                    properties:
                      app_hash:
                        format: byte
                        title: app_hash is the AppHash of the block
                        type: string
                      finalized:
                        title: >-
                          finalized indicates whether the IndexedBlock is
                          finalised by 2/3

                          finality providers or not
                        type: boolean
                      height:
                        format: uint64
                        title: height is the height of the block
                        type: string
                    title: >-
                      IndexedBlock is the necessary metadata and finalization
                      status of a block
                    type: object
                type: object
          description: A successful response.
        default:
          content:
            '*/*':
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      properties:
                        type_url:
                          type: string
                        value:
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      tags:
        - Babylon
      operationId: Block
      summary: Block queries a block at a given height
  /babylon/finality/v1/evidences:
    get:
      parameters:
        - description: |-
            start_height is the starting height that the querier specifies
            such that the RPC will only return evidences since this height.
          in: query
          name: start_height
          required: false
          schema:
            format: uint64
            type: string
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          name: pagination.key
          required: false
          schema:
            format: byte
            type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          name: pagination.offset
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          name: pagination.limit
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          schema:
            type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          schema:
            type: boolean
      responses:
        '200':
          content:
            '*/*':
              schema:
                description: |-
                  QueryListEvidencesResponse is the response type for the
                  Query/ListEvidences RPC method.
                properties:
                  evidences:
                    items:
                      properties:
                        block_height:
                          format: uint64
                          title: block_height is the height of the conflicting blocks
                          type: string
                        canonical_app_hash:
                          format: byte
                          title: >-
                            canonical_app_hash is the AppHash of the canonical
                            block
                          type: string
                        canonical_finality_sig:
                          format: byte
                          title: >-
                            canonical_finality_sig is the finality signature to
                            the canonical block

                            where finality signature is an EOTS signature, i.e.,

                            the `s` in a Schnorr signature `(r, s)`

                            `r` is the public randomness that is already
                            committed by the finality provider
                          type: string
                        fork_app_hash:
                          format: byte
                          title: fork_app_hash is the AppHash of the fork block
                          type: string
                        fork_finality_sig:
                          format: byte
                          title: >-
                            fork_finality_sig is the finality signature to the
                            fork block

                            where finality signature is an EOTS signature
                          type: string
                        fp_btc_pk_hex:
                          title: >-
                            fp_btc_pk_hex is the BTC PK of the finality provider
                            that casts this vote
                          type: string
                        pub_rand:
                          format: byte
                          title: >-
                            pub_rand is the public randomness the finality
                            provider has committed to
                          type: string
                      title: >-
                        Evidence is the evidence that a finality provider has
                        signed finality

                        signatures with correct public randomness on two
                        conflicting Babylon headers
                      type: object
                    title: blocks is the list of evidences
                    type: array
                  pagination:
                    description: pagination defines the pagination in the response.
                    properties:
                      next_key:
                        description: >-
                          next_key is the key to be passed to PageRequest.key to

                          query the next page most efficiently. It will be empty
                          if

                          there are no more results.
                        format: byte
                        type: string
                      total:
                        format: uint64
                        title: >-
                          total is total number of results available if
                          PageRequest.count_total

                          was set, its value is undefined otherwise
                        type: string
                    type: object
                type: object
          description: A successful response.
        default:
          content:
            '*/*':
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      properties:
                        type_url:
                          type: string
                        value:
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      tags:
        - Babylon
      operationId: ListEvidences
      summary: ListEvidences queries is a range query for evidences
  /babylon/finality/v1/finality_providers/{fp_btc_pk_hex}/evidence:
    get:
      parameters:
        - description: |-
            fp_btc_pk_hex is the hex str of Bitcoin secp256k1 PK
            (in BIP340 format) of the finality provider
          in: path
          name: fp_btc_pk_hex
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                description: |-
                  QueryEvidenceResponse is the response type for the
                  Query/Evidence RPC method.
                properties:
                  evidence:
                    properties:
                      block_height:
                        format: uint64
                        title: block_height is the height of the conflicting blocks
                        type: string
                      canonical_app_hash:
                        format: byte
                        title: >-
                          canonical_app_hash is the AppHash of the canonical
                          block
                        type: string
                      canonical_finality_sig:
                        format: byte
                        title: >-
                          canonical_finality_sig is the finality signature to
                          the canonical block

                          where finality signature is an EOTS signature, i.e.,

                          the `s` in a Schnorr signature `(r, s)`

                          `r` is the public randomness that is already committed
                          by the finality provider
                        type: string
                      fork_app_hash:
                        format: byte
                        title: fork_app_hash is the AppHash of the fork block
                        type: string
                      fork_finality_sig:
                        format: byte
                        title: >-
                          fork_finality_sig is the finality signature to the
                          fork block

                          where finality signature is an EOTS signature
                        type: string
                      fp_btc_pk_hex:
                        title: >-
                          fp_btc_pk_hex is the BTC PK of the finality provider
                          that casts this vote
                        type: string
                      pub_rand:
                        format: byte
                        title: >-
                          pub_rand is the public randomness the finality
                          provider has committed to
                        type: string
                    title: >-
                      Evidence is the evidence that a finality provider has
                      signed finality

                      signatures with correct public randomness on two
                      conflicting Babylon headers
                    type: object
                type: object
          description: A successful response.
        default:
          content:
            '*/*':
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      properties:
                        type_url:
                          type: string
                        value:
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      tags:
        - Babylon
      operationId: Evidence
      summary: >-
        Evidence queries the first evidence which can be used for extracting the
        BTC SK
  /babylon/finality/v1/finality_providers/{fp_btc_pk_hex}/power:
    get:
      parameters:
        - description: >-
            fp_btc_pk_hex is the hex str of Bitcoin secp256k1 PK of the finality
            provider that

            this BTC delegation delegates to

            the PK follows encoding in BIP-340 spec
          in: path
          name: fp_btc_pk_hex
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                description: >-
                  QueryFinalityProviderCurrentPowerResponse is the response type
                  for the

                  Query/FinalityProviderCurrentPower RPC method.
                properties:
                  height:
                    format: uint64
                    title: height is the current height
                    type: string
                  voting_power:
                    format: uint64
                    title: voting_power is the voting power of the finality provider
                    type: string
                type: object
          description: A successful response.
        default:
          content:
            '*/*':
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      properties:
                        type_url:
                          type: string
                        value:
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      tags:
        - Babylon
      operationId: FinalityProviderCurrentPower
      summary: >-
        FinalityProviderCurrentPower queries the voting power of a finality
        provider at the current height
  /babylon/finality/v1/finality_providers/{fp_btc_pk_hex}/power/{height}:
    get:
      parameters:
        - description: >-
            fp_btc_pk_hex is the hex str of Bitcoin secp256k1 PK of the finality
            provider that

            this BTC delegation delegates to

            the PK follows encoding in BIP-340 spec
          in: path
          name: fp_btc_pk_hex
          required: true
          schema:
            type: string
        - description: >-
            height is used for querying the given finality provider's voting
            power at this height
          in: path
          name: height
          required: true
          schema:
            format: uint64
            type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                description: >-
                  QueryFinalityProviderPowerAtHeightResponse is the response
                  type for the

                  Query/FinalityProviderPowerAtHeight RPC method.
                properties:
                  voting_power:
                    format: uint64
                    title: voting_power is the voting power of the finality provider
                    type: string
                type: object
          description: A successful response.
        default:
          content:
            '*/*':
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      properties:
                        type_url:
                          type: string
                        value:
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      tags:
        - Babylon
      operationId: FinalityProviderPowerAtHeight
      summary: >-
        FinalityProviderPowerAtHeight queries the voting power of a finality
        provider at a given height
  /babylon/finality/v1/finality_providers/{fp_btc_pk_hex}/pub_rand_commit_list:
    get:
      parameters:
        - description: >-
            fp_btc_pk_hex is the hex str of Bitcoin secp256k1 PK of the finality
            provider
          in: path
          name: fp_btc_pk_hex
          required: true
          schema:
            type: string
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          name: pagination.key
          required: false
          schema:
            format: byte
            type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          name: pagination.offset
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          name: pagination.limit
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          schema:
            type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          schema:
            type: boolean
      responses:
        '200':
          content:
            '*/*':
              schema:
                description: |-
                  QueryListPubRandCommitResponse is the response type for the
                  Query/ListPubRandCommit RPC method.
                properties:
                  pagination:
                    description: pagination defines the pagination in the response.
                    properties:
                      next_key:
                        description: >-
                          next_key is the key to be passed to PageRequest.key to

                          query the next page most efficiently. It will be empty
                          if

                          there are no more results.
                        format: byte
                        type: string
                      total:
                        format: uint64
                        title: >-
                          total is total number of results available if
                          PageRequest.count_total

                          was set, its value is undefined otherwise
                        type: string
                    type: object
                  pub_rand_commit_map:
                    additionalProperties:
                      properties:
                        commitment:
                          format: byte
                          title: commitment is the value of the commitment
                          type: string
                        epoch_num:
                          format: uint64
                          title: >-
                            epoch_num defines the epoch number that the commit
                            falls into
                          type: string
                        num_pub_rand:
                          format: uint64
                          title: >-
                            num_pub_rand is the number of committed public
                            randomness
                          type: string
                      title: >-
                        PubRandCommitResponse is the response type for a public
                        randomness commitment
                      type: object
                    title: >-
                      pub_rand_commit_map is the map where the key is the start
                      height and the value

                      is the public randomness commitment at this height for the
                      given finality provider
                    type: object
                type: object
          description: A successful response.
        default:
          content:
            '*/*':
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      properties:
                        type_url:
                          type: string
                        value:
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      tags:
        - Babylon
      operationId: ListPubRandCommit
      summary: >-
        ListPubRandCommit is a range query for public randomness commitments of
        a given finality provider
  /babylon/finality/v1/finality_providers/{fp_btc_pk_hex}/public_randomness_list:
    get:
      parameters:
        - description: >-
            fp_btc_pk_hex is the hex str of Bitcoin secp256k1 PK of the finality
            provider
          in: path
          name: fp_btc_pk_hex
          required: true
          schema:
            type: string
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          name: pagination.key
          required: false
          schema:
            format: byte
            type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          name: pagination.offset
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          name: pagination.limit
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          schema:
            type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          schema:
            type: boolean
      responses:
        '200':
          content:
            '*/*':
              schema:
                description: |-
                  QueryListPublicRandomnessResponse is the response type for the
                  Query/ListPublicRandomness RPC method.
                properties:
                  pagination:
                    description: pagination defines the pagination in the response.
                    properties:
                      next_key:
                        description: >-
                          next_key is the key to be passed to PageRequest.key to

                          query the next page most efficiently. It will be empty
                          if

                          there are no more results.
                        format: byte
                        type: string
                      total:
                        format: uint64
                        title: >-
                          total is total number of results available if
                          PageRequest.count_total

                          was set, its value is undefined otherwise
                        type: string
                    type: object
                  pub_rand_map:
                    additionalProperties:
                      format: byte
                      type: string
                    title: >-
                      pub_rand_map is the map where the key is the height and
                      the value

                      is the public randomness at this height for the given
                      finality provider
                    type: object
                type: object
          description: A successful response.
        default:
          content:
            '*/*':
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      properties:
                        type_url:
                          type: string
                        value:
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      tags:
        - Babylon
      operationId: ListPublicRandomness
      summary: >-
        ListPublicRandomness is a range query for public randomness of a given
        finality provider

        NOTE: Babylon only has the knowledge of public randomness that is
        already revealed by

        finality providers, i.e., the finality provider already provides a
        finality signature

        at the corresponding height
  /babylon/finality/v1/finality_providers/{height}:
    get:
      parameters:
        - description: >-
            height defines at which Babylon height to query the finality
            providers info.
          in: path
          name: height
          required: true
          schema:
            format: uint64
            type: string
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          name: pagination.key
          required: false
          schema:
            format: byte
            type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          name: pagination.offset
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          name: pagination.limit
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          schema:
            type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          schema:
            type: boolean
      responses:
        '200':
          content:
            '*/*':
              schema:
                description: >-
                  QueryActiveFinalityProvidersAtHeightResponse is the response
                  type for the

                  Query/ActiveFinalityProvidersAtHeight RPC method.
                properties:
                  finality_providers:
                    description: >-
                      finality_providers contains all the queried finality
                      providersn.
                    items:
                      description: >-
                        ActiveFinalityProvidersAtHeightResponse wraps the
                        FinalityProvider with metadata.
                      properties:
                        btc_pk_hex:
                          title: >-
                            btc_pk is the Bitcoin secp256k1 PK of thisfinality
                            provider

                            the PK follows encoding in BIP-340 spec
                          type: string
                        height:
                          format: uint64
                          title: height is the queried Babylon height
                          type: string
                        highest_voted_height:
                          format: int64
                          title: >-
                            highest_voted_height is the highest height for which
                            the

                            finality provider has voted
                          type: integer
                        jailed:
                          title: >-
                            jailed defines whether the finality provider is
                            detected jailed
                          type: boolean
                        slashed_babylon_height:
                          format: uint64
                          title: >-
                            slashed_babylon_height indicates the Babylon height
                            when

                            the finality provider is slashed.

                            if it's 0 then the finality provider is not slashed
                          type: string
                        slashed_btc_height:
                          format: int64
                          title: |-
                            slashed_btc_height indicates the BTC height when
                            the finality provider is slashed.
                            if it's 0 then the finality provider is not slashed
                          type: integer
                        voting_power:
                          format: uint64
                          title: >-
                            voting_power is the voting power of this finality
                            provider at the given height
                          type: string
                      type: object
                    type: array
                  pagination:
                    description: pagination defines the pagination in the response.
                    properties:
                      next_key:
                        description: >-
                          next_key is the key to be passed to PageRequest.key to

                          query the next page most efficiently. It will be empty
                          if

                          there are no more results.
                        format: byte
                        type: string
                      total:
                        format: uint64
                        title: >-
                          total is total number of results available if
                          PageRequest.count_total

                          was set, its value is undefined otherwise
                        type: string
                    type: object
                type: object
          description: A successful response.
        default:
          content:
            '*/*':
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      properties:
                        type_url:
                          type: string
                        value:
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      tags:
        - Babylon
      operationId: ActiveFinalityProvidersAtHeight
      summary: >-
        ActiveFinalityProvidersAtHeight queries finality providers with non zero
        voting power at given height.
  /babylon/finality/v1/params:
    get:
      responses:
        '200':
          content:
            '*/*':
              schema:
                description: >-
                  QueryParamsResponse is response type for the Query/Params RPC
                  method.
                properties:
                  params:
                    description: params holds all the parameters of this module.
                    properties:
                      finality_activation_height:
                        description: >-
                          finality_activation_height is the babylon block height
                          which the finality module will

                          start to accept finality voting and the minimum
                          allowed value for the public randomness

                          commit start height.
                        format: uint64
                        type: string
                      finality_sig_timeout:
                        format: int64
                        title: >-
                          finality_sig_timeout defines how much time (in terms
                          of blocks) finality providers have to cast a finality

                          vote before being judged as missing their voting turn
                          on the given block
                        type: string
                      jail_duration:
                        title: >-
                          jail_duration is the minimum period of time that a
                          finality provider remains jailed
                        type: string
                      max_active_finality_providers:
                        format: int64
                        title: >-
                          max_active_finality_providers is the maximum number of
                          active finality providers in the BTC staking protocol
                        type: integer
                      min_pub_rand:
                        format: uint64
                        title: >-
                          min_pub_rand is the minimum number of public
                          randomness each

                          message should commit
                        type: string
                      min_signed_per_window:
                        format: byte
                        title: >-
                          min_signed_per_window defines the minimum number of
                          blocks that a finality provider is required to sign

                          within the sliding window to avoid being jailed
                        type: string
                      signed_blocks_window:
                        format: int64
                        title: >-
                          signed_blocks_window defines the size of the sliding
                          window for tracking finality provider liveness
                        type: string
                    type: object
                type: object
          description: A successful response.
        default:
          content:
            '*/*':
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      properties:
                        type_url:
                          type: string
                        value:
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      tags:
        - Babylon
      operationId: FinalityParams
      summary: Parameters queries the parameters of the module.
  /babylon/finality/v1/signing_infos:
    get:
      parameters:
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          name: pagination.key
          required: false
          schema:
            format: byte
            type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          name: pagination.offset
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          name: pagination.limit
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          schema:
            type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          schema:
            type: boolean
      responses:
        '200':
          content:
            '*/*':
              schema:
                properties:
                  pagination:
                    description: >-
                      PageResponse is to be embedded in gRPC response messages
                      where the

                      corresponding request message has used PageRequest.

                       message SomeResponse {
                               repeated Bar results = 1;
                               PageResponse page = 2;
                       }
                    properties:
                      next_key:
                        description: >-
                          next_key is the key to be passed to PageRequest.key to

                          query the next page most efficiently. It will be empty
                          if

                          there are no more results.
                        format: byte
                        type: string
                      total:
                        format: uint64
                        title: >-
                          total is total number of results available if
                          PageRequest.count_total

                          was set, its value is undefined otherwise
                        type: string
                    type: object
                  signing_infos:
                    items:
                      description: >-
                        SigningInfoResponse defines the API response containing
                        a finality provider's signing info

                        for monitoring their liveness activity.
                      properties:
                        fp_btc_pk_hex:
                          title: >-
                            fp_btc_pk is the BTC PK of the finality provider
                            that casts this vote
                          type: string
                        jailed_until:
                          description: >-
                            Timestamp until which the validator is jailed due to
                            liveness downtime.
                          format: date-time
                          type: string
                        missed_blocks_counter:
                          description: >-
                            missed_blocks_counter defines a counter to avoid
                            unnecessary array reads.

                            Note that `Sum(MissedBlocksBitArray)` always equals
                            `MissedBlocksCounter`.
                          format: int64
                          type: string
                        start_height:
                          format: int64
                          title: >-
                            start_height is the block height at which finality
                            provider become active
                          type: string
                      type: object
                    title: >-
                      info is the signing info of all finality providers with
                      signing info
                    type: array
                title: >-
                  QuerySigningInfosResponse is the response type for the
                  Query/SigningInfos RPC

                  method
                type: object
          description: A successful response.
        default:
          content:
            '*/*':
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      properties:
                        type_url:
                          type: string
                        value:
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      tags:
        - Babylon
      operationId: SigningInfos
      summary: >-
        SigningInfos queries the signing info of all the active finality
        providers
  /babylon/finality/v1/signing_infos/{fp_btc_pk_hex}:
    get:
      parameters:
        - description: |-
            fp_btc_pk_hex is the hex str of Bitcoin secp256k1 PK
            (in BIP340 format) of the finality provider
          in: path
          name: fp_btc_pk_hex
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                properties:
                  signing_info:
                    description: >-
                      SigningInfoResponse defines the API response containing a
                      finality provider's signing info

                      for monitoring their liveness activity.
                    properties:
                      fp_btc_pk_hex:
                        title: >-
                          fp_btc_pk is the BTC PK of the finality provider that
                          casts this vote
                        type: string
                      jailed_until:
                        description: >-
                          Timestamp until which the validator is jailed due to
                          liveness downtime.
                        format: date-time
                        type: string
                      missed_blocks_counter:
                        description: >-
                          missed_blocks_counter defines a counter to avoid
                          unnecessary array reads.

                          Note that `Sum(MissedBlocksBitArray)` always equals
                          `MissedBlocksCounter`.
                        format: int64
                        type: string
                      start_height:
                        format: int64
                        title: >-
                          start_height is the block height at which finality
                          provider become active
                        type: string
                    type: object
                title: >-
                  QuerySigningInfoResponse is the response type for the
                  Query/SigningInfo RPC

                  method
                type: object
          description: A successful response.
        default:
          content:
            '*/*':
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      properties:
                        type_url:
                          type: string
                        value:
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      tags:
        - Babylon
      operationId: SigningInfo
      summary: >-
        SigningInfo queries the signing info of given finality provider BTC
        public key
  /babylon/finality/v1/votes/{height}:
    get:
      parameters:
        - description: height defines at which height to query the finality providers.
          in: path
          name: height
          required: true
          schema:
            format: uint64
            type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                description: |-
                  QueryVotesAtHeightResponse is the response type for the
                  Query/VotesAtHeight RPC method.
                properties:
                  btc_pks:
                    items:
                      format: byte
                      type: string
                    title: >-
                      btc_pk is the Bitcoin secp256k1 PK of finality providers
                      who have signed the block at given height.

                      the PK follows encoding in BIP-340 spec
                    type: array
                type: object
          description: A successful response.
        default:
          content:
            '*/*':
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      properties:
                        type_url:
                          type: string
                        value:
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      tags:
        - Babylon
      operationId: VotesAtHeight
      summary: >-
        VotesAtHeight queries finality providers who have signed the block at
        given height.
  /babylon/incentive/address/{address}/reward_gauge:
    get:
      parameters:
        - description: address is the address of the stakeholder in bech32 string
          in: path
          name: address
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                description: >-
                  QueryRewardGaugesResponse is response type for the
                  Query/RewardGauges RPC

                  method.
                properties:
                  reward_gauges:
                    additionalProperties:
                      properties:
                        coins:
                          items:
                            description: >-
                              Coin defines a token with a denomination and an
                              amount.


                              NOTE: The amount field is an Int which implements
                              the custom method

                              signatures required by gogoproto.
                            properties:
                              amount:
                                type: string
                              denom:
                                type: string
                            type: object
                          title: |-
                            coins are coins that have been in the gauge
                            Can have multiple coin denoms
                          type: array
                        withdrawn_coins:
                          items:
                            description: >-
                              Coin defines a token with a denomination and an
                              amount.


                              NOTE: The amount field is an Int which implements
                              the custom method

                              signatures required by gogoproto.
                            properties:
                              amount:
                                type: string
                              denom:
                                type: string
                            type: object
                          title: >-
                            withdrawn_coins are coins that have been withdrawn
                            by the stakeholder

                            already
                          type: array
                      title: >-
                        RewardGaugesResponse is an object that stores rewards
                        distributed to a BTC

                        staking stakeholder
                      type: object
                    title: >-
                      reward_gauges is the map of reward gauges, where key is
                      the stakeholder

                      type and value is the reward gauge holding all rewards for
                      the stakeholder

                      in that type
                    type: object
                type: object
          description: A successful response.
        default:
          content:
            '*/*':
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      properties:
                        type_url:
                          type: string
                        value:
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      tags:
        - Babylon
      operationId: RewardGauges
      summary: RewardGauge queries the reward gauge of a given stakeholder address
  /babylon/incentive/btc_staking_gauge/{height}:
    get:
      parameters:
        - description: height is the queried Babylon height
          in: path
          name: height
          required: true
          schema:
            format: uint64
            type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                description: >-
                  QueryBTCStakingGaugeResponse is response type for the
                  Query/BTCStakingGauge

                  RPC method.
                properties:
                  gauge:
                    description: >-
                      BTCStakingGaugeResponse is response type for the
                      Query/BTCStakingGauge RPC

                      method.
                    properties:
                      coins:
                        items:
                          description: >-
                            Coin defines a token with a denomination and an
                            amount.


                            NOTE: The amount field is an Int which implements
                            the custom method

                            signatures required by gogoproto.
                          properties:
                            amount:
                              type: string
                            denom:
                              type: string
                          type: object
                        title: |-
                          coins that have been in the gauge
                          can have multiple coin denoms
                        type: array
                    title: gauge is the BTC staking gauge at the queried height
                    type: object
                type: object
          description: A successful response.
        default:
          content:
            '*/*':
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      properties:
                        type_url:
                          type: string
                        value:
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      tags:
        - Babylon
      operationId: BTCStakingGauge
      summary: BTCStakingGauge queries the BTC staking gauge of a given height
  /babylon/incentive/delegators/{delegator_address}/withdraw_address:
    get:
      parameters:
        - description: delegator_address defines the delegator address to query for.
          in: path
          name: delegator_address
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                description: >-
                  QueryDelegatorWithdrawAddressResponse is the response type for
                  the

                  Query/DelegatorWithdrawAddress RPC method.
                properties:
                  withdraw_address:
                    description: >-
                      withdraw_address defines the delegator address to query
                      for.
                    type: string
                type: object
          description: A successful response.
        default:
          content:
            '*/*':
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      properties:
                        type_url:
                          type: string
                        value:
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      tags:
        - Babylon
      operationId: DelegatorWithdrawAddress
      summary: DelegatorWithdrawAddress queries withdraw address of a delegator.
  /babylon/incentive/finality_providers/{finality_provider_address}/delegators/{delegator_address}/delegation_rewards:
    get:
      parameters:
        - description: >-
            finality_provider_address defines the finality provider address of
            the

            delegation.
          in: path
          name: finality_provider_address
          required: true
          schema:
            type: string
        - description: delegator_address defines the delegator address to query for.
          in: path
          name: delegator_address
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                description: |-
                  QueryDelegationRewardsResponse is the response type for the
                  Query/DelegationRewards RPC method.
                properties:
                  rewards:
                    items:
                      description: >-
                        Coin defines a token with a denomination and an amount.


                        NOTE: The amount field is an Int which implements the
                        custom method

                        signatures required by gogoproto.
                      properties:
                        amount:
                          type: string
                        denom:
                          type: string
                      type: object
                    title: |-
                      rewards are the delegation reward coins
                      Can have multiple coin denoms
                    type: array
                type: object
          description: A successful response.
        default:
          content:
            '*/*':
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      properties:
                        type_url:
                          type: string
                        value:
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      tags:
        - Babylon
      operationId: DelegationRewards
      summary: >-
        DelegationRewards queries the delegation rewards of given finality
        provider

        and delegator addresses
  /babylon/incentive/params:
    get:
      responses:
        '200':
          content:
            '*/*':
              schema:
                description: >-
                  QueryParamsResponse is response type for the Query/Params RPC
                  method.
                properties:
                  params:
                    description: params holds all the parameters of this module.
                    properties:
                      btc_staking_portion:
                        title: >-
                          btc_staking_portion is the portion of rewards that
                          goes to Finality

                          Providers/delegations NOTE: the portion of each
                          Finality

                          Provider/delegation is calculated by using its voting
                          power and finality

                          provider's commission
                        type: string
                    title: >-
                      Params defines the parameters for the module, including
                      portions of rewards

                      distributed to each type of stakeholder. Note that sum of
                      the portions should

                      be strictly less than 1 so that the rest will go to Comet

                      validators/delegations adapted from

                      https://github.com/cosmos/cosmos-sdk/blob/release/v0.47.x/proto/cosmos/distribution/v1beta1/distribution.proto
                    type: object
                type: object
          description: A successful response.
        default:
          content:
            '*/*':
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      properties:
                        type_url:
                          type: string
                        value:
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      tags:
        - Babylon
      operationId: IncentiveParams
      summary: Parameters queries the parameters of the module.
  /babylon/monitor/v1/checkpoints/{ckpt_hash}:
    get:
      parameters:
        - description: ckpt_hash is hex encoded byte string of the hash of the checkpoint
          in: path
          name: ckpt_hash
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                properties:
                  btc_light_client_height:
                    format: int64
                    title: height of btc light client when checkpoint is reported
                    type: integer
                title: >-
                  QueryReportedCheckpointBtcHeightResponse defines a response
                  type for

                  ReportedCheckpointBtcHeight RPC method
                type: object
          description: A successful response.
        default:
          content:
            '*/*':
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      properties:
                        type_url:
                          type: string
                        value:
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      tags:
        - Babylon
      operationId: ReportedCheckpointBtcHeight
      summary: |-
        ReportedCheckpointBtcHeight returns the BTC light client height at which
        the checkpoint with the given hash is reported back to Babylon
  /babylon/monitor/v1/epochs/{epoch_num}:
    get:
      parameters:
        - in: path
          name: epoch_num
          required: true
          schema:
            format: uint64
            type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                properties:
                  btc_light_client_height:
                    format: int64
                    title: height of btc light client when epoch ended
                    type: integer
                title: |-
                  QueryEndedEpochBtcHeightResponse defines a response type for
                  EndedEpochBtcHeight RPC method
                type: object
          description: A successful response.
        default:
          content:
            '*/*':
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      properties:
                        type_url:
                          type: string
                        value:
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      tags:
        - Babylon
      operationId: EndedEpochBtcHeight
      summary: >-
        EndedEpochBtcHeight returns the BTC light client height at provided
        epoch

        finish
  /babylon/zoneconcierge/v1/chain_info/{consumer_id}/header/{height}:
    get:
      parameters:
        - in: path
          name: consumer_id
          required: true
          schema:
            type: string
        - in: path
          name: height
          required: true
          schema:
            format: uint64
            type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                description: >-
                  QueryHeaderResponse is response type for the Query/Header RPC
                  method.
                properties:
                  fork_headers:
                    description: >-
                      Forks is a list of non-canonical `IndexedHeader`s at the
                      same height.

                      For example, assuming the following blockchain

                      ```

                      A <- B <- C <- D <- E
                                 \ -- D1
                                 \ -- D2
                      ```

                      Then the fork will be {[D1, D2]} where each item is in
                      struct `IndexedBlock`.


                      Note that each `IndexedHeader` in the fork should have a
                      valid quorum

                      certificate. Such forks exist since Babylon considers CZs
                      might have

                      dishonest majority. Also note that the IBC-Go
                      implementation will only

                      consider the first header in a fork valid, since the
                      subsequent headers

                      cannot be verified without knowing the validator set in
                      the previous header.
                    properties:
                      headers:
                        items:
                          properties:
                            babylon_epoch:
                              format: uint64
                              title: >-
                                epoch is the epoch number of this header on
                                Babylon ledger
                              type: string
                            babylon_header_hash:
                              format: byte
                              title: >-
                                babylon_header_hash is the hash of the babylon
                                block that includes this CZ

                                header
                              type: string
                            babylon_header_height:
                              format: uint64
                              title: >-
                                babylon_header_height is the height of the
                                babylon block that includes this CZ

                                header
                              type: string
                            babylon_tx_hash:
                              format: byte
                              title: >-
                                babylon_tx_hash is the hash of the tx that
                                includes this header

                                (babylon_block_height, babylon_tx_hash) jointly
                                provides the position of

                                the header on Babylon ledger
                              type: string
                            consumer_id:
                              title: consumer_id is the unique ID of the consumer
                              type: string
                            hash:
                              format: byte
                              title: hash is the hash of this header
                              type: string
                            height:
                              format: uint64
                              title: >-
                                height is the height of this header on CZ ledger

                                (hash, height) jointly provides the position of
                                the header on CZ ledger
                              type: string
                            time:
                              format: date-time
                              title: >-
                                time is the timestamp of this header on CZ
                                ledger

                                it is needed for CZ to unbond all mature
                                validators/delegations

                                before this timestamp when this header is
                                BTC-finalised
                              type: string
                          title: IndexedHeader is the metadata of a CZ header
                          type: object
                        title: >-
                          blocks is the list of non-canonical indexed headers at
                          the same height
                        type: array
                    type: object
                  header:
                    properties:
                      babylon_epoch:
                        format: uint64
                        title: >-
                          epoch is the epoch number of this header on Babylon
                          ledger
                        type: string
                      babylon_header_hash:
                        format: byte
                        title: >-
                          babylon_header_hash is the hash of the babylon block
                          that includes this CZ

                          header
                        type: string
                      babylon_header_height:
                        format: uint64
                        title: >-
                          babylon_header_height is the height of the babylon
                          block that includes this CZ

                          header
                        type: string
                      babylon_tx_hash:
                        format: byte
                        title: >-
                          babylon_tx_hash is the hash of the tx that includes
                          this header

                          (babylon_block_height, babylon_tx_hash) jointly
                          provides the position of

                          the header on Babylon ledger
                        type: string
                      consumer_id:
                        title: consumer_id is the unique ID of the consumer
                        type: string
                      hash:
                        format: byte
                        title: hash is the hash of this header
                        type: string
                      height:
                        format: uint64
                        title: >-
                          height is the height of this header on CZ ledger

                          (hash, height) jointly provides the position of the
                          header on CZ ledger
                        type: string
                      time:
                        format: date-time
                        title: >-
                          time is the timestamp of this header on CZ ledger

                          it is needed for CZ to unbond all mature
                          validators/delegations

                          before this timestamp when this header is
                          BTC-finalised
                        type: string
                    title: IndexedHeader is the metadata of a CZ header
                    type: object
                type: object
          description: A successful response.
        default:
          content:
            '*/*':
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }
                            // or ...
                            if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                              foo = any.unpack(Foo.getDefaultInstance());
                            }

                        Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                        Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".


                        JSON


                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      tags:
        - Babylon
      operationId: Header
      summary: Header queries the CZ header and fork headers at a given height.
  /babylon/zoneconcierge/v1/chains:
    get:
      parameters:
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          name: pagination.key
          required: false
          schema:
            format: byte
            type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          name: pagination.offset
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          name: pagination.limit
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          schema:
            type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          schema:
            type: boolean
      responses:
        '200':
          content:
            '*/*':
              schema:
                properties:
                  consumer_ids:
                    items:
                      type: string
                    title: >-
                      consumer_ids are IDs of the chains in ascending
                      alphabetical order
                    type: array
                  pagination:
                    description: >-
                      PageResponse is to be embedded in gRPC response messages
                      where the

                      corresponding request message has used PageRequest.

                       message SomeResponse {
                               repeated Bar results = 1;
                               PageResponse page = 2;
                       }
                    properties:
                      next_key:
                        description: >-
                          next_key is the key to be passed to PageRequest.key to

                          query the next page most efficiently. It will be empty
                          if

                          there are no more results.
                        format: byte
                        type: string
                      total:
                        format: uint64
                        title: >-
                          total is total number of results available if
                          PageRequest.count_total

                          was set, its value is undefined otherwise
                        type: string
                    title: pagination defines the pagination in the response
                    type: object
                title: >-
                  QueryChainListResponse is response type for the
                  Query/ChainList RPC method
                type: object
          description: A successful response.
        default:
          content:
            '*/*':
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }
                            // or ...
                            if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                              foo = any.unpack(Foo.getDefaultInstance());
                            }

                        Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                        Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".


                        JSON


                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      tags:
        - Babylon
      operationId: ChainList
      summary: ChainList queries the list of chains that checkpoint to Babylon
  /babylon/zoneconcierge/v1/chains_info:
    get:
      parameters:
        - explode: true
          in: query
          name: consumer_ids
          required: false
          schema:
            items:
              type: string
            type: array
      responses:
        '200':
          content:
            '*/*':
              schema:
                description: >-
                  QueryChainsInfoResponse is response type for the
                  Query/ChainsInfo RPC method.
                properties:
                  chains_info:
                    items:
                      properties:
                        consumer_id:
                          title: consumer_id is the ID of the consumer
                          type: string
                        latest_forks:
                          description: >-
                            Forks is a list of non-canonical `IndexedHeader`s at
                            the same height.

                            For example, assuming the following blockchain

                            ```

                            A <- B <- C <- D <- E
                                       \ -- D1
                                       \ -- D2
                            ```

                            Then the fork will be {[D1, D2]} where each item is
                            in struct `IndexedBlock`.


                            Note that each `IndexedHeader` in the fork should
                            have a valid quorum

                            certificate. Such forks exist since Babylon
                            considers CZs might have

                            dishonest majority. Also note that the IBC-Go
                            implementation will only

                            consider the first header in a fork valid, since the
                            subsequent headers

                            cannot be verified without knowing the validator set
                            in the previous header.
                          properties:
                            headers:
                              items:
                                properties:
                                  babylon_epoch:
                                    format: uint64
                                    title: >-
                                      epoch is the epoch number of this header
                                      on Babylon ledger
                                    type: string
                                  babylon_header_hash:
                                    format: byte
                                    title: >-
                                      babylon_header_hash is the hash of the
                                      babylon block that includes this CZ

                                      header
                                    type: string
                                  babylon_header_height:
                                    format: uint64
                                    title: >-
                                      babylon_header_height is the height of the
                                      babylon block that includes this CZ

                                      header
                                    type: string
                                  babylon_tx_hash:
                                    format: byte
                                    title: >-
                                      babylon_tx_hash is the hash of the tx that
                                      includes this header

                                      (babylon_block_height, babylon_tx_hash)
                                      jointly provides the position of

                                      the header on Babylon ledger
                                    type: string
                                  consumer_id:
                                    title: >-
                                      consumer_id is the unique ID of the
                                      consumer
                                    type: string
                                  hash:
                                    format: byte
                                    title: hash is the hash of this header
                                    type: string
                                  height:
                                    format: uint64
                                    title: >-
                                      height is the height of this header on CZ
                                      ledger

                                      (hash, height) jointly provides the
                                      position of the header on CZ ledger
                                    type: string
                                  time:
                                    format: date-time
                                    title: >-
                                      time is the timestamp of this header on CZ
                                      ledger

                                      it is needed for CZ to unbond all mature
                                      validators/delegations

                                      before this timestamp when this header is
                                      BTC-finalised
                                    type: string
                                title: IndexedHeader is the metadata of a CZ header
                                type: object
                              title: >-
                                blocks is the list of non-canonical indexed
                                headers at the same height
                              type: array
                          title: >-
                            latest_forks is the latest forks, formed as a series
                            of IndexedHeader (from

                            low to high)
                          type: object
                        latest_header:
                          properties:
                            babylon_epoch:
                              format: uint64
                              title: >-
                                epoch is the epoch number of this header on
                                Babylon ledger
                              type: string
                            babylon_header_hash:
                              format: byte
                              title: >-
                                babylon_header_hash is the hash of the babylon
                                block that includes this CZ

                                header
                              type: string
                            babylon_header_height:
                              format: uint64
                              title: >-
                                babylon_header_height is the height of the
                                babylon block that includes this CZ

                                header
                              type: string
                            babylon_tx_hash:
                              format: byte
                              title: >-
                                babylon_tx_hash is the hash of the tx that
                                includes this header

                                (babylon_block_height, babylon_tx_hash) jointly
                                provides the position of

                                the header on Babylon ledger
                              type: string
                            consumer_id:
                              title: consumer_id is the unique ID of the consumer
                              type: string
                            hash:
                              format: byte
                              title: hash is the hash of this header
                              type: string
                            height:
                              format: uint64
                              title: >-
                                height is the height of this header on CZ ledger

                                (hash, height) jointly provides the position of
                                the header on CZ ledger
                              type: string
                            time:
                              format: date-time
                              title: >-
                                time is the timestamp of this header on CZ
                                ledger

                                it is needed for CZ to unbond all mature
                                validators/delegations

                                before this timestamp when this header is
                                BTC-finalised
                              type: string
                          title: IndexedHeader is the metadata of a CZ header
                          type: object
                        timestamped_headers_count:
                          format: uint64
                          title: >-
                            timestamped_headers_count is the number of
                            timestamped headers in CZ's

                            canonical chain
                          type: string
                      title: ChainInfo is the information of a CZ
                      type: object
                    type: array
                type: object
          description: A successful response.
        default:
          content:
            '*/*':
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }
                            // or ...
                            if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                              foo = any.unpack(Foo.getDefaultInstance());
                            }

                        Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                        Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".


                        JSON


                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      tags:
        - Babylon
      operationId: ChainsInfo
      summary: >-
        ChainsInfo queries the latest info for a given list of chains in
        Babylon's view
  /babylon/zoneconcierge/v1/epoch_chains_info:
    get:
      parameters:
        - in: query
          name: epoch_num
          required: false
          schema:
            format: uint64
            type: string
        - explode: true
          in: query
          name: consumer_ids
          required: false
          schema:
            items:
              type: string
            type: array
      responses:
        '200':
          content:
            '*/*':
              schema:
                description: >-
                  QueryEpochChainsInfoResponse is response type for the
                  Query/EpochChainsInfo RPC

                  method.
                properties:
                  chains_info:
                    items:
                      properties:
                        consumer_id:
                          title: consumer_id is the ID of the consumer
                          type: string
                        latest_forks:
                          description: >-
                            Forks is a list of non-canonical `IndexedHeader`s at
                            the same height.

                            For example, assuming the following blockchain

                            ```

                            A <- B <- C <- D <- E
                                       \ -- D1
                                       \ -- D2
                            ```

                            Then the fork will be {[D1, D2]} where each item is
                            in struct `IndexedBlock`.


                            Note that each `IndexedHeader` in the fork should
                            have a valid quorum

                            certificate. Such forks exist since Babylon
                            considers CZs might have

                            dishonest majority. Also note that the IBC-Go
                            implementation will only

                            consider the first header in a fork valid, since the
                            subsequent headers

                            cannot be verified without knowing the validator set
                            in the previous header.
                          properties:
                            headers:
                              items:
                                properties:
                                  babylon_epoch:
                                    format: uint64
                                    title: >-
                                      epoch is the epoch number of this header
                                      on Babylon ledger
                                    type: string
                                  babylon_header_hash:
                                    format: byte
                                    title: >-
                                      babylon_header_hash is the hash of the
                                      babylon block that includes this CZ

                                      header
                                    type: string
                                  babylon_header_height:
                                    format: uint64
                                    title: >-
                                      babylon_header_height is the height of the
                                      babylon block that includes this CZ

                                      header
                                    type: string
                                  babylon_tx_hash:
                                    format: byte
                                    title: >-
                                      babylon_tx_hash is the hash of the tx that
                                      includes this header

                                      (babylon_block_height, babylon_tx_hash)
                                      jointly provides the position of

                                      the header on Babylon ledger
                                    type: string
                                  consumer_id:
                                    title: >-
                                      consumer_id is the unique ID of the
                                      consumer
                                    type: string
                                  hash:
                                    format: byte
                                    title: hash is the hash of this header
                                    type: string
                                  height:
                                    format: uint64
                                    title: >-
                                      height is the height of this header on CZ
                                      ledger

                                      (hash, height) jointly provides the
                                      position of the header on CZ ledger
                                    type: string
                                  time:
                                    format: date-time
                                    title: >-
                                      time is the timestamp of this header on CZ
                                      ledger

                                      it is needed for CZ to unbond all mature
                                      validators/delegations

                                      before this timestamp when this header is
                                      BTC-finalised
                                    type: string
                                title: IndexedHeader is the metadata of a CZ header
                                type: object
                              title: >-
                                blocks is the list of non-canonical indexed
                                headers at the same height
                              type: array
                          title: >-
                            latest_forks is the latest forks, formed as a series
                            of IndexedHeader (from

                            low to high)
                          type: object
                        latest_header:
                          properties:
                            babylon_epoch:
                              format: uint64
                              title: >-
                                epoch is the epoch number of this header on
                                Babylon ledger
                              type: string
                            babylon_header_hash:
                              format: byte
                              title: >-
                                babylon_header_hash is the hash of the babylon
                                block that includes this CZ

                                header
                              type: string
                            babylon_header_height:
                              format: uint64
                              title: >-
                                babylon_header_height is the height of the
                                babylon block that includes this CZ

                                header
                              type: string
                            babylon_tx_hash:
                              format: byte
                              title: >-
                                babylon_tx_hash is the hash of the tx that
                                includes this header

                                (babylon_block_height, babylon_tx_hash) jointly
                                provides the position of

                                the header on Babylon ledger
                              type: string
                            consumer_id:
                              title: consumer_id is the unique ID of the consumer
                              type: string
                            hash:
                              format: byte
                              title: hash is the hash of this header
                              type: string
                            height:
                              format: uint64
                              title: >-
                                height is the height of this header on CZ ledger

                                (hash, height) jointly provides the position of
                                the header on CZ ledger
                              type: string
                            time:
                              format: date-time
                              title: >-
                                time is the timestamp of this header on CZ
                                ledger

                                it is needed for CZ to unbond all mature
                                validators/delegations

                                before this timestamp when this header is
                                BTC-finalised
                              type: string
                          title: IndexedHeader is the metadata of a CZ header
                          type: object
                        timestamped_headers_count:
                          format: uint64
                          title: >-
                            timestamped_headers_count is the number of
                            timestamped headers in CZ's

                            canonical chain
                          type: string
                      title: ChainInfo is the information of a CZ
                      type: object
                    title: chain_info is the info of the CZ
                    type: array
                type: object
          description: A successful response.
        default:
          content:
            '*/*':
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }
                            // or ...
                            if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                              foo = any.unpack(Foo.getDefaultInstance());
                            }

                        Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                        Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".


                        JSON


                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      tags:
        - Babylon
      operationId: EpochChainsInfo
      summary: |-
        EpochChainsInfo queries the latest info for a list of chains
        in a given epoch in Babylon's view
  /babylon/zoneconcierge/v1/finalized_chain_info/{consumer_id}/height/{height}:
    get:
      parameters:
        - description: consumer_id is the ID of the CZ
          in: path
          name: consumer_id
          required: true
          schema:
            type: string
        - description: >-
            height is the height of the CZ chain

            such that the returned finalised chain info will be no later than
            this

            height
          in: path
          name: height
          required: true
          schema:
            format: uint64
            type: string
        - description: >-
            prove indicates whether the querier wants to get proofs of this
            timestamp.
          in: query
          name: prove
          required: false
          schema:
            type: boolean
      responses:
        '200':
          content:
            '*/*':
              schema:
                description: >-
                  QueryFinalizedChainInfoUntilHeightResponse is response type
                  for the

                  Query/FinalizedChainInfoUntilHeight RPC method.
                properties:
                  btc_submission_key:
                    properties:
                      key:
                        items:
                          properties:
                            hash:
                              format: byte
                              type: string
                            index:
                              format: int64
                              type: integer
                          title: >-
                            Each provided OP_RETURN transaction can be
                            identified by hash of block in

                            which transaction was included and transaction index
                            in the block
                          type: object
                        type: array
                    title: >-
                      btc_submission_key is position of two BTC txs that include
                      the raw

                      checkpoint of this epoch
                    type: object
                  epoch_info:
                    properties:
                      current_epoch_interval:
                        format: uint64
                        title: >-
                          current_epoch_interval is the epoch interval at the
                          time of this epoch
                        type: string
                      epoch_number:
                        format: uint64
                        title: epoch_number is the number of this epoch
                        type: string
                      first_block_height:
                        format: uint64
                        title: >-
                          first_block_height is the height of the first block in
                          this epoch
                        type: string
                      last_block_time:
                        description: >-
                          last_block_time is the time of the last block in this
                          epoch.

                          Babylon needs to remember the last header's time of
                          each epoch to complete

                          unbonding validators/delegations when a previous
                          epoch's checkpoint is

                          finalised. The last_block_time field is nil in the
                          epoch's beginning, and

                          is set upon the end of this epoch.
                        format: date-time
                        type: string
                      sealer_app_hash:
                        format: byte
                        title: >-
                          sealer is the last block of the sealed epoch

                          sealer_app_hash points to the sealer but stored in the
                          1st header

                          of the next epoch
                        type: string
                      sealer_block_hash:
                        format: byte
                        title: >-
                          sealer_block_hash is the hash of the sealer

                          the validator set has generated a BLS multisig on the
                          hash,

                          i.e., hash of the last block in the epoch
                        type: string
                    title: epoch_info is the metadata of the last BTC-finalised epoch
                    type: object
                  finalized_chain_info:
                    properties:
                      consumer_id:
                        title: consumer_id is the ID of the consumer
                        type: string
                      latest_forks:
                        description: >-
                          Forks is a list of non-canonical `IndexedHeader`s at
                          the same height.

                          For example, assuming the following blockchain

                          ```

                          A <- B <- C <- D <- E
                                     \ -- D1
                                     \ -- D2
                          ```

                          Then the fork will be {[D1, D2]} where each item is in
                          struct `IndexedBlock`.


                          Note that each `IndexedHeader` in the fork should have
                          a valid quorum

                          certificate. Such forks exist since Babylon considers
                          CZs might have

                          dishonest majority. Also note that the IBC-Go
                          implementation will only

                          consider the first header in a fork valid, since the
                          subsequent headers

                          cannot be verified without knowing the validator set
                          in the previous header.
                        properties:
                          headers:
                            items:
                              properties:
                                babylon_epoch:
                                  format: uint64
                                  title: >-
                                    epoch is the epoch number of this header on
                                    Babylon ledger
                                  type: string
                                babylon_header_hash:
                                  format: byte
                                  title: >-
                                    babylon_header_hash is the hash of the
                                    babylon block that includes this CZ

                                    header
                                  type: string
                                babylon_header_height:
                                  format: uint64
                                  title: >-
                                    babylon_header_height is the height of the
                                    babylon block that includes this CZ

                                    header
                                  type: string
                                babylon_tx_hash:
                                  format: byte
                                  title: >-
                                    babylon_tx_hash is the hash of the tx that
                                    includes this header

                                    (babylon_block_height, babylon_tx_hash)
                                    jointly provides the position of

                                    the header on Babylon ledger
                                  type: string
                                consumer_id:
                                  title: consumer_id is the unique ID of the consumer
                                  type: string
                                hash:
                                  format: byte
                                  title: hash is the hash of this header
                                  type: string
                                height:
                                  format: uint64
                                  title: >-
                                    height is the height of this header on CZ
                                    ledger

                                    (hash, height) jointly provides the position
                                    of the header on CZ ledger
                                  type: string
                                time:
                                  format: date-time
                                  title: >-
                                    time is the timestamp of this header on CZ
                                    ledger

                                    it is needed for CZ to unbond all mature
                                    validators/delegations

                                    before this timestamp when this header is
                                    BTC-finalised
                                  type: string
                              title: IndexedHeader is the metadata of a CZ header
                              type: object
                            title: >-
                              blocks is the list of non-canonical indexed
                              headers at the same height
                            type: array
                        title: >-
                          latest_forks is the latest forks, formed as a series
                          of IndexedHeader (from

                          low to high)
                        type: object
                      latest_header:
                        properties:
                          babylon_epoch:
                            format: uint64
                            title: >-
                              epoch is the epoch number of this header on
                              Babylon ledger
                            type: string
                          babylon_header_hash:
                            format: byte
                            title: >-
                              babylon_header_hash is the hash of the babylon
                              block that includes this CZ

                              header
                            type: string
                          babylon_header_height:
                            format: uint64
                            title: >-
                              babylon_header_height is the height of the babylon
                              block that includes this CZ

                              header
                            type: string
                          babylon_tx_hash:
                            format: byte
                            title: >-
                              babylon_tx_hash is the hash of the tx that
                              includes this header

                              (babylon_block_height, babylon_tx_hash) jointly
                              provides the position of

                              the header on Babylon ledger
                            type: string
                          consumer_id:
                            title: consumer_id is the unique ID of the consumer
                            type: string
                          hash:
                            format: byte
                            title: hash is the hash of this header
                            type: string
                          height:
                            format: uint64
                            title: >-
                              height is the height of this header on CZ ledger

                              (hash, height) jointly provides the position of
                              the header on CZ ledger
                            type: string
                          time:
                            format: date-time
                            title: >-
                              time is the timestamp of this header on CZ ledger

                              it is needed for CZ to unbond all mature
                              validators/delegations

                              before this timestamp when this header is
                              BTC-finalised
                            type: string
                        title: IndexedHeader is the metadata of a CZ header
                        type: object
                      timestamped_headers_count:
                        format: uint64
                        title: >-
                          timestamped_headers_count is the number of timestamped
                          headers in CZ's

                          canonical chain
                        type: string
                    title: ChainInfo is the information of a CZ
                    type: object
                  proof:
                    properties:
                      proof_cz_header_in_epoch:
                        properties:
                          ops:
                            items:
                              properties:
                                data:
                                  format: byte
                                  type: string
                                key:
                                  format: byte
                                  type: string
                                type:
                                  type: string
                              title: >-
                                ProofOp defines an operation used for
                                calculating Merkle root

                                The data could be arbitrary format, providing
                                nessecary data

                                for example neighbouring node hash
                              type: object
                            type: array
                        title: >-
                          proof_cz_header_in_epoch is the proof that the CZ
                          header is timestamped

                          within a certain epoch
                        type: object
                      proof_epoch_sealed:
                        properties:
                          proof_epoch_info:
                            properties:
                              ops:
                                items:
                                  properties:
                                    data:
                                      format: byte
                                      type: string
                                    key:
                                      format: byte
                                      type: string
                                    type:
                                      type: string
                                  title: >-
                                    ProofOp defines an operation used for
                                    calculating Merkle root

                                    The data could be arbitrary format,
                                    providing nessecary data

                                    for example neighbouring node hash
                                  type: object
                                type: array
                            title: >-
                              proof_epoch_info is the Merkle proof that the
                              epoch's metadata is committed

                              to `app_hash` of the sealer header
                            type: object
                          proof_epoch_val_set:
                            properties:
                              ops:
                                items:
                                  properties:
                                    data:
                                      format: byte
                                      type: string
                                    key:
                                      format: byte
                                      type: string
                                    type:
                                      type: string
                                  title: >-
                                    ProofOp defines an operation used for
                                    calculating Merkle root

                                    The data could be arbitrary format,
                                    providing nessecary data

                                    for example neighbouring node hash
                                  type: object
                                type: array
                            title: >-
                              proof_epoch_info is the Merkle proof that the
                              epoch's validator set is

                              committed to `app_hash` of the sealer header
                            type: object
                          validator_set:
                            items:
                              properties:
                                bls_pub_key:
                                  format: byte
                                  title: >-
                                    bls_pub_key is the BLS public key of the
                                    validator
                                  type: string
                                validator_address:
                                  title: >-
                                    validator_address is the address of the
                                    validator
                                  type: string
                                voting_power:
                                  format: uint64
                                  title: >-
                                    voting_power is the voting power of the
                                    validator at the given epoch
                                  type: string
                              title: >-
                                ValidatorWithBlsKey couples validator address,
                                voting power, and its bls

                                public key
                              type: object
                            title: >-
                              validator_set is the validator set of the sealed
                              epoch

                              This validator set has generated a BLS multisig on
                              `app_hash` of

                              the sealer header
                            type: array
                        title: >-
                          proof_epoch_sealed is the proof that the epoch is
                          sealed
                        type: object
                      proof_epoch_submitted:
                        items:
                          properties:
                            key:
                              description: >-
                                key is the position (txIdx, blockHash) of this
                                tx on BTC blockchain

                                Although it is already a part of SubmissionKey,
                                we store it here again

                                to make TransactionInfo self-contained.

                                For example, storing the key allows
                                TransactionInfo to not relay on

                                the fact that TransactionInfo will be ordered in
                                the same order as

                                TransactionKeys in SubmissionKey.
                              properties:
                                hash:
                                  format: byte
                                  type: string
                                index:
                                  format: int64
                                  type: integer
                              title: >-
                                Each provided OP_RETURN transaction can be
                                identified by hash of block in

                                which transaction was included and transaction
                                index in the block
                              type: object
                            proof:
                              format: byte
                              title: >-
                                proof is the Merkle proof that this tx is
                                included in the position in `key`

                                TODO: maybe it could use here better format as
                                we already processed and

                                validated the proof?
                              type: string
                            transaction:
                              format: byte
                              title: transaction is the full transaction in bytes
                              type: string
                          title: >-
                            TransactionInfo is the info of a tx on Bitcoin,

                            including

                            - the position of the tx on BTC blockchain

                            - the full tx content

                            - the Merkle proof that this tx is on the above
                            position
                          type: object
                        title: >-
                          proof_epoch_submitted is the proof that the epoch's
                          checkpoint is included

                          in BTC ledger It is the two TransactionInfo in the
                          best (i.e., earliest)

                          checkpoint submission
                        type: array
                    title: proof is the proof that the chain info is finalized
                    type: object
                  raw_checkpoint:
                    properties:
                      bitmap:
                        format: byte
                        title: >-
                          bitmap defines the bitmap that indicates the signers
                          of the BLS multi sig
                        type: string
                      block_hash:
                        format: byte
                        title: >-
                          block_hash defines the 'BlockID.Hash', which is the
                          hash of

                          the block that individual BLS sigs are signed on
                        type: string
                      bls_multi_sig:
                        format: byte
                        title: >-
                          bls_multi_sig defines the multi sig that is aggregated
                          from individual BLS

                          sigs
                        type: string
                      epoch_num:
                        format: uint64
                        title: >-
                          epoch_num defines the epoch number the raw checkpoint
                          is for
                        type: string
                    title: raw_checkpoint is the raw checkpoint of this epoch
                    type: object
                type: object
          description: A successful response.
        default:
          content:
            '*/*':
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }
                            // or ...
                            if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                              foo = any.unpack(Foo.getDefaultInstance());
                            }

                        Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                        Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".


                        JSON


                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      tags:
        - Babylon
      operationId: FinalizedChainInfoUntilHeight
      summary: >-
        FinalizedChainInfoUntilHeight queries the BTC-finalised info no later
        than

        the provided CZ height, with proofs
  /babylon/zoneconcierge/v1/finalized_chains_info:
    get:
      parameters:
        - description: consumer_ids is the list of ids of CZs.
          explode: true
          in: query
          name: consumer_ids
          required: false
          schema:
            items:
              type: string
            type: array
        - description: >-
            prove indicates whether the querier wants to get proofs of this
            timestamp.
          in: query
          name: prove
          required: false
          schema:
            type: boolean
      responses:
        '200':
          content:
            '*/*':
              schema:
                description: |-
                  QueryFinalizedChainsInfoResponse is response type for the
                  Query/FinalizedChainsInfo RPC method.
                properties:
                  finalized_chains_info:
                    items:
                      properties:
                        btc_submission_key:
                          properties:
                            key:
                              items:
                                properties:
                                  hash:
                                    format: byte
                                    type: string
                                  index:
                                    format: int64
                                    type: integer
                                title: >-
                                  Each provided OP_RETURN transaction can be
                                  identified by hash of block in

                                  which transaction was included and transaction
                                  index in the block
                                type: object
                              type: array
                          title: >-
                            btc_submission_key is position of two BTC txs that
                            include the raw

                            checkpoint of this epoch
                          type: object
                        consumer_id:
                          title: consumer_id is the ID of the consumer
                          type: string
                        epoch_info:
                          properties:
                            current_epoch_interval:
                              format: uint64
                              title: >-
                                current_epoch_interval is the epoch interval at
                                the time of this epoch
                              type: string
                            epoch_number:
                              format: uint64
                              title: epoch_number is the number of this epoch
                              type: string
                            first_block_height:
                              format: uint64
                              title: >-
                                first_block_height is the height of the first
                                block in this epoch
                              type: string
                            last_block_time:
                              description: >-
                                last_block_time is the time of the last block in
                                this epoch.

                                Babylon needs to remember the last header's time
                                of each epoch to complete

                                unbonding validators/delegations when a previous
                                epoch's checkpoint is

                                finalised. The last_block_time field is nil in
                                the epoch's beginning, and

                                is set upon the end of this epoch.
                              format: date-time
                              type: string
                            sealer_app_hash:
                              format: byte
                              title: >-
                                sealer is the last block of the sealed epoch

                                sealer_app_hash points to the sealer but stored
                                in the 1st header

                                of the next epoch
                              type: string
                            sealer_block_hash:
                              format: byte
                              title: >-
                                sealer_block_hash is the hash of the sealer

                                the validator set has generated a BLS multisig
                                on the hash,

                                i.e., hash of the last block in the epoch
                              type: string
                          title: >-
                            epoch_info is the metadata of the last BTC-finalised
                            epoch
                          type: object
                        finalized_chain_info:
                          properties:
                            consumer_id:
                              title: consumer_id is the ID of the consumer
                              type: string
                            latest_forks:
                              description: >-
                                Forks is a list of non-canonical
                                `IndexedHeader`s at the same height.

                                For example, assuming the following blockchain

                                ```

                                A <- B <- C <- D <- E
                                           \ -- D1
                                           \ -- D2
                                ```

                                Then the fork will be {[D1, D2]} where each item
                                is in struct `IndexedBlock`.


                                Note that each `IndexedHeader` in the fork
                                should have a valid quorum

                                certificate. Such forks exist since Babylon
                                considers CZs might have

                                dishonest majority. Also note that the IBC-Go
                                implementation will only

                                consider the first header in a fork valid, since
                                the subsequent headers

                                cannot be verified without knowing the validator
                                set in the previous header.
                              properties:
                                headers:
                                  items:
                                    properties:
                                      babylon_epoch:
                                        format: uint64
                                        title: >-
                                          epoch is the epoch number of this header
                                          on Babylon ledger
                                        type: string
                                      babylon_header_hash:
                                        format: byte
                                        title: >-
                                          babylon_header_hash is the hash of the
                                          babylon block that includes this CZ

                                          header
                                        type: string
                                      babylon_header_height:
                                        format: uint64
                                        title: >-
                                          babylon_header_height is the height of
                                          the babylon block that includes this CZ

                                          header
                                        type: string
                                      babylon_tx_hash:
                                        format: byte
                                        title: >-
                                          babylon_tx_hash is the hash of the tx
                                          that includes this header

                                          (babylon_block_height, babylon_tx_hash)
                                          jointly provides the position of

                                          the header on Babylon ledger
                                        type: string
                                      consumer_id:
                                        title: >-
                                          consumer_id is the unique ID of the
                                          consumer
                                        type: string
                                      hash:
                                        format: byte
                                        title: hash is the hash of this header
                                        type: string
                                      height:
                                        format: uint64
                                        title: >-
                                          height is the height of this header on
                                          CZ ledger

                                          (hash, height) jointly provides the
                                          position of the header on CZ ledger
                                        type: string
                                      time:
                                        format: date-time
                                        title: >-
                                          time is the timestamp of this header on
                                          CZ ledger

                                          it is needed for CZ to unbond all mature
                                          validators/delegations

                                          before this timestamp when this header
                                          is BTC-finalised
                                        type: string
                                    title: >-
                                      IndexedHeader is the metadata of a CZ
                                      header
                                    type: object
                                  title: >-
                                    blocks is the list of non-canonical indexed
                                    headers at the same height
                                  type: array
                              title: >-
                                latest_forks is the latest forks, formed as a
                                series of IndexedHeader (from

                                low to high)
                              type: object
                            latest_header:
                              properties:
                                babylon_epoch:
                                  format: uint64
                                  title: >-
                                    epoch is the epoch number of this header on
                                    Babylon ledger
                                  type: string
                                babylon_header_hash:
                                  format: byte
                                  title: >-
                                    babylon_header_hash is the hash of the
                                    babylon block that includes this CZ

                                    header
                                  type: string
                                babylon_header_height:
                                  format: uint64
                                  title: >-
                                    babylon_header_height is the height of the
                                    babylon block that includes this CZ

                                    header
                                  type: string
                                babylon_tx_hash:
                                  format: byte
                                  title: >-
                                    babylon_tx_hash is the hash of the tx that
                                    includes this header

                                    (babylon_block_height, babylon_tx_hash)
                                    jointly provides the position of

                                    the header on Babylon ledger
                                  type: string
                                consumer_id:
                                  title: consumer_id is the unique ID of the consumer
                                  type: string
                                hash:
                                  format: byte
                                  title: hash is the hash of this header
                                  type: string
                                height:
                                  format: uint64
                                  title: >-
                                    height is the height of this header on CZ
                                    ledger

                                    (hash, height) jointly provides the position
                                    of the header on CZ ledger
                                  type: string
                                time:
                                  format: date-time
                                  title: >-
                                    time is the timestamp of this header on CZ
                                    ledger

                                    it is needed for CZ to unbond all mature
                                    validators/delegations

                                    before this timestamp when this header is
                                    BTC-finalised
                                  type: string
                              title: IndexedHeader is the metadata of a CZ header
                              type: object
                            timestamped_headers_count:
                              format: uint64
                              title: >-
                                timestamped_headers_count is the number of
                                timestamped headers in CZ's

                                canonical chain
                              type: string
                          title: ChainInfo is the information of a CZ
                          type: object
                        proof:
                          properties:
                            proof_cz_header_in_epoch:
                              properties:
                                ops:
                                  items:
                                    properties:
                                      data:
                                        format: byte
                                        type: string
                                      key:
                                        format: byte
                                        type: string
                                      type:
                                        type: string
                                    title: >-
                                      ProofOp defines an operation used for
                                      calculating Merkle root

                                      The data could be arbitrary format,
                                      providing nessecary data

                                      for example neighbouring node hash
                                    type: object
                                  type: array
                              title: >-
                                proof_cz_header_in_epoch is the proof that the
                                CZ header is timestamped

                                within a certain epoch
                              type: object
                            proof_epoch_sealed:
                              properties:
                                proof_epoch_info:
                                  properties:
                                    ops:
                                      items:
                                        properties:
                                          data:
                                            format: byte
                                            type: string
                                          key:
                                            format: byte
                                            type: string
                                          type:
                                            type: string
                                        title: >-
                                          ProofOp defines an operation used for
                                          calculating Merkle root

                                          The data could be arbitrary format,
                                          providing nessecary data

                                          for example neighbouring node hash
                                        type: object
                                      type: array
                                  title: >-
                                    proof_epoch_info is the Merkle proof that
                                    the epoch's metadata is committed

                                    to `app_hash` of the sealer header
                                  type: object
                                proof_epoch_val_set:
                                  properties:
                                    ops:
                                      items:
                                        properties:
                                          data:
                                            format: byte
                                            type: string
                                          key:
                                            format: byte
                                            type: string
                                          type:
                                            type: string
                                        title: >-
                                          ProofOp defines an operation used for
                                          calculating Merkle root

                                          The data could be arbitrary format,
                                          providing nessecary data

                                          for example neighbouring node hash
                                        type: object
                                      type: array
                                  title: >-
                                    proof_epoch_info is the Merkle proof that
                                    the epoch's validator set is

                                    committed to `app_hash` of the sealer header
                                  type: object
                                validator_set:
                                  items:
                                    properties:
                                      bls_pub_key:
                                        format: byte
                                        title: >-
                                          bls_pub_key is the BLS public key of the
                                          validator
                                        type: string
                                      validator_address:
                                        title: >-
                                          validator_address is the address of the
                                          validator
                                        type: string
                                      voting_power:
                                        format: uint64
                                        title: >-
                                          voting_power is the voting power of the
                                          validator at the given epoch
                                        type: string
                                    title: >-
                                      ValidatorWithBlsKey couples validator
                                      address, voting power, and its bls

                                      public key
                                    type: object
                                  title: >-
                                    validator_set is the validator set of the
                                    sealed epoch

                                    This validator set has generated a BLS
                                    multisig on `app_hash` of

                                    the sealer header
                                  type: array
                              title: >-
                                proof_epoch_sealed is the proof that the epoch
                                is sealed
                              type: object
                            proof_epoch_submitted:
                              items:
                                properties:
                                  key:
                                    description: >-
                                      key is the position (txIdx, blockHash) of
                                      this tx on BTC blockchain

                                      Although it is already a part of
                                      SubmissionKey, we store it here again

                                      to make TransactionInfo self-contained.

                                      For example, storing the key allows
                                      TransactionInfo to not relay on

                                      the fact that TransactionInfo will be
                                      ordered in the same order as

                                      TransactionKeys in SubmissionKey.
                                    properties:
                                      hash:
                                        format: byte
                                        type: string
                                      index:
                                        format: int64
                                        type: integer
                                    title: >-
                                      Each provided OP_RETURN transaction can be
                                      identified by hash of block in

                                      which transaction was included and
                                      transaction index in the block
                                    type: object
                                  proof:
                                    format: byte
                                    title: >-
                                      proof is the Merkle proof that this tx is
                                      included in the position in `key`

                                      TODO: maybe it could use here better
                                      format as we already processed and

                                      validated the proof?
                                    type: string
                                  transaction:
                                    format: byte
                                    title: >-
                                      transaction is the full transaction in
                                      bytes
                                    type: string
                                title: >-
                                  TransactionInfo is the info of a tx on
                                  Bitcoin,

                                  including

                                  - the position of the tx on BTC blockchain

                                  - the full tx content

                                  - the Merkle proof that this tx is on the
                                  above position
                                type: object
                              title: >-
                                proof_epoch_submitted is the proof that the
                                epoch's checkpoint is included

                                in BTC ledger It is the two TransactionInfo in
                                the best (i.e., earliest)

                                checkpoint submission
                              type: array
                          title: proof is the proof that the chain info is finalized
                          type: object
                        raw_checkpoint:
                          properties:
                            bitmap:
                              format: byte
                              title: >-
                                bitmap defines the bitmap that indicates the
                                signers of the BLS multi sig
                              type: string
                            block_hash:
                              format: byte
                              title: >-
                                block_hash defines the 'BlockID.Hash', which is
                                the hash of

                                the block that individual BLS sigs are signed on
                              type: string
                            bls_multi_sig:
                              format: byte
                              title: >-
                                bls_multi_sig defines the multi sig that is
                                aggregated from individual BLS

                                sigs
                              type: string
                            epoch_num:
                              format: uint64
                              title: >-
                                epoch_num defines the epoch number the raw
                                checkpoint is for
                              type: string
                          title: raw_checkpoint is the raw checkpoint of this epoch
                          type: object
                      title: >-
                        FinalizedChainInfo is the information of a CZ that is
                        BTC-finalised
                      type: object
                    type: array
                type: object
          description: A successful response.
        default:
          content:
            '*/*':
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }
                            // or ...
                            if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                              foo = any.unpack(Foo.getDefaultInstance());
                            }

                        Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                        Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".


                        JSON


                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      tags:
        - Babylon
      operationId: FinalizedChainsInfo
      summary: >-
        FinalizedChainsInfo queries the BTC-finalised info of chains with given
        IDs, with proofs
  /babylon/zoneconcierge/v1/headers/{consumer_id}:
    get:
      parameters:
        - in: path
          name: consumer_id
          required: true
          schema:
            type: string
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          name: pagination.key
          required: false
          schema:
            format: byte
            type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          name: pagination.offset
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          name: pagination.limit
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          schema:
            type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          schema:
            type: boolean
      responses:
        '200':
          content:
            '*/*':
              schema:
                description: >-
                  QueryListHeadersResponse is response type for the
                  Query/ListHeaders RPC

                  method.
                properties:
                  headers:
                    items:
                      properties:
                        babylon_epoch:
                          format: uint64
                          title: >-
                            epoch is the epoch number of this header on Babylon
                            ledger
                          type: string
                        babylon_header_hash:
                          format: byte
                          title: >-
                            babylon_header_hash is the hash of the babylon block
                            that includes this CZ

                            header
                          type: string
                        babylon_header_height:
                          format: uint64
                          title: >-
                            babylon_header_height is the height of the babylon
                            block that includes this CZ

                            header
                          type: string
                        babylon_tx_hash:
                          format: byte
                          title: >-
                            babylon_tx_hash is the hash of the tx that includes
                            this header

                            (babylon_block_height, babylon_tx_hash) jointly
                            provides the position of

                            the header on Babylon ledger
                          type: string
                        consumer_id:
                          title: consumer_id is the unique ID of the consumer
                          type: string
                        hash:
                          format: byte
                          title: hash is the hash of this header
                          type: string
                        height:
                          format: uint64
                          title: >-
                            height is the height of this header on CZ ledger

                            (hash, height) jointly provides the position of the
                            header on CZ ledger
                          type: string
                        time:
                          format: date-time
                          title: >-
                            time is the timestamp of this header on CZ ledger

                            it is needed for CZ to unbond all mature
                            validators/delegations

                            before this timestamp when this header is
                            BTC-finalised
                          type: string
                      title: IndexedHeader is the metadata of a CZ header
                      type: object
                    title: headers is the list of headers
                    type: array
                  pagination:
                    description: >-
                      PageResponse is to be embedded in gRPC response messages
                      where the

                      corresponding request message has used PageRequest.

                       message SomeResponse {
                               repeated Bar results = 1;
                               PageResponse page = 2;
                       }
                    properties:
                      next_key:
                        description: >-
                          next_key is the key to be passed to PageRequest.key to

                          query the next page most efficiently. It will be empty
                          if

                          there are no more results.
                        format: byte
                        type: string
                      total:
                        format: uint64
                        title: >-
                          total is total number of results available if
                          PageRequest.count_total

                          was set, its value is undefined otherwise
                        type: string
                    title: pagination defines the pagination in the response
                    type: object
                type: object
          description: A successful response.
        default:
          content:
            '*/*':
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }
                            // or ...
                            if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                              foo = any.unpack(Foo.getDefaultInstance());
                            }

                        Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                        Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".


                        JSON


                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      tags:
        - Babylon
      operationId: ListHeaders
      summary: |-
        ListHeaders queries the headers of a chain in Babylon's view, with
        pagination support
  /babylon/zoneconcierge/v1/headers/{consumer_id}/epochs/{epoch_num}:
    get:
      parameters:
        - in: path
          name: consumer_id
          required: true
          schema:
            type: string
        - in: path
          name: epoch_num
          required: true
          schema:
            format: uint64
            type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                description: >-
                  QueryListEpochHeadersResponse is response type for the
                  Query/ListEpochHeaders

                  RPC method.
                properties:
                  headers:
                    items:
                      properties:
                        babylon_epoch:
                          format: uint64
                          title: >-
                            epoch is the epoch number of this header on Babylon
                            ledger
                          type: string
                        babylon_header_hash:
                          format: byte
                          title: >-
                            babylon_header_hash is the hash of the babylon block
                            that includes this CZ

                            header
                          type: string
                        babylon_header_height:
                          format: uint64
                          title: >-
                            babylon_header_height is the height of the babylon
                            block that includes this CZ

                            header
                          type: string
                        babylon_tx_hash:
                          format: byte
                          title: >-
                            babylon_tx_hash is the hash of the tx that includes
                            this header

                            (babylon_block_height, babylon_tx_hash) jointly
                            provides the position of

                            the header on Babylon ledger
                          type: string
                        consumer_id:
                          title: consumer_id is the unique ID of the consumer
                          type: string
                        hash:
                          format: byte
                          title: hash is the hash of this header
                          type: string
                        height:
                          format: uint64
                          title: >-
                            height is the height of this header on CZ ledger

                            (hash, height) jointly provides the position of the
                            header on CZ ledger
                          type: string
                        time:
                          format: date-time
                          title: >-
                            time is the timestamp of this header on CZ ledger

                            it is needed for CZ to unbond all mature
                            validators/delegations

                            before this timestamp when this header is
                            BTC-finalised
                          type: string
                      title: IndexedHeader is the metadata of a CZ header
                      type: object
                    title: headers is the list of headers
                    type: array
                type: object
          description: A successful response.
        default:
          content:
            '*/*':
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }
                            // or ...
                            if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                              foo = any.unpack(Foo.getDefaultInstance());
                            }

                        Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                        Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".


                        JSON


                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      tags:
        - Babylon
      operationId: ListEpochHeaders
      summary: |-
        ListEpochHeaders queries the headers of a chain timestamped in a given
        epoch of Babylon, with pagination support
  /babylon/zoneconcierge/v1/params:
    get:
      responses:
        '200':
          content:
            '*/*':
              schema:
                description: >-
                  QueryParamsResponse is the response type for the Query/Params
                  RPC method.
                properties:
                  params:
                    description: params holds all the parameters of this module.
                    properties:
                      ibc_packet_timeout_seconds:
                        format: int64
                        title: >-
                          ibc_packet_timeout_seconds is the time period after
                          which an unrelayed 

                          IBC packet becomes timeout, measured in seconds
                        type: integer
                    type: object
                type: object
          description: A successful response.
        default:
          content:
            '*/*':
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }
                            // or ...
                            if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                              foo = any.unpack(Foo.getDefaultInstance());
                            }

                        Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                        Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".


                        JSON


                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      tags:
        - Babylon
      operationId: ZoneConciergeParams
      summary: Params queries the parameters of the module.
  /cosmos/mint/v1beta1/annual_provisions:
    get:
      responses:
        '200':
          content:
            '*/*':
              schema:
                description: |-
                  QueryAnnualProvisionsResponse is the response type for the
                  Query/AnnualProvisions RPC method.
                properties:
                  annual_provisions:
                    description: AnnualProvisions is the current annual provisions.
                    format: byte
                    type: string
                type: object
          description: A successful response.
        default:
          content:
            '*/*':
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      properties:
                        type_url:
                          type: string
                        value:
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      tags:
        - Babylon
      operationId: AnnualProvisions
      summary: AnnualProvisions returns the current annual provisions.
  /cosmos/mint/v1beta1/genesis_time:
    get:
      responses:
        '200':
          content:
            '*/*':
              schema:
                description: >-
                  QueryGenesisTimeResponse is the response type for the
                  Query/GenesisTime RPC

                  method.
                properties:
                  genesis_time:
                    description: >-
                      GenesisTime is the timestamp associated with the first
                      block.
                    format: date-time
                    type: string
                type: object
          description: A successful response.
        default:
          content:
            '*/*':
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      properties:
                        type_url:
                          type: string
                        value:
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      tags:
        - Babylon
      operationId: GenesisTime
      summary: GenesisTime returns the genesis time.
  /cosmos/mint/v1beta1/inflation_rate:
    get:
      responses:
        '200':
          content:
            '*/*':
              schema:
                description: >-
                  QueryInflationRateResponse is the response type for the
                  Query/InflationRate

                  RPC method.
                properties:
                  inflation_rate:
                    description: InflationRate is the current inflation rate.
                    format: byte
                    type: string
                type: object
          description: A successful response.
        default:
          content:
            '*/*':
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      properties:
                        type_url:
                          type: string
                        value:
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      tags:
        - Babylon
      operationId: InflationRate
      summary: InflationRate returns the current inflation rate.
  /broadcast_tx_sync:
    get:
      summary: >-
        Returns with the response from CheckTx. Does not wait for DeliverTx
        result.
      tags:
        - CometBFT
      operationId: broadcast_tx_sync
      description: >
        If you want to be sure that the transaction is included in a block, you
        can

        subscribe for the result using JSONRPC via a websocket. See

        https://docs.cometbft.com/v0.38.x/core/subscription.html

        If you haven't received anything after a couple of blocks, resend it. If
        the

        same happens again, send it to some other node. A few reasons why it
        could

        happen:


        1. malicious node can drop or pretend it had committed your tx

        2. malicious proposer (not necessary the one you're communicating with)
        can

        drop transactions, which might become valid in the future

        (https://github.com/tendermint/tendermint/issues/3322)



        Please refer to [formatting/encoding
        rules](https://docs.cometbft.com/v0.38.x/core/using-cometbft.html#formatting)

        for additional details
      parameters:
        - in: query
          name: tx
          required: true
          schema:
            type: string
          example: '456'
          description: The transaction
      responses:
        '200':
          description: Empty
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BroadcastTxResponse'
        '500':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /broadcast_tx_async:
    get:
      summary: >-
        Returns right away, with no response. Does not wait for CheckTx nor
        DeliverTx results.
      tags:
        - CometBFT
      operationId: broadcast_tx_async
      description: >
        If you want to be sure that the transaction is included in a block, you
        can

        subscribe for the result using JSONRPC via a websocket. See

        https://docs.cometbft.com/v0.38.x/core/subscription.html

        If you haven't received anything after a couple of blocks, resend it. If
        the

        same happens again, send it to some other node. A few reasons why it
        could

        happen:


        1. malicious node can drop or pretend it had committed your tx

        2. malicious proposer (not necessary the one you're communicating with)
        can

        drop transactions, which might become valid in the future

        (https://github.com/tendermint/tendermint/issues/3322)

        3. node can be offline


        Please refer to [formatting/encoding
        rules](https://docs.cometbft.com/v0.38.x/core/using-cometbft.html#formatting)

        for additional details
      parameters:
        - in: query
          name: tx
          required: true
          schema:
            type: string
            example: '123'
          description: The transaction
      responses:
        '200':
          description: empty answer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BroadcastTxResponse'
        '500':
          description: empty error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /broadcast_tx_commit:
    get:
      summary: Returns with the responses from CheckTx and DeliverTx.
      tags:
        - CometBFT
      operationId: broadcast_tx_commit
      description: >
        IMPORTANT: use only for testing and development. In production, use

        BroadcastTxSync or BroadcastTxAsync. You can subscribe for the
        transaction

        result using JSONRPC via a websocket. See

        https://docs.cometbft.com/v0.38.x/core/subscription.html


        CONTRACT: only returns error if mempool.CheckTx() errs or if we timeout

        waiting for tx to commit.


        If CheckTx or DeliverTx fail, no error will be returned, but the
        returned result

        will contain a non-OK ABCI code.


        Please refer to [formatting/encoding
        rules](https://docs.cometbft.com/v0.38.x/core/using-cometbft.html#formatting)

        for additional details
      parameters:
        - in: query
          name: tx
          required: true
          schema:
            type: string
            example: '785'
          description: The transaction
      responses:
        '200':
          description: empty answer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BroadcastTxCommitResponse'
        '500':
          description: empty error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /check_tx:
    get:
      summary: Checks the transaction without executing it.
      tags:
        - CometBFT
      operationId: check_tx
      description: >
        The transaction won't be added to the mempool.


        Please refer to [formatting/encoding
        rules](https://docs.cometbft.com/v0.38.x/core/using-cometbft.html#formatting)

        for additional details


        Upon success, the `Cache-Control` header will be set with the default

        maximum age.
      parameters:
        - in: query
          name: tx
          required: true
          schema:
            type: string
            example: '785'
          description: The transaction
      responses:
        '200':
          description: ABCI application's CheckTx response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckTxResponse'
        '500':
          description: empty error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /health:
    get:
      summary: Node heartbeat
      tags:
        - CometBFT
      operationId: health
      description: >
        Get node health. Returns empty result (200 OK) on success, no response -
        in case of an error.
      responses:
        '200':
          description: Gets Node Health
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
        '500':
          description: empty error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /status:
    get:
      summary: Node Status
      operationId: status
      tags:
        - CometBFT
      description: >
        Get CometBFT status including node info, pubkey, latest block hash, app
        hash, block height and time.
      responses:
        '200':
          description: Status of the node
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        '500':
          description: empty error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /net_info:
    get:
      summary: Network information
      operationId: net_info
      tags:
        - CometBFT
      description: |
        Get network info.
      responses:
        '200':
          description: empty answer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NetInfoResponse'
        '500':
          description: empty error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /dial_seeds:
    get:
      summary: Dial Seeds (Unsafe)
      operationId: dial_seeds
      tags:
        - CometBFT
      description: >
        Dial a peer, this route in under unsafe, and has to manually enabled to
        use

          **Example:** curl 'localhost:26657/dial_seeds?seeds=\["f9baeaa15fedf5e1ef7448dd60f46c01f1a9e9c4@1.2.3.4:26656","0491d373a8e0fcf1023aaf18c51d6a1d0d4f31bd@5.6.7.8:26656"\]'
      parameters:
        - in: query
          name: peers
          description: list of seed nodes to dial
          schema:
            type: array
            items:
              type: string
              example: f9baeaa15fedf5e1ef7448dd60f46c01f1a9e9c4@1.2.3.4:26656
      responses:
        '200':
          description: Dialing seeds in progress. See /net_info for details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dialResp'
        '500':
          description: empty error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /dial_peers:
    get:
      summary: Add Peers/Persistent Peers (unsafe)
      operationId: dial_peers
      tags:
        - CometBFT
      description: >
        Set a persistent peer, this route in under unsafe, and has to manually
        enabled to use.


        **Example:** curl
        'localhost:26657/dial_peers?peers=\["f9baeaa15fedf5e1ef7448dd60f46c01f1a9e9c4@1.2.3.4:26656","0491d373a8e0fcf1023aaf18c51d6a1d0d4f31bd@5.6.7.8:26656"\]&persistent=false'
      parameters:
        - in: query
          name: persistent
          description: Have the peers you are dialing be persistent
          schema:
            type: boolean
            example: true
        - in: query
          name: unconditional
          description: Have the peers you are dialing be unconditional
          schema:
            type: boolean
            example: true
        - in: query
          name: private
          description: Have the peers you are dialing be private
          schema:
            type: boolean
            example: true
        - in: query
          name: peers
          description: array of peers to dial
          schema:
            type: array
            items:
              type: string
              example: f9baeaa15fedf5e1ef7448dd60f46c01f1a9e9c4@1.2.3.4:26656
      responses:
        '200':
          description: Dialing seeds in progress. See /net_info for details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dialResp'
        '500':
          description: empty error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /blockchain:
    get:
      summary: 'Get block headers (max: 20) for minHeight <= height <= maxHeight.'
      operationId: blockchain
      parameters:
        - in: query
          name: minHeight
          description: Minimum block height to return
          schema:
            type: integer
            example: 1
        - in: query
          name: maxHeight
          description: Maximum block height to return
          schema:
            type: integer
            example: 2
      tags:
        - CometBFT
      description: |
        Get block headers for minHeight <= height <= maxHeight.

        At most 20 items will be returned.

        Upon success, the `Cache-Control` header will be set with the default
        maximum age.
      responses:
        '200':
          description: Block headers, returned in descending order (highest first).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockchainResponse'
        '500':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /header:
    get:
      summary: Get header at a specified height
      operationId: header
      parameters:
        - in: query
          name: height
          schema:
            type: integer
            default: 0
            example: 1
          description: >-
            height to return. If no height is provided, it will fetch the latest
            header.
      tags:
        - CometBFT
      description: |
        Get Header.

        If the `height` field is set to a non-default value, upon success, the
        `Cache-Control` header will be set with the default maximum age.
      responses:
        '200':
          description: Header informations.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockHeader'
        '500':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /header_by_hash:
    get:
      summary: Get header by hash
      operationId: header_by_hash
      parameters:
        - in: query
          name: hash
          description: header hash
          required: true
          schema:
            type: string
            example: '0xD70952032620CC4E2737EB8AC379806359D8E0B17B0488F627997A0B043ABDED'
      tags:
        - CometBFT
      description: |
        Get Header By Hash.

        Upon success, the `Cache-Control` header will be set with the default
        maximum age.
      responses:
        '200':
          description: Header informations.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockHeader'
        '500':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /block:
    get:
      summary: Get block at a specified height
      operationId: block
      parameters:
        - in: query
          name: height
          schema:
            type: integer
            default: 0
            example: 1
          description: >-
            height to return. If no height is provided, it will fetch the latest
            block.
      tags:
        - CometBFT
      description: |
        Get Block.

        If the `height` field is set to a non-default value, upon success, the
        `Cache-Control` header will be set with the default maximum age.
      responses:
        '200':
          description: Block informations.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockResponse'
        '500':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /block_by_hash:
    get:
      summary: Get block by hash
      operationId: block_by_hash
      parameters:
        - in: query
          name: hash
          description: block hash
          required: true
          schema:
            type: string
            example: '0xD70952032620CC4E2737EB8AC379806359D8E0B17B0488F627997A0B043ABDED'
      tags:
        - CometBFT
      description: |
        Get Block By Hash.

        Upon success, the `Cache-Control` header will be set with the default
        maximum age.
      responses:
        '200':
          description: Block informations.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockResponse'
        '500':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /block_results:
    get:
      summary: Get block results at a specified height
      operationId: block_results
      parameters:
        - in: query
          name: height
          description: >-
            height to return. If no height is provided, it will fetch
            information regarding the latest block.
          schema:
            type: integer
            default: 0
            example: 1
      tags:
        - CometBFT
      description: |
        Get block_results.

        If the `height` field is set to a non-default value, upon success, the
        `Cache-Control` header will be set with the default maximum age.
      responses:
        '200':
          description: Block results.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockResultsResponse'
        '500':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /commit:
    get:
      summary: Get commit results at a specified height
      operationId: commit
      parameters:
        - in: query
          name: height
          description: >-
            height to return. If no height is provided, it will fetch commit
            informations regarding the latest block.
          schema:
            type: integer
            default: 0
            example: 1
      tags:
        - CometBFT
      description: |
        Get Commit.

        If the `height` field is set to a non-default value, upon success, the
        `Cache-Control` header will be set with the default maximum age.
      responses:
        '200':
          description: >
            Commit results.


            canonical switches from false to true for block H once block H+1 has
            been committed. Until then it's subjective and only reflects what
            this node has seen so far.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitResponse'
        '500':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /validators:
    get:
      summary: Get validator set at a specified height
      operationId: validators
      parameters:
        - in: query
          name: height
          description: >-
            height to return. If no height is provided, it will fetch validator
            set which corresponds to the latest block.
          schema:
            type: integer
            default: 0
            example: 1
        - in: query
          name: page
          description: Page number (1-based)
          required: false
          schema:
            type: integer
            default: 1
            example: 1
        - in: query
          name: per_page
          description: 'Number of entries per page (max: 100)'
          required: false
          schema:
            type: integer
            example: 30
            default: 30
      tags:
        - CometBFT
      description: |
        Get Validators. Validators are sorted first by voting power
        (descending), then by address (ascending).

        If the `height` field is set to a non-default value, upon success, the
        `Cache-Control` header will be set with the default maximum age.
      responses:
        '200':
          description: Commit results.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidatorsResponse'
        '500':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /genesis:
    get:
      summary: Get Genesis
      operationId: genesis
      tags:
        - CometBFT
      description: |
        Get genesis.

        Upon success, the `Cache-Control` header will be set with the default
        maximum age.
      responses:
        '200':
          description: Genesis results.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenesisResponse'
        '500':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /genesis_chunked:
    get:
      summary: Get Genesis in multiple chunks
      operationId: genesis_chunked
      tags:
        - CometBFT
      description: |
        Get genesis document in multiple chunks to make it easier to iterate
        through larger genesis structures. Each chunk is produced by converting
        the genesis document to JSON and then splitting the resulting payload
        into 16MB blocks, and then Base64-encoding each block.

        Upon success, the `Cache-Control` header will be set with the default
        maximum age.
      parameters:
        - in: query
          name: chunk
          description: Sequence number of the chunk to download.
          schema:
            type: integer
            default: 0
            example: 1
      responses:
        '200':
          description: Genesis chunk response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenesisChunkedResponse'
        '500':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /dump_consensus_state:
    get:
      summary: Get consensus state
      operationId: dump_consensus_state
      tags:
        - CometBFT
      description: >
        Get consensus state.


        Not safe to call from inside the ABCI application during a block
        execution.
      responses:
        '200':
          description: >
            Complete consensus state.


            See
            https://pkg.go.dev/github.com/cometbft/cometbft/types?tab=doc#Vote.String
            for Vote string description.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DumpConsensusResponse'
        '500':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /consensus_state:
    get:
      summary: Get consensus state
      operationId: consensus_state
      tags:
        - CometBFT
      description: >
        Get consensus state.


        Not safe to call from inside the ABCI application during a block
        execution.
      responses:
        '200':
          description: consensus state results.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsensusStateResponse'
        '500':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /consensus_params:
    get:
      summary: Get consensus parameters
      operationId: consensus_params
      parameters:
        - in: query
          name: height
          description: >-
            height to return. If no height is provided, it will fetch commit
            informations regarding the latest block.
          schema:
            type: integer
            default: 0
            example: 1
      tags:
        - CometBFT
      description: |
        Get consensus parameters.

        If the `height` field is set to a non-default value, upon success, the
        `Cache-Control` header will be set with the default maximum age.
      responses:
        '200':
          description: consensus parameters results.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsensusParamsResponse'
        '500':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /unconfirmed_txs:
    get:
      summary: Get the list of unconfirmed transactions
      operationId: unconfirmed_txs
      parameters:
        - in: query
          name: limit
          description: Maximum number of unconfirmed transactions to return (max 100)
          required: false
          schema:
            type: integer
            default: 30
            example: 1
      tags:
        - CometBFT
      description: |
        Get list of unconfirmed transactions
      responses:
        '200':
          description: List of unconfirmed transactions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnconfirmedTransactionsResponse'
        '500':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /num_unconfirmed_txs:
    get:
      summary: Get data about unconfirmed transactions
      operationId: num_unconfirmed_txs
      tags:
        - CometBFT
      description: |
        Get data about unconfirmed transactions
      responses:
        '200':
          description: status about unconfirmed transactions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NumUnconfirmedTransactionsResponse'
        '500':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /tx_search:
    get:
      summary: Search for transactions
      description: |
        Search for transactions w/ their results.

        See /subscribe for the query syntax.
      operationId: tx_search
      parameters:
        - in: query
          name: query
          description: Query
          required: true
          schema:
            type: string
            example: '"tx.height=1000"'
        - in: query
          name: prove
          description: Include proofs of the transactions inclusion in the block
          required: false
          schema:
            type: boolean
            default: false
            example: true
        - in: query
          name: page
          description: Page number (1-based)
          required: false
          schema:
            type: integer
            default: 1
            example: 1
        - in: query
          name: per_page
          description: 'Number of entries per page (max: 100)'
          required: false
          schema:
            type: integer
            default: 30
            example: 30
        - in: query
          name: order_by
          description: >-
            Order in which transactions are sorted ("asc" or "desc"), by height
            & index. If empty, default sorting will be still applied.
          required: false
          schema:
            type: string
            default: asc
            example: asc
      tags:
        - CometBFT
      responses:
        '200':
          description: List of unconfirmed transactions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TxSearchResponse'
        '500':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /block_search:
    get:
      summary: Search for blocks by FinalizeBlock events
      description: |
        Search for blocks by FinalizeBlock events.

        See /subscribe for the query syntax.
      operationId: block_search
      parameters:
        - in: query
          name: query
          description: Query
          required: true
          schema:
            type: string
            example: '"block.height > 1000"'
        - in: query
          name: page
          description: Page number (1-based)
          required: false
          schema:
            type: integer
            default: 1
            example: 1
        - in: query
          name: per_page
          description: 'Number of entries per page (max: 100)'
          required: false
          schema:
            type: integer
            default: 30
            example: 30
        - in: query
          name: order_by
          description: >-
            Order in which blocks are sorted ("asc" or "desc"), by height. If
            empty, default sorting will be still applied.
          required: false
          schema:
            type: string
            default: desc
            example: asc
      tags:
        - CometBFT
      responses:
        '200':
          description: List of paginated blocks matching the search criteria.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockSearchResponse'
        '500':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /tx:
    get:
      summary: Get transactions by hash
      operationId: tx
      parameters:
        - in: query
          name: hash
          description: hash of transaction to retrieve
          required: true
          schema:
            type: string
            example: '0xD70952032620CC4E2737EB8AC379806359D8E0B17B0488F627997A0B043ABDED'
        - in: query
          name: prove
          description: Include proofs of the transaction's inclusion in the block
          required: false
          schema:
            type: boolean
            example: true
            default: false
      tags:
        - CometBFT
      description: |
        Get a transaction

        Upon success, the `Cache-Control` header will be set with the default
        maximum age.
      responses:
        '200':
          description: Get a transaction`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TxResponse'
        '500':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /abci_info:
    get:
      summary: Get info about the application.
      operationId: abci_info
      tags:
        - CometBFT
      description: |
        Get info about the application.

        Upon success, the `Cache-Control` header will be set with the default
        maximum age.
      responses:
        '200':
          description: Get some info about the application.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ABCIInfoResponse'
        '500':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /abci_query:
    get:
      summary: Query the application for some information.
      operationId: abci_query
      parameters:
        - in: query
          name: path
          description: Path to the data ("/a/b/c")
          required: true
          schema:
            type: string
            example: '"/a/b/c"'
        - in: query
          name: data
          description: Data
          required: true
          schema:
            type: string
            example: IHAVENOIDEA
        - in: query
          name: height
          description: Height (0 means latest)
          required: false
          schema:
            type: integer
            example: 1
            default: 0
        - in: query
          name: prove
          description: Include proofs of the transactions inclusion in the block
          required: false
          schema:
            type: boolean
            example: true
            default: false
      tags:
        - CometBFT
      description: |
        Query the application for some information.
      responses:
        '200':
          description: Response of the submitted query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ABCIQueryResponse'
        '500':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /broadcast_evidence:
    get:
      summary: Broadcast evidence of the misbehavior.
      operationId: broadcast_evidence
      parameters:
        - in: query
          name: evidence
          description: JSON evidence
          required: true
          schema:
            type: string
            example: JSON_EVIDENCE_encoded
      tags:
        - CometBFT
      description: |
        Broadcast evidence of the misbehavior.
      responses:
        '200':
          description: Broadcast evidence of the misbehavior.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BroadcastEvidenceResponse'
        '500':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  schemas:
    babylon.btccheckpoint.v1.BTCCheckpointInfoResponse:
      description: >-
        BTCCheckpointInfoResponse contains all data about best submission of
        checkpoint for

        given epoch. Best submission is the submission which is deeper in btc
        ledger.
      properties:
        best_submission_btc_block_hash:
          title: >-
            hash of the btc block which determines checkpoint btc block height
            i.e.

            youngest block of best submission Hexadecimal
          type: string
        best_submission_btc_block_height:
          format: int64
          title: btc height of the best submission of the epoch
          type: integer
        best_submission_transactions:
          items:
            properties:
              hash:
                description: Hash BTC Header hash as hex.
                type: string
              index:
                description: Index Bitcoin Transaction index in block.
                format: int64
                type: integer
              proof:
                title: >-
                  proof is the Merkle proof that this tx is included in the
                  position in `key`
                type: string
              transaction:
                description: transaction is the full transaction data as str hex.
                type: string
            title: |-
              TransactionInfoResponse is the info of a tx on Bitcoin,
              including
              - the position of the tx on BTC blockchain
              - the full tx content
              - the Merkle proof that this tx is on the above position
            type: object
          title: the BTC checkpoint transactions of the best submission
          type: array
        best_submission_vigilante_address_list:
          items:
            properties:
              reporter:
                title: >-
                  reporter is the address of the reporter who reported the
                  submissions,

                  calculated from submission message MsgInsertBTCSpvProof itself
                type: string
              submitter:
                description: >-
                  submitter is the address of the checkpoint submitter to BTC,
                  extracted from

                  the checkpoint itself.
                type: string
            title: >-
              CheckpointAddressesResponse contains the addresses of the
              submitter and reporter of a

              given checkpoint
            type: object
          title: list of vigilantes' addresses of the best submission
          type: array
        epoch_number:
          description: EpochNumber of this checkpoint.
          format: uint64
          type: string
      type: object
    babylon.btccheckpoint.v1.CheckpointAddressesResponse:
      properties:
        reporter:
          title: >-
            reporter is the address of the reporter who reported the
            submissions,

            calculated from submission message MsgInsertBTCSpvProof itself
          type: string
        submitter:
          description: >-
            submitter is the address of the checkpoint submitter to BTC,
            extracted from

            the checkpoint itself.
          type: string
      title: >-
        CheckpointAddressesResponse contains the addresses of the submitter and
        reporter of a

        given checkpoint
      type: object
    babylon.btccheckpoint.v1.Params:
      description: Params defines the parameters for the module.
      properties:
        btc_confirmation_depth:
          format: int64
          title: >-
            btc_confirmation_depth is the confirmation depth in BTC.

            A block is considered irreversible only when it is at least k-deep
            in BTC

            (k in research paper)
          type: integer
        checkpoint_finalization_timeout:
          format: int64
          title: >-
            checkpoint_finalization_timeout is the maximum time window (measured
            in BTC

            blocks) between a checkpoint

            - being submitted to BTC, and

            - being reported back to BBN

            If a checkpoint has not been reported back within w BTC blocks, then
            BBN

            has dishonest majority and is stalling checkpoints (w in research
            paper)
          type: integer
        checkpoint_tag:
          title: >-
            4byte tag in hex format, required to be present in the OP_RETURN
            transaction

            related to babylon
          type: string
      type: object
    babylon.btccheckpoint.v1.QueryBtcCheckpointInfoResponse:
      properties:
        info:
          description: >-
            BTCCheckpointInfoResponse contains all data about best submission of
            checkpoint for

            given epoch. Best submission is the submission which is deeper in
            btc ledger.
          properties:
            best_submission_btc_block_hash:
              title: >-
                hash of the btc block which determines checkpoint btc block
                height i.e.

                youngest block of best submission Hexadecimal
              type: string
            best_submission_btc_block_height:
              format: int64
              title: btc height of the best submission of the epoch
              type: integer
            best_submission_transactions:
              items:
                properties:
                  hash:
                    description: Hash BTC Header hash as hex.
                    type: string
                  index:
                    description: Index Bitcoin Transaction index in block.
                    format: int64
                    type: integer
                  proof:
                    title: >-
                      proof is the Merkle proof that this tx is included in the
                      position in `key`
                    type: string
                  transaction:
                    description: transaction is the full transaction data as str hex.
                    type: string
                title: |-
                  TransactionInfoResponse is the info of a tx on Bitcoin,
                  including
                  - the position of the tx on BTC blockchain
                  - the full tx content
                  - the Merkle proof that this tx is on the above position
                type: object
              title: the BTC checkpoint transactions of the best submission
              type: array
            best_submission_vigilante_address_list:
              items:
                properties:
                  reporter:
                    title: >-
                      reporter is the address of the reporter who reported the
                      submissions,

                      calculated from submission message MsgInsertBTCSpvProof
                      itself
                    type: string
                  submitter:
                    description: >-
                      submitter is the address of the checkpoint submitter to
                      BTC, extracted from

                      the checkpoint itself.
                    type: string
                title: >-
                  CheckpointAddressesResponse contains the addresses of the
                  submitter and reporter of a

                  given checkpoint
                type: object
              title: list of vigilantes' addresses of the best submission
              type: array
            epoch_number:
              description: EpochNumber of this checkpoint.
              format: uint64
              type: string
          type: object
      title: |-
        QueryBtcCheckpointInfoResponse is response type for the
        Query/BtcCheckpointInfo RPC method
      type: object
    babylon.btccheckpoint.v1.QueryBtcCheckpointsInfoResponse:
      properties:
        info_list:
          items:
            description: >-
              BTCCheckpointInfoResponse contains all data about best submission
              of checkpoint for

              given epoch. Best submission is the submission which is deeper in
              btc ledger.
            properties:
              best_submission_btc_block_hash:
                title: >-
                  hash of the btc block which determines checkpoint btc block
                  height i.e.

                  youngest block of best submission Hexadecimal
                type: string
              best_submission_btc_block_height:
                format: int64
                title: btc height of the best submission of the epoch
                type: integer
              best_submission_transactions:
                items:
                  properties:
                    hash:
                      description: Hash BTC Header hash as hex.
                      type: string
                    index:
                      description: Index Bitcoin Transaction index in block.
                      format: int64
                      type: integer
                    proof:
                      title: >-
                        proof is the Merkle proof that this tx is included in
                        the position in `key`
                      type: string
                    transaction:
                      description: transaction is the full transaction data as str hex.
                      type: string
                  title: |-
                    TransactionInfoResponse is the info of a tx on Bitcoin,
                    including
                    - the position of the tx on BTC blockchain
                    - the full tx content
                    - the Merkle proof that this tx is on the above position
                  type: object
                title: the BTC checkpoint transactions of the best submission
                type: array
              best_submission_vigilante_address_list:
                items:
                  properties:
                    reporter:
                      title: >-
                        reporter is the address of the reporter who reported the
                        submissions,

                        calculated from submission message MsgInsertBTCSpvProof
                        itself
                      type: string
                    submitter:
                      description: >-
                        submitter is the address of the checkpoint submitter to
                        BTC, extracted from

                        the checkpoint itself.
                      type: string
                  title: >-
                    CheckpointAddressesResponse contains the addresses of the
                    submitter and reporter of a

                    given checkpoint
                  type: object
                title: list of vigilantes' addresses of the best submission
                type: array
              epoch_number:
                description: EpochNumber of this checkpoint.
                format: uint64
                type: string
            type: object
          type: array
        pagination:
          description: |-
            PageResponse is to be embedded in gRPC response messages where the
            corresponding request message has used PageRequest.

             message SomeResponse {
                     repeated Bar results = 1;
                     PageResponse page = 2;
             }
          properties:
            next_key:
              description: |-
                next_key is the key to be passed to PageRequest.key to
                query the next page most efficiently. It will be empty if
                there are no more results.
              format: byte
              type: string
            total:
              format: uint64
              title: >-
                total is total number of results available if
                PageRequest.count_total

                was set, its value is undefined otherwise
              type: string
          title: pagination defines the pagination in the response
          type: object
      title: |-
        QueryBtcCheckpointsInfoResponse is response type for the
        Query/BtcCheckpointsInfo RPC method
      type: object
    babylon.btccheckpoint.v1.QueryEpochSubmissionsResponse:
      properties:
        keys:
          description: Keys All submissions transactions key saved during an epoch.
          items:
            properties:
              first_tx_block_hash:
                description: FirstTxBlockHash is the BTCHeaderHashBytes in hex.
                type: string
              first_tx_index:
                format: int64
                type: integer
              second_tx_block_hash:
                description: SecondBlockHash is the BTCHeaderHashBytes in hex.
                type: string
              second_tx_index:
                format: int64
                type: integer
            title: >-
              SubmissionKeyResponse Checkpoint can be composed from multiple
              transactions,

              so to identify whole submission we need list of transaction keys.

              Each submission can generally be identified by this list of
              (txIdx,

              blockHash) tuples. Note: this could possibly be optimized as if
              transactions

              were in one block they would have the same block hash and
              different indexes,

              but each blockhash is only 33 (1  byte for prefix encoding and 32
              byte hash),

              so there should be other strong arguments for this optimization
            type: object
          type: array
      title: >-
        QueryEpochSubmissionsResponse defines a response to get all submissions
        in

        given epoch (QueryEpochSubmissionsRequest)
      type: object
    babylon.btccheckpoint.v1.QueryParamsResponse:
      description: QueryParamsResponse is response type for the Query/Params RPC method.
      properties:
        params:
          description: params holds all the parameters of this module.
          properties:
            btc_confirmation_depth:
              format: int64
              title: >-
                btc_confirmation_depth is the confirmation depth in BTC.

                A block is considered irreversible only when it is at least
                k-deep in BTC

                (k in research paper)
              type: integer
            checkpoint_finalization_timeout:
              format: int64
              title: >-
                checkpoint_finalization_timeout is the maximum time window
                (measured in BTC

                blocks) between a checkpoint

                - being submitted to BTC, and

                - being reported back to BBN

                If a checkpoint has not been reported back within w BTC blocks,
                then BBN

                has dishonest majority and is stalling checkpoints (w in
                research paper)
              type: integer
            checkpoint_tag:
              title: >-
                4byte tag in hex format, required to be present in the OP_RETURN
                transaction

                related to babylon
              type: string
          type: object
      type: object
    babylon.btccheckpoint.v1.SubmissionKey:
      properties:
        key:
          items:
            properties:
              hash:
                format: byte
                type: string
              index:
                format: int64
                type: integer
            title: >-
              Each provided OP_RETURN transaction can be identified by hash of
              block in

              which transaction was included and transaction index in the block
            type: object
          type: array
      title: >-
        Checkpoint can be composed from multiple transactions, so to identify
        whole

        submission we need list of transaction keys.

        Each submission can generally be identified by this list of (txIdx,

        blockHash) tuples. Note: this could possibly be optimized as if
        transactions

        were in one block they would have the same block hash and different
        indexes,

        but each blockhash is only 33 (1  byte for prefix encoding and 32 byte
        hash),

        so there should be other strong arguments for this optimization
      type: object
    babylon.btccheckpoint.v1.SubmissionKeyResponse:
      properties:
        first_tx_block_hash:
          description: FirstTxBlockHash is the BTCHeaderHashBytes in hex.
          type: string
        first_tx_index:
          format: int64
          type: integer
        second_tx_block_hash:
          description: SecondBlockHash is the BTCHeaderHashBytes in hex.
          type: string
        second_tx_index:
          format: int64
          type: integer
      title: >-
        SubmissionKeyResponse Checkpoint can be composed from multiple
        transactions,

        so to identify whole submission we need list of transaction keys.

        Each submission can generally be identified by this list of (txIdx,

        blockHash) tuples. Note: this could possibly be optimized as if
        transactions

        were in one block they would have the same block hash and different
        indexes,

        but each blockhash is only 33 (1  byte for prefix encoding and 32 byte
        hash),

        so there should be other strong arguments for this optimization
      type: object
    babylon.btccheckpoint.v1.TransactionInfo:
      properties:
        key:
          description: >-
            key is the position (txIdx, blockHash) of this tx on BTC blockchain

            Although it is already a part of SubmissionKey, we store it here
            again

            to make TransactionInfo self-contained.

            For example, storing the key allows TransactionInfo to not relay on

            the fact that TransactionInfo will be ordered in the same order as

            TransactionKeys in SubmissionKey.
          properties:
            hash:
              format: byte
              type: string
            index:
              format: int64
              type: integer
          title: >-
            Each provided OP_RETURN transaction can be identified by hash of
            block in

            which transaction was included and transaction index in the block
          type: object
        proof:
          format: byte
          title: >-
            proof is the Merkle proof that this tx is included in the position
            in `key`

            TODO: maybe it could use here better format as we already processed
            and

            validated the proof?
          type: string
        transaction:
          format: byte
          title: transaction is the full transaction in bytes
          type: string
      title: |-
        TransactionInfo is the info of a tx on Bitcoin,
        including
        - the position of the tx on BTC blockchain
        - the full tx content
        - the Merkle proof that this tx is on the above position
      type: object
    babylon.btccheckpoint.v1.TransactionInfoResponse:
      properties:
        hash:
          description: Hash BTC Header hash as hex.
          type: string
        index:
          description: Index Bitcoin Transaction index in block.
          format: int64
          type: integer
        proof:
          title: >-
            proof is the Merkle proof that this tx is included in the position
            in `key`
          type: string
        transaction:
          description: transaction is the full transaction data as str hex.
          type: string
      title: |-
        TransactionInfoResponse is the info of a tx on Bitcoin,
        including
        - the position of the tx on BTC blockchain
        - the full tx content
        - the Merkle proof that this tx is on the above position
      type: object
    babylon.btccheckpoint.v1.TransactionKey:
      properties:
        hash:
          format: byte
          type: string
        index:
          format: int64
          type: integer
      title: >-
        Each provided OP_RETURN transaction can be identified by hash of block
        in

        which transaction was included and transaction index in the block
      type: object
    babylon.btclightclient.v1.BTCHeaderInfoResponse:
      description: >-
        BTCHeaderInfoResponse is a structure that contains all relevant
        information about a

        BTC header response
         - Full header as string hex.
         - Header hash for easy retrieval as string hex.
         - Height of the header in the BTC chain.
         - Total work spent on the header. This is the sum of the work corresponding
         to the header Bits field
           and the total work of the header.
      properties:
        hash_hex:
          type: string
        header_hex:
          type: string
        height:
          format: int64
          type: integer
        work:
          description: Work is the sdkmath.Uint as string.
          type: string
      type: object
    babylon.btclightclient.v1.Params:
      description: Params defines the parameters for the module.
      properties:
        insert_headers_allow_list:
          items:
            type: string
          title: >-
            List of addresses which are allowed to insert headers to btc light
            client

            if the list is empty, any address can insert headers
          type: array
      type: object
    babylon.btclightclient.v1.QueryBaseHeaderResponse:
      description: >-
        QueryBaseHeaderResponse is the response type for the Query/BaseHeader
        RPC

        method.
      properties:
        header:
          description: >-
            BTCHeaderInfoResponse is a structure that contains all relevant
            information about a

            BTC header response
             - Full header as string hex.
             - Header hash for easy retrieval as string hex.
             - Height of the header in the BTC chain.
             - Total work spent on the header. This is the sum of the work corresponding
             to the header Bits field
               and the total work of the header.
          properties:
            hash_hex:
              type: string
            header_hex:
              type: string
            height:
              format: int64
              type: integer
            work:
              description: Work is the sdkmath.Uint as string.
              type: string
          type: object
      type: object
    babylon.btclightclient.v1.QueryContainsBytesResponse:
      description: >-
        QueryContainsResponse is response type for the temporary
        Query/ContainsBytes

        RPC method.
      properties:
        contains:
          type: boolean
      type: object
    babylon.btclightclient.v1.QueryContainsResponse:
      description: >-
        QueryContainsResponse is response type for the Query/Contains RPC
        method.
      properties:
        contains:
          type: boolean
      type: object
    babylon.btclightclient.v1.QueryHashesResponse:
      description: QueryHashesResponse is response type for the Query/Hashes RPC method.
      properties:
        hashes:
          items:
            format: byte
            type: string
          type: array
        pagination:
          description: |-
            PageResponse is to be embedded in gRPC response messages where the
            corresponding request message has used PageRequest.

             message SomeResponse {
                     repeated Bar results = 1;
                     PageResponse page = 2;
             }
          properties:
            next_key:
              description: |-
                next_key is the key to be passed to PageRequest.key to
                query the next page most efficiently. It will be empty if
                there are no more results.
              format: byte
              type: string
            total:
              format: uint64
              title: >-
                total is total number of results available if
                PageRequest.count_total

                was set, its value is undefined otherwise
              type: string
          type: object
      type: object
    babylon.btclightclient.v1.QueryHeaderDepthResponse:
      properties:
        depth:
          format: int64
          type: integer
      title: >-
        QueryMainChainDepthResponse is the response type for the
        Query/MainChainDepth RPC

        it contains depth of the block in main chain
      type: object
    babylon.btclightclient.v1.QueryMainChainResponse:
      description: >-
        QueryMainChainResponse is response type for the Query/MainChain RPC
        method.
      properties:
        headers:
          items:
            description: >-
              BTCHeaderInfoResponse is a structure that contains all relevant
              information about a

              BTC header response
               - Full header as string hex.
               - Header hash for easy retrieval as string hex.
               - Height of the header in the BTC chain.
               - Total work spent on the header. This is the sum of the work corresponding
               to the header Bits field
                 and the total work of the header.
            properties:
              hash_hex:
                type: string
              header_hex:
                type: string
              height:
                format: int64
                type: integer
              work:
                description: Work is the sdkmath.Uint as string.
                type: string
            type: object
          type: array
        pagination:
          description: |-
            PageResponse is to be embedded in gRPC response messages where the
            corresponding request message has used PageRequest.

             message SomeResponse {
                     repeated Bar results = 1;
                     PageResponse page = 2;
             }
          properties:
            next_key:
              description: |-
                next_key is the key to be passed to PageRequest.key to
                query the next page most efficiently. It will be empty if
                there are no more results.
              format: byte
              type: string
            total:
              format: uint64
              title: >-
                total is total number of results available if
                PageRequest.count_total

                was set, its value is undefined otherwise
              type: string
          type: object
      type: object
    babylon.btclightclient.v1.QueryParamsResponse:
      description: >-
        QueryParamsResponse is the response type for the Query/Params RPC
        method.
      properties:
        params:
          description: params holds all the parameters of this module.
          properties:
            insert_headers_allow_list:
              items:
                type: string
              title: >-
                List of addresses which are allowed to insert headers to btc
                light client

                if the list is empty, any address can insert headers
              type: array
          type: object
      type: object
    babylon.btclightclient.v1.QueryTipResponse:
      description: QueryTipResponse is the response type for the Query/Tip RPC method.
      properties:
        header:
          description: >-
            BTCHeaderInfoResponse is a structure that contains all relevant
            information about a

            BTC header response
             - Full header as string hex.
             - Header hash for easy retrieval as string hex.
             - Height of the header in the BTC chain.
             - Total work spent on the header. This is the sum of the work corresponding
             to the header Bits field
               and the total work of the header.
          properties:
            hash_hex:
              type: string
            header_hex:
              type: string
            height:
              format: int64
              type: integer
            work:
              description: Work is the sdkmath.Uint as string.
              type: string
          type: object
      type: object
    babylon.btcstaking.v1.BTCDelegationResponse:
      description: >-
        BTCDelegationResponse is the client needed information from a
        BTCDelegation

        with the current status based on parameters.
      properties:
        active:
          title: whether this delegation is active
          type: boolean
        btc_pk:
          format: byte
          title: |-
            btc_pk is the Bitcoin secp256k1 PK of this BTC delegation
            the PK follows encoding in BIP-340 spec
          type: string
        covenant_sigs:
          description: |-
            covenant_sigs is a list of adaptor signatures on the slashing tx
            by each covenant member
            It will be a part of the witness for the staking tx output.
          items:
            properties:
              adaptor_sigs:
                items:
                  format: byte
                  type: string
                title: >-
                  adaptor_sigs is a list of adaptor signatures, each encrypted
                  by a restaked

                  BTC finality provider's public key
                type: array
              cov_pk:
                format: byte
                title: >-
                  cov_pk is the public key of the covenant emulator, used as the
                  public key

                  of the adaptor signature
                type: string
            title: >-
              CovenantAdaptorSignatures is a list adaptor signatures signed by
              the

              covenant with different finality provider's public keys as
              encryption keys
            type: object
          type: array
        delegator_slash_sig_hex:
          description: |-
            delegator_slash_sig_hex is the signature on the slashing tx
            by the delegator (i.e., SK corresponding to btc_pk) as string hex.
            It will be a part of the witness for the staking tx output.
          type: string
        end_height:
          format: int64
          title: |-
            end_height is the end height of the BTC delegation
            it is the end BTC height of the timelock - w
          type: integer
        fp_btc_pk_list:
          items:
            format: byte
            type: string
          title: >-
            fp_btc_pk_list is the list of BIP-340 PKs of the finality providers
            that

            this BTC delegation delegates to
          type: array
        params_version:
          format: int64
          title: params version used to validate delegation
          type: integer
        slashing_tx_hex:
          title: slashing_tx_hex is the hex string of slashing tx
          type: string
        staker_addr:
          description: staker_addr is the address to receive rewards from BTC delegation.
          type: string
        staking_output_idx:
          format: int64
          title: >-
            staking_output_idx is the index of the staking output in the staking
            tx
          type: integer
        staking_time:
          format: int64
          title: >-
            staking_time is the number of blocks for which the delegation is
            locked on

            BTC chain
          type: integer
        staking_tx_hex:
          title: staking_tx_hex is the hex string of staking tx
          type: string
        start_height:
          format: int64
          title: |-
            start_height is the start BTC height of the BTC delegation
            it is the start BTC height of the timelock
          type: integer
        status_desc:
          description: descriptive status of current delegation.
          type: string
        total_sat:
          format: uint64
          title: |-
            total_sat is the total amount of BTC stakes in this delegation
            quantified in satoshi
          type: string
        unbonding_time:
          format: int64
          title: >-
            unbonding_time used in unbonding output timelock path and in
            slashing

            transactions change outputs
          type: integer
        undelegation_response:
          description: undelegation_response is the undelegation info of this delegation.
          properties:
            covenant_slashing_sigs:
              description: |-
                covenant_slashing_sigs is a list of adaptor signatures on the
                unbonding slashing tx by each covenant member
                It will be a part of the witness for the staking tx output.
              items:
                properties:
                  adaptor_sigs:
                    items:
                      format: byte
                      type: string
                    title: >-
                      adaptor_sigs is a list of adaptor signatures, each
                      encrypted by a restaked

                      BTC finality provider's public key
                    type: array
                  cov_pk:
                    format: byte
                    title: >-
                      cov_pk is the public key of the covenant emulator, used as
                      the public key

                      of the adaptor signature
                    type: string
                title: >-
                  CovenantAdaptorSignatures is a list adaptor signatures signed
                  by the

                  covenant with different finality provider's public keys as
                  encryption keys
                type: object
              type: array
            covenant_unbonding_sig_list:
              items:
                properties:
                  pk:
                    format: byte
                    type: string
                  sig:
                    format: byte
                    type: string
                title: >-
                  SignatureInfo is a BIP-340 signature together with its
                  signer's BIP-340 PK
                type: object
              title: >-
                covenant_unbonding_sig_list is the list of signatures on the
                unbonding tx

                by covenant members
              type: array
            delegator_slashing_sig_hex:
              description: |-
                delegator_slashing_sig is the signature on the slashing tx
                by the delegator (i.e., SK corresponding to btc_pk).
                It will be a part of the witness for the unbonding tx output.
                The delegator slashing sig as string hex.
              type: string
            delegator_unbonding_info_response:
              properties:
                spend_stake_tx_hex:
                  title: >-
                    spend_stake_tx_hex is the transaction which spent the
                    staking output. It is

                    filled only if the spend_stake_tx_hex is different than the

                    unbonding_tx_hex
                  type: string
              title: >-
                btc_undelegation_info contains all necessary info about the
                transaction

                which spent the staking output
              type: object
            slashing_tx_hex:
              title: slashingTxHex is the hex string of slashing tx
              type: string
            unbonding_tx_hex:
              description: >-
                unbonding_tx is the transaction which will transfer the funds
                from staking

                output to unbonding output. Unbonding output will usually have
                lower

                timelock than staking output. The unbonding tx as string hex.
              type: string
          title: >-
            BTCUndelegationResponse provides all necessary info about the
            undeleagation
          type: object
      type: object
    babylon.btcstaking.v1.BTCDelegationStatus:
      default: PENDING
      description: >-
        BTCDelegationStatus is the status of a delegation.

        There are two possible valid state transition paths for a BTC
        delegation:

        - PENDING -> VERIFIED -> ACTIVE -> UNBONDED -> EXPIRED

        - PENDING -> VERIFIED -> ACTIVE -> UNBONDED/EXPIRED

        and one invalid state transition path:

        - PENDING -> VERIFIED -> UNBONDED i.e the staker unbonded before

        activating delegation on Babylon chain.

        In valid transition paths, the delegation becomes UNBONDED when:

        - either the staking transaction timelock expires

        - or the staker requests early undelegation through MsgBTCUndelegate
        message.

         - PENDING: PENDING defines a delegation that is waiting for covenant signatures.
         - VERIFIED: VERIFIED defines a delegation that has covenant signatures but is not yet
        included in the BTC chain.
         - ACTIVE: ACTIVE defines a delegation that has voting power
         - UNBONDED: UNBONDED defines a delegation no longer has voting power
        by receiving unbonding tx with signatures from staker and covenant

        committee
         - EXPIRED: EXPIRED defines a delegation no longer has voting power
        for reaching the end of staking transaction timelock
         - ANY: ANY is any of the above status
      enum:
        - PENDING
        - VERIFIED
        - ACTIVE
        - UNBONDED
        - EXPIRED
        - ANY
      type: string
    babylon.btcstaking.v1.BTCDelegatorDelegationsResponse:
      description: >-
        BTCDelegatorDelegationsResponse is a collection of BTC delegations
        responses

        from the same delegator.
      properties:
        dels:
          items:
            description: >-
              BTCDelegationResponse is the client needed information from a
              BTCDelegation

              with the current status based on parameters.
            properties:
              active:
                title: whether this delegation is active
                type: boolean
              btc_pk:
                format: byte
                title: |-
                  btc_pk is the Bitcoin secp256k1 PK of this BTC delegation
                  the PK follows encoding in BIP-340 spec
                type: string
              covenant_sigs:
                description: >-
                  covenant_sigs is a list of adaptor signatures on the slashing
                  tx

                  by each covenant member

                  It will be a part of the witness for the staking tx output.
                items:
                  properties:
                    adaptor_sigs:
                      items:
                        format: byte
                        type: string
                      title: >-
                        adaptor_sigs is a list of adaptor signatures, each
                        encrypted by a restaked

                        BTC finality provider's public key
                      type: array
                    cov_pk:
                      format: byte
                      title: >-
                        cov_pk is the public key of the covenant emulator, used
                        as the public key

                        of the adaptor signature
                      type: string
                  title: >-
                    CovenantAdaptorSignatures is a list adaptor signatures
                    signed by the

                    covenant with different finality provider's public keys as
                    encryption keys
                  type: object
                type: array
              delegator_slash_sig_hex:
                description: >-
                  delegator_slash_sig_hex is the signature on the slashing tx

                  by the delegator (i.e., SK corresponding to btc_pk) as string
                  hex.

                  It will be a part of the witness for the staking tx output.
                type: string
              end_height:
                format: int64
                title: |-
                  end_height is the end height of the BTC delegation
                  it is the end BTC height of the timelock - w
                type: integer
              fp_btc_pk_list:
                items:
                  format: byte
                  type: string
                title: >-
                  fp_btc_pk_list is the list of BIP-340 PKs of the finality
                  providers that

                  this BTC delegation delegates to
                type: array
              params_version:
                format: int64
                title: params version used to validate delegation
                type: integer
              slashing_tx_hex:
                title: slashing_tx_hex is the hex string of slashing tx
                type: string
              staker_addr:
                description: >-
                  staker_addr is the address to receive rewards from BTC
                  delegation.
                type: string
              staking_output_idx:
                format: int64
                title: >-
                  staking_output_idx is the index of the staking output in the
                  staking tx
                type: integer
              staking_time:
                format: int64
                title: >-
                  staking_time is the number of blocks for which the delegation
                  is locked on

                  BTC chain
                type: integer
              staking_tx_hex:
                title: staking_tx_hex is the hex string of staking tx
                type: string
              start_height:
                format: int64
                title: |-
                  start_height is the start BTC height of the BTC delegation
                  it is the start BTC height of the timelock
                type: integer
              status_desc:
                description: descriptive status of current delegation.
                type: string
              total_sat:
                format: uint64
                title: |-
                  total_sat is the total amount of BTC stakes in this delegation
                  quantified in satoshi
                type: string
              unbonding_time:
                format: int64
                title: >-
                  unbonding_time used in unbonding output timelock path and in
                  slashing

                  transactions change outputs
                type: integer
              undelegation_response:
                description: >-
                  undelegation_response is the undelegation info of this
                  delegation.
                properties:
                  covenant_slashing_sigs:
                    description: >-
                      covenant_slashing_sigs is a list of adaptor signatures on
                      the

                      unbonding slashing tx by each covenant member

                      It will be a part of the witness for the staking tx
                      output.
                    items:
                      properties:
                        adaptor_sigs:
                          items:
                            format: byte
                            type: string
                          title: >-
                            adaptor_sigs is a list of adaptor signatures, each
                            encrypted by a restaked

                            BTC finality provider's public key
                          type: array
                        cov_pk:
                          format: byte
                          title: >-
                            cov_pk is the public key of the covenant emulator,
                            used as the public key

                            of the adaptor signature
                          type: string
                      title: >-
                        CovenantAdaptorSignatures is a list adaptor signatures
                        signed by the

                        covenant with different finality provider's public keys
                        as encryption keys
                      type: object
                    type: array
                  covenant_unbonding_sig_list:
                    items:
                      properties:
                        pk:
                          format: byte
                          type: string
                        sig:
                          format: byte
                          type: string
                      title: >-
                        SignatureInfo is a BIP-340 signature together with its
                        signer's BIP-340 PK
                      type: object
                    title: >-
                      covenant_unbonding_sig_list is the list of signatures on
                      the unbonding tx

                      by covenant members
                    type: array
                  delegator_slashing_sig_hex:
                    description: >-
                      delegator_slashing_sig is the signature on the slashing tx

                      by the delegator (i.e., SK corresponding to btc_pk).

                      It will be a part of the witness for the unbonding tx
                      output.

                      The delegator slashing sig as string hex.
                    type: string
                  delegator_unbonding_info_response:
                    properties:
                      spend_stake_tx_hex:
                        title: >-
                          spend_stake_tx_hex is the transaction which spent the
                          staking output. It is

                          filled only if the spend_stake_tx_hex is different
                          than the

                          unbonding_tx_hex
                        type: string
                    title: >-
                      btc_undelegation_info contains all necessary info about
                      the transaction

                      which spent the staking output
                    type: object
                  slashing_tx_hex:
                    title: slashingTxHex is the hex string of slashing tx
                    type: string
                  unbonding_tx_hex:
                    description: >-
                      unbonding_tx is the transaction which will transfer the
                      funds from staking

                      output to unbonding output. Unbonding output will usually
                      have lower

                      timelock than staking output. The unbonding tx as string
                      hex.
                    type: string
                title: >-
                  BTCUndelegationResponse provides all necessary info about the
                  undeleagation
                type: object
            type: object
          type: array
      type: object
    babylon.btcstaking.v1.BTCSigType:
      default: BIP340
      description: >-
        - BIP340: BIP340 means the btc_sig will follow the BIP-340 encoding
         - BIP322: BIP322 means the btc_sig will follow the BIP-322 encoding
         - ECDSA: ECDSA means the btc_sig will follow the ECDSA encoding
        ref:
        https://github.com/okx/js-wallet-sdk/blob/a57c2acbe6ce917c0aa4e951d96c4e562ad58444/packages/coin-bitcoin/src/BtcWallet.ts#L331
      enum:
        - BIP340
        - BIP322
        - ECDSA
      title: BTCSigType indicates the type of btc_sig in a pop
      type: string
    babylon.btcstaking.v1.BTCUndelegationResponse:
      properties:
        covenant_slashing_sigs:
          description: |-
            covenant_slashing_sigs is a list of adaptor signatures on the
            unbonding slashing tx by each covenant member
            It will be a part of the witness for the staking tx output.
          items:
            properties:
              adaptor_sigs:
                items:
                  format: byte
                  type: string
                title: >-
                  adaptor_sigs is a list of adaptor signatures, each encrypted
                  by a restaked

                  BTC finality provider's public key
                type: array
              cov_pk:
                format: byte
                title: >-
                  cov_pk is the public key of the covenant emulator, used as the
                  public key

                  of the adaptor signature
                type: string
            title: >-
              CovenantAdaptorSignatures is a list adaptor signatures signed by
              the

              covenant with different finality provider's public keys as
              encryption keys
            type: object
          type: array
        covenant_unbonding_sig_list:
          items:
            properties:
              pk:
                format: byte
                type: string
              sig:
                format: byte
                type: string
            title: >-
              SignatureInfo is a BIP-340 signature together with its signer's
              BIP-340 PK
            type: object
          title: >-
            covenant_unbonding_sig_list is the list of signatures on the
            unbonding tx

            by covenant members
          type: array
        delegator_slashing_sig_hex:
          description: |-
            delegator_slashing_sig is the signature on the slashing tx
            by the delegator (i.e., SK corresponding to btc_pk).
            It will be a part of the witness for the unbonding tx output.
            The delegator slashing sig as string hex.
          type: string
        delegator_unbonding_info_response:
          properties:
            spend_stake_tx_hex:
              title: >-
                spend_stake_tx_hex is the transaction which spent the staking
                output. It is

                filled only if the spend_stake_tx_hex is different than the

                unbonding_tx_hex
              type: string
          title: >-
            btc_undelegation_info contains all necessary info about the
            transaction

            which spent the staking output
          type: object
        slashing_tx_hex:
          title: slashingTxHex is the hex string of slashing tx
          type: string
        unbonding_tx_hex:
          description: >-
            unbonding_tx is the transaction which will transfer the funds from
            staking

            output to unbonding output. Unbonding output will usually have lower

            timelock than staking output. The unbonding tx as string hex.
          type: string
      title: >-
        BTCUndelegationResponse provides all necessary info about the
        undeleagation
      type: object
    babylon.btcstaking.v1.CommissionInfo:
      description: |-
        CommissionInfo defines the information related to the commission of
        a finality provider.
      properties:
        max_change_rate:
          description: >-
            max_change_rate defines the maximum daily increase of the validator
            commission, as a fraction.
          type: string
        max_rate:
          description: >-
            max_rate defines the maximum commission rate which validator can
            ever charge, as a fraction.
          type: string
        update_time:
          description: update_time is the last time the commission rate was changed.
          format: date-time
          type: string
      type: object
    babylon.btcstaking.v1.CovenantAdaptorSignatures:
      properties:
        adaptor_sigs:
          items:
            format: byte
            type: string
          title: >-
            adaptor_sigs is a list of adaptor signatures, each encrypted by a
            restaked

            BTC finality provider's public key
          type: array
        cov_pk:
          format: byte
          title: >-
            cov_pk is the public key of the covenant emulator, used as the
            public key

            of the adaptor signature
          type: string
      title: >-
        CovenantAdaptorSignatures is a list adaptor signatures signed by the

        covenant with different finality provider's public keys as encryption
        keys
      type: object
    babylon.btcstaking.v1.DelegatorUnbondingInfoResponse:
      properties:
        spend_stake_tx_hex:
          title: >-
            spend_stake_tx_hex is the transaction which spent the staking
            output. It is

            filled only if the spend_stake_tx_hex is different than the

            unbonding_tx_hex
          type: string
      title: >-
        DelegatorUnbondingInfoResponse provides all necessary info about
        transaction

        which spent the staking output
      type: object
    babylon.btcstaking.v1.FinalityProviderResponse:
      description: |-
        FinalityProviderResponse defines a finality provider with voting power
        information.
      properties:
        addr:
          description: addr is the address to receive commission from delegations.
          type: string
        btc_pk:
          format: byte
          title: |-
            btc_pk is the Bitcoin secp256k1 PK of this finality provider
            the PK follows encoding in BIP-340 spec
          type: string
        commission:
          description: commission defines the commission rate of the finality provider.
          type: string
        commission_info:
          description: >-
            commission_info contains information details of the finality
            provider

            commission.
          properties:
            max_change_rate:
              description: >-
                max_change_rate defines the maximum daily increase of the
                validator commission, as a fraction.
              type: string
            max_rate:
              description: >-
                max_rate defines the maximum commission rate which validator can
                ever charge, as a fraction.
              type: string
            update_time:
              description: update_time is the last time the commission rate was changed.
              format: date-time
              type: string
          type: object
        consumer_id:
          description: >-
            consumer_id is the ID of the consumer the finality provider is
            operating

            on. If it's missing / empty, it's assumed the finality provider is

            operating in the Babylon chain.
          type: string
        description:
          description: description defines the description terms for the finality provider.
          properties:
            details:
              description: details define other optional details.
              type: string
            identity:
              description: >-
                identity defines an optional identity signature (ex. UPort or
                Keybase).
              type: string
            moniker:
              description: moniker defines a human-readable name for the validator.
              type: string
            security_contact:
              description: security_contact defines an optional email for security contact.
              type: string
            website:
              description: website defines an optional website link.
              type: string
          type: object
        height:
          format: uint64
          title: height is the queried Babylon height
          type: string
        highest_voted_height:
          format: int64
          title: |-
            highest_voted_height is the highest height for which the
            finality provider has voted
          type: integer
        jailed:
          title: jailed defines whether the finality provider is jailed
          type: boolean
        pop:
          description: |-
            pop is the proof of possession of the BTC_PK by the fp addr.
            Essentially is the signature where the BTC SK sigs the fp addr.
          properties:
            btc_sig:
              format: byte
              title: >-
                btc_sig is the signature generated via sign(sk_btc,
                babylon_staker_address)

                the signature follows encoding in either BIP-340 spec or BIP-322
                spec
              type: string
            btc_sig_type:
              default: BIP340
              description: >-
                - BIP340: BIP340 means the btc_sig will follow the BIP-340
                encoding
                 - BIP322: BIP322 means the btc_sig will follow the BIP-322 encoding
                 - ECDSA: ECDSA means the btc_sig will follow the ECDSA encoding
                ref:
                https://github.com/okx/js-wallet-sdk/blob/a57c2acbe6ce917c0aa4e951d96c4e562ad58444/packages/coin-bitcoin/src/BtcWallet.ts#L331
              enum:
                - BIP340
                - BIP322
                - ECDSA
              title: btc_sig_type indicates the type of btc_sig in the pop
              type: string
          title: |-
            ProofOfPossessionBTC is the proof of possession that a Babylon
            address and a Bitcoin secp256k1 secret key are held by the same
            person
          type: object
        slashed_babylon_height:
          format: uint64
          title: |-
            slashed_babylon_height indicates the Babylon height when
            the finality provider is slashed.
            if it's 0 then the finality provider is not slashed
          type: string
        slashed_btc_height:
          format: int64
          title: |-
            slashed_btc_height indicates the BTC height when
            the finality provider is slashed.
            if it's 0 then the finality provider is not slashed
          type: integer
      type: object
    babylon.btcstaking.v1.Params:
      description: Params defines the parameters for the module.
      properties:
        allow_list_expiration_height:
          format: uint64
          title: >-
            allow_list_expiration_height is the height at which the allow list
            expires

            i.e all staking transactions are allowed to enter Babylon chain
            afterwards

            setting it to 0 means allow list is disabled
          type: string
        btc_activation_height:
          format: int64
          title: >-
            btc_activation_height is the btc height from which parameters are
            activated

            (inclusive)
          type: integer
        covenant_pks:
          items:
            format: byte
            type: string
          title: >-
            PARAMETERS COVERING STAKING

            covenant_pks is the list of public keys held by the covenant
            committee

            each PK follows encoding in BIP-340 spec on Bitcoin
          type: array
        covenant_quorum:
          format: int64
          title: >-
            covenant_quorum is the minimum number of signatures needed for the
            covenant

            multisignature
          type: integer
        delegation_creation_base_gas_fee:
          format: uint64
          title: base gas fee for delegation creation
          type: string
        max_staking_time_blocks:
          format: int64
          title: >-
            max_staking_time_blocks is the maximum lock time time specified in
            staking

            output script
          type: integer
        max_staking_value_sat:
          format: int64
          title: >-
            max_staking_value_sat is the maximum of satoshis locked in staking
            output
          type: string
        min_commission_rate:
          title: >-
            PARAMETERS COVERING FINALITY PROVIDERS

            min_commission_rate is the chain-wide minimum commission rate that a

            finality provider can charge their delegators expressed as a decimal
            (e.g.,

            0.5 for 50%). Maximal precion is 2 decimal places
          type: string
        min_slashing_tx_fee_sat:
          format: int64
          title: |-
            min_slashing_tx_fee_sat is the minimum amount of tx fee (quantified
            in Satoshi) needed for the pre-signed slashing tx. It covers both:
            staking slashing transaction and unbonding slashing transaction
          type: string
        min_staking_time_blocks:
          format: int64
          title: >-
            min_staking_time is the minimum lock time specified in staking
            output

            script
          type: integer
        min_staking_value_sat:
          format: int64
          title: >-
            min_staking_value_sat is the minimum of satoshis locked in staking
            output
          type: string
        slashing_pk_script:
          format: byte
          title: >-
            PARAMETERS COVERING SLASHING

            slashing_pk_script is the pk_script expected in slashing output ie.
            the

            first output of slashing transaction
          type: string
        slashing_rate:
          title: >-
            slashing_rate determines the portion of the staked amount to be
            slashed,

            expressed as a decimal (e.g., 0.5 for 50%). Maximal precion is 2
            decimal

            places
          type: string
        unbonding_fee_sat:
          format: int64
          title: unbonding_fee exact fee required for unbonding transaction
          type: string
        unbonding_time_blocks:
          format: int64
          title: >-
            PARAMETERS COVERING UNBONDING

            unbonding_time is the exact unbonding time required from unbonding

            transaction it must be larger than `checkpoint_finalization_timeout`
            from

            `btccheckpoint` module
          type: integer
      type: object
    babylon.btcstaking.v1.ProofOfPossessionBTC:
      properties:
        btc_sig:
          format: byte
          title: >-
            btc_sig is the signature generated via sign(sk_btc,
            babylon_staker_address)

            the signature follows encoding in either BIP-340 spec or BIP-322
            spec
          type: string
        btc_sig_type:
          default: BIP340
          description: >-
            - BIP340: BIP340 means the btc_sig will follow the BIP-340 encoding
             - BIP322: BIP322 means the btc_sig will follow the BIP-322 encoding
             - ECDSA: ECDSA means the btc_sig will follow the ECDSA encoding
            ref:
            https://github.com/okx/js-wallet-sdk/blob/a57c2acbe6ce917c0aa4e951d96c4e562ad58444/packages/coin-bitcoin/src/BtcWallet.ts#L331
          enum:
            - BIP340
            - BIP322
            - ECDSA
          title: btc_sig_type indicates the type of btc_sig in the pop
          type: string
      title: |-
        ProofOfPossessionBTC is the proof of possession that a Babylon
        address and a Bitcoin secp256k1 secret key are held by the same
        person
      type: object
    babylon.btcstaking.v1.QueryBTCDelegationResponse:
      properties:
        btc_delegation:
          description: >-
            BTCDelegation represents the client needed information of an
            BTCDelegation.
          properties:
            active:
              title: whether this delegation is active
              type: boolean
            btc_pk:
              format: byte
              title: |-
                btc_pk is the Bitcoin secp256k1 PK of this BTC delegation
                the PK follows encoding in BIP-340 spec
              type: string
            covenant_sigs:
              description: |-
                covenant_sigs is a list of adaptor signatures on the slashing tx
                by each covenant member
                It will be a part of the witness for the staking tx output.
              items:
                properties:
                  adaptor_sigs:
                    items:
                      format: byte
                      type: string
                    title: >-
                      adaptor_sigs is a list of adaptor signatures, each
                      encrypted by a restaked

                      BTC finality provider's public key
                    type: array
                  cov_pk:
                    format: byte
                    title: >-
                      cov_pk is the public key of the covenant emulator, used as
                      the public key

                      of the adaptor signature
                    type: string
                title: >-
                  CovenantAdaptorSignatures is a list adaptor signatures signed
                  by the

                  covenant with different finality provider's public keys as
                  encryption keys
                type: object
              type: array
            delegator_slash_sig_hex:
              description: >-
                delegator_slash_sig_hex is the signature on the slashing tx

                by the delegator (i.e., SK corresponding to btc_pk) as string
                hex.

                It will be a part of the witness for the staking tx output.
              type: string
            end_height:
              format: int64
              title: |-
                end_height is the end height of the BTC delegation
                it is the end BTC height of the timelock - w
              type: integer
            fp_btc_pk_list:
              items:
                format: byte
                type: string
              title: >-
                fp_btc_pk_list is the list of BIP-340 PKs of the finality
                providers that

                this BTC delegation delegates to
              type: array
            params_version:
              format: int64
              title: params version used to validate delegation
              type: integer
            slashing_tx_hex:
              title: slashing_tx_hex is the hex string of slashing tx
              type: string
            staker_addr:
              description: >-
                staker_addr is the address to receive rewards from BTC
                delegation.
              type: string
            staking_output_idx:
              format: int64
              title: >-
                staking_output_idx is the index of the staking output in the
                staking tx
              type: integer
            staking_time:
              format: int64
              title: >-
                staking_time is the number of blocks for which the delegation is
                locked on

                BTC chain
              type: integer
            staking_tx_hex:
              title: staking_tx_hex is the hex string of staking tx
              type: string
            start_height:
              format: int64
              title: |-
                start_height is the start BTC height of the BTC delegation
                it is the start BTC height of the timelock
              type: integer
            status_desc:
              description: descriptive status of current delegation.
              type: string
            total_sat:
              format: uint64
              title: |-
                total_sat is the total amount of BTC stakes in this delegation
                quantified in satoshi
              type: string
            unbonding_time:
              format: int64
              title: >-
                unbonding_time used in unbonding output timelock path and in
                slashing

                transactions change outputs
              type: integer
            undelegation_response:
              description: >-
                undelegation_response is the undelegation info of this
                delegation.
              properties:
                covenant_slashing_sigs:
                  description: >-
                    covenant_slashing_sigs is a list of adaptor signatures on
                    the

                    unbonding slashing tx by each covenant member

                    It will be a part of the witness for the staking tx output.
                  items:
                    properties:
                      adaptor_sigs:
                        items:
                          format: byte
                          type: string
                        title: >-
                          adaptor_sigs is a list of adaptor signatures, each
                          encrypted by a restaked

                          BTC finality provider's public key
                        type: array
                      cov_pk:
                        format: byte
                        title: >-
                          cov_pk is the public key of the covenant emulator,
                          used as the public key

                          of the adaptor signature
                        type: string
                    title: >-
                      CovenantAdaptorSignatures is a list adaptor signatures
                      signed by the

                      covenant with different finality provider's public keys as
                      encryption keys
                    type: object
                  type: array
                covenant_unbonding_sig_list:
                  items:
                    properties:
                      pk:
                        format: byte
                        type: string
                      sig:
                        format: byte
                        type: string
                    title: >-
                      SignatureInfo is a BIP-340 signature together with its
                      signer's BIP-340 PK
                    type: object
                  title: >-
                    covenant_unbonding_sig_list is the list of signatures on the
                    unbonding tx

                    by covenant members
                  type: array
                delegator_slashing_sig_hex:
                  description: >-
                    delegator_slashing_sig is the signature on the slashing tx

                    by the delegator (i.e., SK corresponding to btc_pk).

                    It will be a part of the witness for the unbonding tx
                    output.

                    The delegator slashing sig as string hex.
                  type: string
                delegator_unbonding_info_response:
                  properties:
                    spend_stake_tx_hex:
                      title: >-
                        spend_stake_tx_hex is the transaction which spent the
                        staking output. It is

                        filled only if the spend_stake_tx_hex is different than
                        the

                        unbonding_tx_hex
                      type: string
                  title: >-
                    btc_undelegation_info contains all necessary info about the
                    transaction

                    which spent the staking output
                  type: object
                slashing_tx_hex:
                  title: slashingTxHex is the hex string of slashing tx
                  type: string
                unbonding_tx_hex:
                  description: >-
                    unbonding_tx is the transaction which will transfer the
                    funds from staking

                    output to unbonding output. Unbonding output will usually
                    have lower

                    timelock than staking output. The unbonding tx as string
                    hex.
                  type: string
              title: >-
                BTCUndelegationResponse provides all necessary info about the
                undeleagation
              type: object
          type: object
      title: |-
        QueryBTCDelegationResponse is response type matching
        QueryBTCDelegationRequest and containing BTC delegation information
      type: object
    babylon.btcstaking.v1.QueryBTCDelegationsResponse:
      description: |-
        QueryBTCDelegationsResponse is the response type for the
        Query/BTCDelegations RPC method.
      properties:
        btc_delegations:
          items:
            description: >-
              BTCDelegationResponse is the client needed information from a
              BTCDelegation

              with the current status based on parameters.
            properties:
              active:
                title: whether this delegation is active
                type: boolean
              btc_pk:
                format: byte
                title: |-
                  btc_pk is the Bitcoin secp256k1 PK of this BTC delegation
                  the PK follows encoding in BIP-340 spec
                type: string
              covenant_sigs:
                description: >-
                  covenant_sigs is a list of adaptor signatures on the slashing
                  tx

                  by each covenant member

                  It will be a part of the witness for the staking tx output.
                items:
                  properties:
                    adaptor_sigs:
                      items:
                        format: byte
                        type: string
                      title: >-
                        adaptor_sigs is a list of adaptor signatures, each
                        encrypted by a restaked

                        BTC finality provider's public key
                      type: array
                    cov_pk:
                      format: byte
                      title: >-
                        cov_pk is the public key of the covenant emulator, used
                        as the public key

                        of the adaptor signature
                      type: string
                  title: >-
                    CovenantAdaptorSignatures is a list adaptor signatures
                    signed by the

                    covenant with different finality provider's public keys as
                    encryption keys
                  type: object
                type: array
              delegator_slash_sig_hex:
                description: >-
                  delegator_slash_sig_hex is the signature on the slashing tx

                  by the delegator (i.e., SK corresponding to btc_pk) as string
                  hex.

                  It will be a part of the witness for the staking tx output.
                type: string
              end_height:
                format: int64
                title: |-
                  end_height is the end height of the BTC delegation
                  it is the end BTC height of the timelock - w
                type: integer
              fp_btc_pk_list:
                items:
                  format: byte
                  type: string
                title: >-
                  fp_btc_pk_list is the list of BIP-340 PKs of the finality
                  providers that

                  this BTC delegation delegates to
                type: array
              params_version:
                format: int64
                title: params version used to validate delegation
                type: integer
              slashing_tx_hex:
                title: slashing_tx_hex is the hex string of slashing tx
                type: string
              staker_addr:
                description: >-
                  staker_addr is the address to receive rewards from BTC
                  delegation.
                type: string
              staking_output_idx:
                format: int64
                title: >-
                  staking_output_idx is the index of the staking output in the
                  staking tx
                type: integer
              staking_time:
                format: int64
                title: >-
                  staking_time is the number of blocks for which the delegation
                  is locked on

                  BTC chain
                type: integer
              staking_tx_hex:
                title: staking_tx_hex is the hex string of staking tx
                type: string
              start_height:
                format: int64
                title: |-
                  start_height is the start BTC height of the BTC delegation
                  it is the start BTC height of the timelock
                type: integer
              status_desc:
                description: descriptive status of current delegation.
                type: string
              total_sat:
                format: uint64
                title: |-
                  total_sat is the total amount of BTC stakes in this delegation
                  quantified in satoshi
                type: string
              unbonding_time:
                format: int64
                title: >-
                  unbonding_time used in unbonding output timelock path and in
                  slashing

                  transactions change outputs
                type: integer
              undelegation_response:
                description: >-
                  undelegation_response is the undelegation info of this
                  delegation.
                properties:
                  covenant_slashing_sigs:
                    description: >-
                      covenant_slashing_sigs is a list of adaptor signatures on
                      the

                      unbonding slashing tx by each covenant member

                      It will be a part of the witness for the staking tx
                      output.
                    items:
                      properties:
                        adaptor_sigs:
                          items:
                            format: byte
                            type: string
                          title: >-
                            adaptor_sigs is a list of adaptor signatures, each
                            encrypted by a restaked

                            BTC finality provider's public key
                          type: array
                        cov_pk:
                          format: byte
                          title: >-
                            cov_pk is the public key of the covenant emulator,
                            used as the public key

                            of the adaptor signature
                          type: string
                      title: >-
                        CovenantAdaptorSignatures is a list adaptor signatures
                        signed by the

                        covenant with different finality provider's public keys
                        as encryption keys
                      type: object
                    type: array
                  covenant_unbonding_sig_list:
                    items:
                      properties:
                        pk:
                          format: byte
                          type: string
                        sig:
                          format: byte
                          type: string
                      title: >-
                        SignatureInfo is a BIP-340 signature together with its
                        signer's BIP-340 PK
                      type: object
                    title: >-
                      covenant_unbonding_sig_list is the list of signatures on
                      the unbonding tx

                      by covenant members
                    type: array
                  delegator_slashing_sig_hex:
                    description: >-
                      delegator_slashing_sig is the signature on the slashing tx

                      by the delegator (i.e., SK corresponding to btc_pk).

                      It will be a part of the witness for the unbonding tx
                      output.

                      The delegator slashing sig as string hex.
                    type: string
                  delegator_unbonding_info_response:
                    properties:
                      spend_stake_tx_hex:
                        title: >-
                          spend_stake_tx_hex is the transaction which spent the
                          staking output. It is

                          filled only if the spend_stake_tx_hex is different
                          than the

                          unbonding_tx_hex
                        type: string
                    title: >-
                      btc_undelegation_info contains all necessary info about
                      the transaction

                      which spent the staking output
                    type: object
                  slashing_tx_hex:
                    title: slashingTxHex is the hex string of slashing tx
                    type: string
                  unbonding_tx_hex:
                    description: >-
                      unbonding_tx is the transaction which will transfer the
                      funds from staking

                      output to unbonding output. Unbonding output will usually
                      have lower

                      timelock than staking output. The unbonding tx as string
                      hex.
                    type: string
                title: >-
                  BTCUndelegationResponse provides all necessary info about the
                  undeleagation
                type: object
            type: object
          title: >-
            btc_delegations contains all the queried BTC delegations under the
            given

            status
          type: array
        pagination:
          description: pagination defines the pagination in the response.
          properties:
            next_key:
              description: |-
                next_key is the key to be passed to PageRequest.key to
                query the next page most efficiently. It will be empty if
                there are no more results.
              format: byte
              type: string
            total:
              format: uint64
              title: >-
                total is total number of results available if
                PageRequest.count_total

                was set, its value is undefined otherwise
              type: string
          type: object
      type: object
    babylon.btcstaking.v1.QueryFinalityProviderDelegationsResponse:
      description: |-
        QueryFinalityProviderDelegationsResponse is the response type for the
        Query/FinalityProviderDelegations RPC method.
      properties:
        btc_delegator_delegations:
          description: btc_delegator_delegations contains all the queried BTC delegations.
          items:
            description: >-
              BTCDelegatorDelegationsResponse is a collection of BTC delegations
              responses

              from the same delegator.
            properties:
              dels:
                items:
                  description: >-
                    BTCDelegationResponse is the client needed information from
                    a BTCDelegation

                    with the current status based on parameters.
                  properties:
                    active:
                      title: whether this delegation is active
                      type: boolean
                    btc_pk:
                      format: byte
                      title: >-
                        btc_pk is the Bitcoin secp256k1 PK of this BTC
                        delegation

                        the PK follows encoding in BIP-340 spec
                      type: string
                    covenant_sigs:
                      description: >-
                        covenant_sigs is a list of adaptor signatures on the
                        slashing tx

                        by each covenant member

                        It will be a part of the witness for the staking tx
                        output.
                      items:
                        properties:
                          adaptor_sigs:
                            items:
                              format: byte
                              type: string
                            title: >-
                              adaptor_sigs is a list of adaptor signatures, each
                              encrypted by a restaked

                              BTC finality provider's public key
                            type: array
                          cov_pk:
                            format: byte
                            title: >-
                              cov_pk is the public key of the covenant emulator,
                              used as the public key

                              of the adaptor signature
                            type: string
                        title: >-
                          CovenantAdaptorSignatures is a list adaptor signatures
                          signed by the

                          covenant with different finality provider's public
                          keys as encryption keys
                        type: object
                      type: array
                    delegator_slash_sig_hex:
                      description: >-
                        delegator_slash_sig_hex is the signature on the slashing
                        tx

                        by the delegator (i.e., SK corresponding to btc_pk) as
                        string hex.

                        It will be a part of the witness for the staking tx
                        output.
                      type: string
                    end_height:
                      format: int64
                      title: |-
                        end_height is the end height of the BTC delegation
                        it is the end BTC height of the timelock - w
                      type: integer
                    fp_btc_pk_list:
                      items:
                        format: byte
                        type: string
                      title: >-
                        fp_btc_pk_list is the list of BIP-340 PKs of the
                        finality providers that

                        this BTC delegation delegates to
                      type: array
                    params_version:
                      format: int64
                      title: params version used to validate delegation
                      type: integer
                    slashing_tx_hex:
                      title: slashing_tx_hex is the hex string of slashing tx
                      type: string
                    staker_addr:
                      description: >-
                        staker_addr is the address to receive rewards from BTC
                        delegation.
                      type: string
                    staking_output_idx:
                      format: int64
                      title: >-
                        staking_output_idx is the index of the staking output in
                        the staking tx
                      type: integer
                    staking_time:
                      format: int64
                      title: >-
                        staking_time is the number of blocks for which the
                        delegation is locked on

                        BTC chain
                      type: integer
                    staking_tx_hex:
                      title: staking_tx_hex is the hex string of staking tx
                      type: string
                    start_height:
                      format: int64
                      title: >-
                        start_height is the start BTC height of the BTC
                        delegation

                        it is the start BTC height of the timelock
                      type: integer
                    status_desc:
                      description: descriptive status of current delegation.
                      type: string
                    total_sat:
                      format: uint64
                      title: >-
                        total_sat is the total amount of BTC stakes in this
                        delegation

                        quantified in satoshi
                      type: string
                    unbonding_time:
                      format: int64
                      title: >-
                        unbonding_time used in unbonding output timelock path
                        and in slashing

                        transactions change outputs
                      type: integer
                    undelegation_response:
                      description: >-
                        undelegation_response is the undelegation info of this
                        delegation.
                      properties:
                        covenant_slashing_sigs:
                          description: >-
                            covenant_slashing_sigs is a list of adaptor
                            signatures on the

                            unbonding slashing tx by each covenant member

                            It will be a part of the witness for the staking tx
                            output.
                          items:
                            properties:
                              adaptor_sigs:
                                items:
                                  format: byte
                                  type: string
                                title: >-
                                  adaptor_sigs is a list of adaptor signatures,
                                  each encrypted by a restaked

                                  BTC finality provider's public key
                                type: array
                              cov_pk:
                                format: byte
                                title: >-
                                  cov_pk is the public key of the covenant
                                  emulator, used as the public key

                                  of the adaptor signature
                                type: string
                            title: >-
                              CovenantAdaptorSignatures is a list adaptor
                              signatures signed by the

                              covenant with different finality provider's public
                              keys as encryption keys
                            type: object
                          type: array
                        covenant_unbonding_sig_list:
                          items:
                            properties:
                              pk:
                                format: byte
                                type: string
                              sig:
                                format: byte
                                type: string
                            title: >-
                              SignatureInfo is a BIP-340 signature together with
                              its signer's BIP-340 PK
                            type: object
                          title: >-
                            covenant_unbonding_sig_list is the list of
                            signatures on the unbonding tx

                            by covenant members
                          type: array
                        delegator_slashing_sig_hex:
                          description: >-
                            delegator_slashing_sig is the signature on the
                            slashing tx

                            by the delegator (i.e., SK corresponding to btc_pk).

                            It will be a part of the witness for the unbonding
                            tx output.

                            The delegator slashing sig as string hex.
                          type: string
                        delegator_unbonding_info_response:
                          properties:
                            spend_stake_tx_hex:
                              title: >-
                                spend_stake_tx_hex is the transaction which
                                spent the staking output. It is

                                filled only if the spend_stake_tx_hex is
                                different than the

                                unbonding_tx_hex
                              type: string
                          title: >-
                            btc_undelegation_info contains all necessary info
                            about the transaction

                            which spent the staking output
                          type: object
                        slashing_tx_hex:
                          title: slashingTxHex is the hex string of slashing tx
                          type: string
                        unbonding_tx_hex:
                          description: >-
                            unbonding_tx is the transaction which will transfer
                            the funds from staking

                            output to unbonding output. Unbonding output will
                            usually have lower

                            timelock than staking output. The unbonding tx as
                            string hex.
                          type: string
                      title: >-
                        BTCUndelegationResponse provides all necessary info
                        about the undeleagation
                      type: object
                  type: object
                type: array
            type: object
          type: array
        pagination:
          description: pagination defines the pagination in the response.
          properties:
            next_key:
              description: |-
                next_key is the key to be passed to PageRequest.key to
                query the next page most efficiently. It will be empty if
                there are no more results.
              format: byte
              type: string
            total:
              format: uint64
              title: >-
                total is total number of results available if
                PageRequest.count_total

                was set, its value is undefined otherwise
              type: string
          type: object
      type: object
    babylon.btcstaking.v1.QueryFinalityProviderResponse:
      properties:
        finality_provider:
          description: >-
            FinalityProviderResponse defines a finality provider with voting
            power

            information.
          properties:
            addr:
              description: addr is the address to receive commission from delegations.
              type: string
            btc_pk:
              format: byte
              title: |-
                btc_pk is the Bitcoin secp256k1 PK of this finality provider
                the PK follows encoding in BIP-340 spec
              type: string
            commission:
              description: commission defines the commission rate of the finality provider.
              type: string
            commission_info:
              description: >-
                commission_info contains information details of the finality
                provider

                commission.
              properties:
                max_change_rate:
                  description: >-
                    max_change_rate defines the maximum daily increase of the
                    validator commission, as a fraction.
                  type: string
                max_rate:
                  description: >-
                    max_rate defines the maximum commission rate which validator
                    can ever charge, as a fraction.
                  type: string
                update_time:
                  description: >-
                    update_time is the last time the commission rate was
                    changed.
                  format: date-time
                  type: string
              type: object
            consumer_id:
              description: >-
                consumer_id is the ID of the consumer the finality provider is
                operating

                on. If it's missing / empty, it's assumed the finality provider
                is

                operating in the Babylon chain.
              type: string
            description:
              description: >-
                description defines the description terms for the finality
                provider.
              properties:
                details:
                  description: details define other optional details.
                  type: string
                identity:
                  description: >-
                    identity defines an optional identity signature (ex. UPort
                    or Keybase).
                  type: string
                moniker:
                  description: moniker defines a human-readable name for the validator.
                  type: string
                security_contact:
                  description: >-
                    security_contact defines an optional email for security
                    contact.
                  type: string
                website:
                  description: website defines an optional website link.
                  type: string
              type: object
            height:
              format: uint64
              title: height is the queried Babylon height
              type: string
            highest_voted_height:
              format: int64
              title: |-
                highest_voted_height is the highest height for which the
                finality provider has voted
              type: integer
            jailed:
              title: jailed defines whether the finality provider is jailed
              type: boolean
            pop:
              description: |-
                pop is the proof of possession of the BTC_PK by the fp addr.
                Essentially is the signature where the BTC SK sigs the fp addr.
              properties:
                btc_sig:
                  format: byte
                  title: >-
                    btc_sig is the signature generated via sign(sk_btc,
                    babylon_staker_address)

                    the signature follows encoding in either BIP-340 spec or
                    BIP-322 spec
                  type: string
                btc_sig_type:
                  default: BIP340
                  description: >-
                    - BIP340: BIP340 means the btc_sig will follow the BIP-340
                    encoding
                     - BIP322: BIP322 means the btc_sig will follow the BIP-322 encoding
                     - ECDSA: ECDSA means the btc_sig will follow the ECDSA encoding
                    ref:
                    https://github.com/okx/js-wallet-sdk/blob/a57c2acbe6ce917c0aa4e951d96c4e562ad58444/packages/coin-bitcoin/src/BtcWallet.ts#L331
                  enum:
                    - BIP340
                    - BIP322
                    - ECDSA
                  title: btc_sig_type indicates the type of btc_sig in the pop
                  type: string
              title: |-
                ProofOfPossessionBTC is the proof of possession that a Babylon
                address and a Bitcoin secp256k1 secret key are held by the same
                person
              type: object
            slashed_babylon_height:
              format: uint64
              title: |-
                slashed_babylon_height indicates the Babylon height when
                the finality provider is slashed.
                if it's 0 then the finality provider is not slashed
              type: string
            slashed_btc_height:
              format: int64
              title: |-
                slashed_btc_height indicates the BTC height when
                the finality provider is slashed.
                if it's 0 then the finality provider is not slashed
              type: integer
          title: finality_provider contains the FinalityProvider
          type: object
      title: >-
        QueryFinalityProviderResponse contains information about a finality
        provider
      type: object
    babylon.btcstaking.v1.QueryFinalityProvidersResponse:
      description: |-
        QueryFinalityProvidersResponse is the response type for the
        Query/FinalityProviders RPC method.
      properties:
        finality_providers:
          items:
            description: >-
              FinalityProviderResponse defines a finality provider with voting
              power

              information.
            properties:
              addr:
                description: addr is the address to receive commission from delegations.
                type: string
              btc_pk:
                format: byte
                title: |-
                  btc_pk is the Bitcoin secp256k1 PK of this finality provider
                  the PK follows encoding in BIP-340 spec
                type: string
              commission:
                description: >-
                  commission defines the commission rate of the finality
                  provider.
                type: string
              commission_info:
                description: >-
                  commission_info contains information details of the finality
                  provider

                  commission.
                properties:
                  max_change_rate:
                    description: >-
                      max_change_rate defines the maximum daily increase of the
                      validator commission, as a fraction.
                    type: string
                  max_rate:
                    description: >-
                      max_rate defines the maximum commission rate which
                      validator can ever charge, as a fraction.
                    type: string
                  update_time:
                    description: >-
                      update_time is the last time the commission rate was
                      changed.
                    format: date-time
                    type: string
                type: object
              consumer_id:
                description: >-
                  consumer_id is the ID of the consumer the finality provider is
                  operating

                  on. If it's missing / empty, it's assumed the finality
                  provider is

                  operating in the Babylon chain.
                type: string
              description:
                description: >-
                  description defines the description terms for the finality
                  provider.
                properties:
                  details:
                    description: details define other optional details.
                    type: string
                  identity:
                    description: >-
                      identity defines an optional identity signature (ex. UPort
                      or Keybase).
                    type: string
                  moniker:
                    description: moniker defines a human-readable name for the validator.
                    type: string
                  security_contact:
                    description: >-
                      security_contact defines an optional email for security
                      contact.
                    type: string
                  website:
                    description: website defines an optional website link.
                    type: string
                type: object
              height:
                format: uint64
                title: height is the queried Babylon height
                type: string
              highest_voted_height:
                format: int64
                title: |-
                  highest_voted_height is the highest height for which the
                  finality provider has voted
                type: integer
              jailed:
                title: jailed defines whether the finality provider is jailed
                type: boolean
              pop:
                description: >-
                  pop is the proof of possession of the BTC_PK by the fp addr.

                  Essentially is the signature where the BTC SK sigs the fp
                  addr.
                properties:
                  btc_sig:
                    format: byte
                    title: >-
                      btc_sig is the signature generated via sign(sk_btc,
                      babylon_staker_address)

                      the signature follows encoding in either BIP-340 spec or
                      BIP-322 spec
                    type: string
                  btc_sig_type:
                    default: BIP340
                    description: >-
                      - BIP340: BIP340 means the btc_sig will follow the BIP-340
                      encoding
                       - BIP322: BIP322 means the btc_sig will follow the BIP-322 encoding
                       - ECDSA: ECDSA means the btc_sig will follow the ECDSA encoding
                      ref:
                      https://github.com/okx/js-wallet-sdk/blob/a57c2acbe6ce917c0aa4e951d96c4e562ad58444/packages/coin-bitcoin/src/BtcWallet.ts#L331
                    enum:
                      - BIP340
                      - BIP322
                      - ECDSA
                    title: btc_sig_type indicates the type of btc_sig in the pop
                    type: string
                title: >-
                  ProofOfPossessionBTC is the proof of possession that a Babylon

                  address and a Bitcoin secp256k1 secret key are held by the
                  same

                  person
                type: object
              slashed_babylon_height:
                format: uint64
                title: |-
                  slashed_babylon_height indicates the Babylon height when
                  the finality provider is slashed.
                  if it's 0 then the finality provider is not slashed
                type: string
              slashed_btc_height:
                format: int64
                title: |-
                  slashed_btc_height indicates the BTC height when
                  the finality provider is slashed.
                  if it's 0 then the finality provider is not slashed
                type: integer
            type: object
          title: finality_providers contains all the finality providers
          type: array
        pagination:
          description: pagination defines the pagination in the response.
          properties:
            next_key:
              description: |-
                next_key is the key to be passed to PageRequest.key to
                query the next page most efficiently. It will be empty if
                there are no more results.
              format: byte
              type: string
            total:
              format: uint64
              title: >-
                total is total number of results available if
                PageRequest.count_total

                was set, its value is undefined otherwise
              type: string
          type: object
      type: object
    babylon.btcstaking.v1.QueryLargestBtcReOrgResponse:
      properties:
        block_diff:
          format: int64
          title: >-
            BlockDiff is the difference of the block height of the BTC header
            Tip - the btc height

            which it was rolled back
          type: integer
        rollback_from:
          description: >-
            BTCHeaderInfoResponse is a structure that contains all relevant
            information about a

            BTC header response
             - Full header as string hex.
             - Header hash for easy retrieval as string hex.
             - Height of the header in the BTC chain.
             - Total work spent on the header. This is the sum of the work corresponding
             to the header Bits field
               and the total work of the header.
          properties:
            hash_hex:
              type: string
            header_hex:
              type: string
            height:
              format: int64
              type: integer
            work:
              description: Work is the sdkmath.Uint as string.
              type: string
          title: RollbackFrom is the latest BTC block header prior to rollback
          type: object
        rollback_to:
          description: >-
            BTCHeaderInfoResponse is a structure that contains all relevant
            information about a

            BTC header response
             - Full header as string hex.
             - Header hash for easy retrieval as string hex.
             - Height of the header in the BTC chain.
             - Total work spent on the header. This is the sum of the work corresponding
             to the header Bits field
               and the total work of the header.
          properties:
            hash_hex:
              type: string
            header_hex:
              type: string
            height:
              format: int64
              type: integer
            work:
              description: Work is the sdkmath.Uint as string.
              type: string
          title: RollbackTo is the BTC block header which we rollback to
          type: object
      title: QueryLargestBtcReOrgResponse stores the largest BTC reorg recorded
      type: object
    babylon.btcstaking.v1.QueryParamsByBTCHeightResponse:
      description: |-
        QueryParamsByBTCHeightResponse is response type for the
        Query/QueryParamsByBTCHeightResponse RPC method.
      properties:
        params:
          description: params holds all the parameters of this module.
          properties:
            allow_list_expiration_height:
              format: uint64
              title: >-
                allow_list_expiration_height is the height at which the allow
                list expires

                i.e all staking transactions are allowed to enter Babylon chain
                afterwards

                setting it to 0 means allow list is disabled
              type: string
            btc_activation_height:
              format: int64
              title: >-
                btc_activation_height is the btc height from which parameters
                are activated

                (inclusive)
              type: integer
            covenant_pks:
              items:
                format: byte
                type: string
              title: >-
                PARAMETERS COVERING STAKING

                covenant_pks is the list of public keys held by the covenant
                committee

                each PK follows encoding in BIP-340 spec on Bitcoin
              type: array
            covenant_quorum:
              format: int64
              title: >-
                covenant_quorum is the minimum number of signatures needed for
                the covenant

                multisignature
              type: integer
            delegation_creation_base_gas_fee:
              format: uint64
              title: base gas fee for delegation creation
              type: string
            max_staking_time_blocks:
              format: int64
              title: >-
                max_staking_time_blocks is the maximum lock time time specified
                in staking

                output script
              type: integer
            max_staking_value_sat:
              format: int64
              title: >-
                max_staking_value_sat is the maximum of satoshis locked in
                staking output
              type: string
            min_commission_rate:
              title: >-
                PARAMETERS COVERING FINALITY PROVIDERS

                min_commission_rate is the chain-wide minimum commission rate
                that a

                finality provider can charge their delegators expressed as a
                decimal (e.g.,

                0.5 for 50%). Maximal precion is 2 decimal places
              type: string
            min_slashing_tx_fee_sat:
              format: int64
              title: >-
                min_slashing_tx_fee_sat is the minimum amount of tx fee
                (quantified

                in Satoshi) needed for the pre-signed slashing tx. It covers
                both:

                staking slashing transaction and unbonding slashing transaction
              type: string
            min_staking_time_blocks:
              format: int64
              title: >-
                min_staking_time is the minimum lock time specified in staking
                output

                script
              type: integer
            min_staking_value_sat:
              format: int64
              title: >-
                min_staking_value_sat is the minimum of satoshis locked in
                staking output
              type: string
            slashing_pk_script:
              format: byte
              title: >-
                PARAMETERS COVERING SLASHING

                slashing_pk_script is the pk_script expected in slashing output
                ie. the

                first output of slashing transaction
              type: string
            slashing_rate:
              title: >-
                slashing_rate determines the portion of the staked amount to be
                slashed,

                expressed as a decimal (e.g., 0.5 for 50%). Maximal precion is 2
                decimal

                places
              type: string
            unbonding_fee_sat:
              format: int64
              title: unbonding_fee exact fee required for unbonding transaction
              type: string
            unbonding_time_blocks:
              format: int64
              title: >-
                PARAMETERS COVERING UNBONDING

                unbonding_time is the exact unbonding time required from
                unbonding

                transaction it must be larger than
                `checkpoint_finalization_timeout` from

                `btccheckpoint` module
              type: integer
          type: object
        version:
          format: int64
          title: version is the version of the params for the given BTC height
          type: integer
      type: object
    babylon.btcstaking.v1.QueryParamsByVersionResponse:
      description: QueryParamsResponse is response type for the Query/Params RPC method.
      properties:
        params:
          description: params holds all the parameters of this module.
          properties:
            allow_list_expiration_height:
              format: uint64
              title: >-
                allow_list_expiration_height is the height at which the allow
                list expires

                i.e all staking transactions are allowed to enter Babylon chain
                afterwards

                setting it to 0 means allow list is disabled
              type: string
            btc_activation_height:
              format: int64
              title: >-
                btc_activation_height is the btc height from which parameters
                are activated

                (inclusive)
              type: integer
            covenant_pks:
              items:
                format: byte
                type: string
              title: >-
                PARAMETERS COVERING STAKING

                covenant_pks is the list of public keys held by the covenant
                committee

                each PK follows encoding in BIP-340 spec on Bitcoin
              type: array
            covenant_quorum:
              format: int64
              title: >-
                covenant_quorum is the minimum number of signatures needed for
                the covenant

                multisignature
              type: integer
            delegation_creation_base_gas_fee:
              format: uint64
              title: base gas fee for delegation creation
              type: string
            max_staking_time_blocks:
              format: int64
              title: >-
                max_staking_time_blocks is the maximum lock time time specified
                in staking

                output script
              type: integer
            max_staking_value_sat:
              format: int64
              title: >-
                max_staking_value_sat is the maximum of satoshis locked in
                staking output
              type: string
            min_commission_rate:
              title: >-
                PARAMETERS COVERING FINALITY PROVIDERS

                min_commission_rate is the chain-wide minimum commission rate
                that a

                finality provider can charge their delegators expressed as a
                decimal (e.g.,

                0.5 for 50%). Maximal precion is 2 decimal places
              type: string
            min_slashing_tx_fee_sat:
              format: int64
              title: >-
                min_slashing_tx_fee_sat is the minimum amount of tx fee
                (quantified

                in Satoshi) needed for the pre-signed slashing tx. It covers
                both:

                staking slashing transaction and unbonding slashing transaction
              type: string
            min_staking_time_blocks:
              format: int64
              title: >-
                min_staking_time is the minimum lock time specified in staking
                output

                script
              type: integer
            min_staking_value_sat:
              format: int64
              title: >-
                min_staking_value_sat is the minimum of satoshis locked in
                staking output
              type: string
            slashing_pk_script:
              format: byte
              title: >-
                PARAMETERS COVERING SLASHING

                slashing_pk_script is the pk_script expected in slashing output
                ie. the

                first output of slashing transaction
              type: string
            slashing_rate:
              title: >-
                slashing_rate determines the portion of the staked amount to be
                slashed,

                expressed as a decimal (e.g., 0.5 for 50%). Maximal precion is 2
                decimal

                places
              type: string
            unbonding_fee_sat:
              format: int64
              title: unbonding_fee exact fee required for unbonding transaction
              type: string
            unbonding_time_blocks:
              format: int64
              title: >-
                PARAMETERS COVERING UNBONDING

                unbonding_time is the exact unbonding time required from
                unbonding

                transaction it must be larger than
                `checkpoint_finalization_timeout` from

                `btccheckpoint` module
              type: integer
          type: object
      type: object
    babylon.btcstaking.v1.QueryParamsResponse:
      description: QueryParamsResponse is response type for the Query/Params RPC method.
      properties:
        params:
          description: params holds all the parameters of this module.
          properties:
            allow_list_expiration_height:
              format: uint64
              title: >-
                allow_list_expiration_height is the height at which the allow
                list expires

                i.e all staking transactions are allowed to enter Babylon chain
                afterwards

                setting it to 0 means allow list is disabled
              type: string
            btc_activation_height:
              format: int64
              title: >-
                btc_activation_height is the btc height from which parameters
                are activated

                (inclusive)
              type: integer
            covenant_pks:
              items:
                format: byte
                type: string
              title: >-
                PARAMETERS COVERING STAKING

                covenant_pks is the list of public keys held by the covenant
                committee

                each PK follows encoding in BIP-340 spec on Bitcoin
              type: array
            covenant_quorum:
              format: int64
              title: >-
                covenant_quorum is the minimum number of signatures needed for
                the covenant

                multisignature
              type: integer
            delegation_creation_base_gas_fee:
              format: uint64
              title: base gas fee for delegation creation
              type: string
            max_staking_time_blocks:
              format: int64
              title: >-
                max_staking_time_blocks is the maximum lock time time specified
                in staking

                output script
              type: integer
            max_staking_value_sat:
              format: int64
              title: >-
                max_staking_value_sat is the maximum of satoshis locked in
                staking output
              type: string
            min_commission_rate:
              title: >-
                PARAMETERS COVERING FINALITY PROVIDERS

                min_commission_rate is the chain-wide minimum commission rate
                that a

                finality provider can charge their delegators expressed as a
                decimal (e.g.,

                0.5 for 50%). Maximal precion is 2 decimal places
              type: string
            min_slashing_tx_fee_sat:
              format: int64
              title: >-
                min_slashing_tx_fee_sat is the minimum amount of tx fee
                (quantified

                in Satoshi) needed for the pre-signed slashing tx. It covers
                both:

                staking slashing transaction and unbonding slashing transaction
              type: string
            min_staking_time_blocks:
              format: int64
              title: >-
                min_staking_time is the minimum lock time specified in staking
                output

                script
              type: integer
            min_staking_value_sat:
              format: int64
              title: >-
                min_staking_value_sat is the minimum of satoshis locked in
                staking output
              type: string
            slashing_pk_script:
              format: byte
              title: >-
                PARAMETERS COVERING SLASHING

                slashing_pk_script is the pk_script expected in slashing output
                ie. the

                first output of slashing transaction
              type: string
            slashing_rate:
              title: >-
                slashing_rate determines the portion of the staked amount to be
                slashed,

                expressed as a decimal (e.g., 0.5 for 50%). Maximal precion is 2
                decimal

                places
              type: string
            unbonding_fee_sat:
              format: int64
              title: unbonding_fee exact fee required for unbonding transaction
              type: string
            unbonding_time_blocks:
              format: int64
              title: >-
                PARAMETERS COVERING UNBONDING

                unbonding_time is the exact unbonding time required from
                unbonding

                transaction it must be larger than
                `checkpoint_finalization_timeout` from

                `btccheckpoint` module
              type: integer
          type: object
      type: object
    babylon.btcstaking.v1.QueryParamsVersionsResponse:
      description: QueryParamsVersionsResponse stores all the params with versions.
      properties:
        pagination:
          description: pagination defines the pagination in the response.
          properties:
            next_key:
              description: |-
                next_key is the key to be passed to PageRequest.key to
                query the next page most efficiently. It will be empty if
                there are no more results.
              format: byte
              type: string
            total:
              format: uint64
              title: >-
                total is total number of results available if
                PageRequest.count_total

                was set, its value is undefined otherwise
              type: string
          type: object
        params:
          description: params holds all the params with version from this module.
          items:
            properties:
              params:
                description: Params defines the parameters for the module.
                properties:
                  allow_list_expiration_height:
                    format: uint64
                    title: >-
                      allow_list_expiration_height is the height at which the
                      allow list expires

                      i.e all staking transactions are allowed to enter Babylon
                      chain afterwards

                      setting it to 0 means allow list is disabled
                    type: string
                  btc_activation_height:
                    format: int64
                    title: >-
                      btc_activation_height is the btc height from which
                      parameters are activated

                      (inclusive)
                    type: integer
                  covenant_pks:
                    items:
                      format: byte
                      type: string
                    title: >-
                      PARAMETERS COVERING STAKING

                      covenant_pks is the list of public keys held by the
                      covenant committee

                      each PK follows encoding in BIP-340 spec on Bitcoin
                    type: array
                  covenant_quorum:
                    format: int64
                    title: >-
                      covenant_quorum is the minimum number of signatures needed
                      for the covenant

                      multisignature
                    type: integer
                  delegation_creation_base_gas_fee:
                    format: uint64
                    title: base gas fee for delegation creation
                    type: string
                  max_staking_time_blocks:
                    format: int64
                    title: >-
                      max_staking_time_blocks is the maximum lock time time
                      specified in staking

                      output script
                    type: integer
                  max_staking_value_sat:
                    format: int64
                    title: >-
                      max_staking_value_sat is the maximum of satoshis locked in
                      staking output
                    type: string
                  min_commission_rate:
                    title: >-
                      PARAMETERS COVERING FINALITY PROVIDERS

                      min_commission_rate is the chain-wide minimum commission
                      rate that a

                      finality provider can charge their delegators expressed as
                      a decimal (e.g.,

                      0.5 for 50%). Maximal precion is 2 decimal places
                    type: string
                  min_slashing_tx_fee_sat:
                    format: int64
                    title: >-
                      min_slashing_tx_fee_sat is the minimum amount of tx fee
                      (quantified

                      in Satoshi) needed for the pre-signed slashing tx. It
                      covers both:

                      staking slashing transaction and unbonding slashing
                      transaction
                    type: string
                  min_staking_time_blocks:
                    format: int64
                    title: >-
                      min_staking_time is the minimum lock time specified in
                      staking output

                      script
                    type: integer
                  min_staking_value_sat:
                    format: int64
                    title: >-
                      min_staking_value_sat is the minimum of satoshis locked in
                      staking output
                    type: string
                  slashing_pk_script:
                    format: byte
                    title: >-
                      PARAMETERS COVERING SLASHING

                      slashing_pk_script is the pk_script expected in slashing
                      output ie. the

                      first output of slashing transaction
                    type: string
                  slashing_rate:
                    title: >-
                      slashing_rate determines the portion of the staked amount
                      to be slashed,

                      expressed as a decimal (e.g., 0.5 for 50%). Maximal
                      precion is 2 decimal

                      places
                    type: string
                  unbonding_fee_sat:
                    format: int64
                    title: unbonding_fee exact fee required for unbonding transaction
                    type: string
                  unbonding_time_blocks:
                    format: int64
                    title: >-
                      PARAMETERS COVERING UNBONDING

                      unbonding_time is the exact unbonding time required from
                      unbonding

                      transaction it must be larger than
                      `checkpoint_finalization_timeout` from

                      `btccheckpoint` module
                    type: integer
                title: 'NOTE: Parameters must always be provided'
                type: object
              version:
                format: int64
                title: |-
                  version of the stored parameters. Each parameters update
                  increments version number by 1
                type: integer
            title: >-
              StoredParams attach information about the version of stored
              parameters
            type: object
          type: array
      type: object
    babylon.btcstaking.v1.SignatureInfo:
      properties:
        pk:
          format: byte
          type: string
        sig:
          format: byte
          type: string
      title: >-
        SignatureInfo is a BIP-340 signature together with its signer's BIP-340
        PK
      type: object
    babylon.btcstaking.v1.StoredParams:
      properties:
        params:
          description: Params defines the parameters for the module.
          properties:
            allow_list_expiration_height:
              format: uint64
              title: >-
                allow_list_expiration_height is the height at which the allow
                list expires

                i.e all staking transactions are allowed to enter Babylon chain
                afterwards

                setting it to 0 means allow list is disabled
              type: string
            btc_activation_height:
              format: int64
              title: >-
                btc_activation_height is the btc height from which parameters
                are activated

                (inclusive)
              type: integer
            covenant_pks:
              items:
                format: byte
                type: string
              title: >-
                PARAMETERS COVERING STAKING

                covenant_pks is the list of public keys held by the covenant
                committee

                each PK follows encoding in BIP-340 spec on Bitcoin
              type: array
            covenant_quorum:
              format: int64
              title: >-
                covenant_quorum is the minimum number of signatures needed for
                the covenant

                multisignature
              type: integer
            delegation_creation_base_gas_fee:
              format: uint64
              title: base gas fee for delegation creation
              type: string
            max_staking_time_blocks:
              format: int64
              title: >-
                max_staking_time_blocks is the maximum lock time time specified
                in staking

                output script
              type: integer
            max_staking_value_sat:
              format: int64
              title: >-
                max_staking_value_sat is the maximum of satoshis locked in
                staking output
              type: string
            min_commission_rate:
              title: >-
                PARAMETERS COVERING FINALITY PROVIDERS

                min_commission_rate is the chain-wide minimum commission rate
                that a

                finality provider can charge their delegators expressed as a
                decimal (e.g.,

                0.5 for 50%). Maximal precion is 2 decimal places
              type: string
            min_slashing_tx_fee_sat:
              format: int64
              title: >-
                min_slashing_tx_fee_sat is the minimum amount of tx fee
                (quantified

                in Satoshi) needed for the pre-signed slashing tx. It covers
                both:

                staking slashing transaction and unbonding slashing transaction
              type: string
            min_staking_time_blocks:
              format: int64
              title: >-
                min_staking_time is the minimum lock time specified in staking
                output

                script
              type: integer
            min_staking_value_sat:
              format: int64
              title: >-
                min_staking_value_sat is the minimum of satoshis locked in
                staking output
              type: string
            slashing_pk_script:
              format: byte
              title: >-
                PARAMETERS COVERING SLASHING

                slashing_pk_script is the pk_script expected in slashing output
                ie. the

                first output of slashing transaction
              type: string
            slashing_rate:
              title: >-
                slashing_rate determines the portion of the staked amount to be
                slashed,

                expressed as a decimal (e.g., 0.5 for 50%). Maximal precion is 2
                decimal

                places
              type: string
            unbonding_fee_sat:
              format: int64
              title: unbonding_fee exact fee required for unbonding transaction
              type: string
            unbonding_time_blocks:
              format: int64
              title: >-
                PARAMETERS COVERING UNBONDING

                unbonding_time is the exact unbonding time required from
                unbonding

                transaction it must be larger than
                `checkpoint_finalization_timeout` from

                `btccheckpoint` module
              type: integer
          title: 'NOTE: Parameters must always be provided'
          type: object
        version:
          format: int64
          title: |-
            version of the stored parameters. Each parameters update
            increments version number by 1
          type: integer
      title: StoredParams attach information about the version of stored parameters
      type: object
    babylon.btcstkconsumer.v1.ConsumerRegisterResponse:
      properties:
        consumer_description:
          title: >-
            consumer_description is a description for the consumer (can be
            empty)
          type: string
        consumer_id:
          title: >-
            consumer_id is the ID of the consumer

            - for Cosmos SDK chains, the consumer ID will be the IBC client ID

            - for ETH L2 chains, the consumer ID will be the chain ID of the ETH
            L2
              chain
          type: string
        consumer_name:
          title: consumer_name is the name of the consumer
          type: string
        cosmos_channel_id:
          title: |-
            cosmos_channel_id is the IBC channel ID for the consumer
            set only for Cosmos integration
          type: string
        eth_l2_finality_contract_address:
          title: >-
            eth_l2_finality_contract_address is the address of the finality
            contract

            set only for ETH L2 integration
          type: string
      title: >-
        ConsumerRegisterResponse contains the information for a registered
        consumer

        The struct is used in the query responses
      type: object
    babylon.btcstkconsumer.v1.FinalityProviderResponse:
      description: >-
        FinalityProviderResponse defines a finality provider with voting power
        information.
      properties:
        addr:
          title: babylon_pk is the Babylon secp256k1 PK of this finality provider
          type: string
        btc_pk:
          format: byte
          title: |-
            btc_pk is the Bitcoin secp256k1 PK of this finality provider
            the PK follows encoding in BIP-340 spec
          type: string
        commission:
          description: commission defines the commission rate of the finality provider.
          type: string
        consumer_id:
          title: >-
            consumer_id is the consumer id this finality provider is registered
            to
          type: string
        description:
          description: description defines the description terms for the finality provider.
          properties:
            details:
              description: details define other optional details.
              type: string
            identity:
              description: >-
                identity defines an optional identity signature (ex. UPort or
                Keybase).
              type: string
            moniker:
              description: moniker defines a human-readable name for the validator.
              type: string
            security_contact:
              description: security_contact defines an optional email for security contact.
              type: string
            website:
              description: website defines an optional website link.
              type: string
          type: object
        height:
          format: uint64
          title: height is the queried Babylon height
          type: string
        pop:
          properties:
            btc_sig:
              format: byte
              title: >-
                btc_sig is the signature generated via sign(sk_btc,
                babylon_staker_address)

                the signature follows encoding in either BIP-340 spec or BIP-322
                spec
              type: string
            btc_sig_type:
              default: BIP340
              description: >-
                - BIP340: BIP340 means the btc_sig will follow the BIP-340
                encoding
                 - BIP322: BIP322 means the btc_sig will follow the BIP-322 encoding
                 - ECDSA: ECDSA means the btc_sig will follow the ECDSA encoding
                ref:
                https://github.com/okx/js-wallet-sdk/blob/a57c2acbe6ce917c0aa4e951d96c4e562ad58444/packages/coin-bitcoin/src/BtcWallet.ts#L331
              enum:
                - BIP340
                - BIP322
                - ECDSA
              title: btc_sig_type indicates the type of btc_sig in the pop
              type: string
          title: pop is the proof of possession of babylon_pk and btc_pk
          type: object
        slashed_babylon_height:
          format: uint64
          title: |-
            slashed_babylon_height indicates the Babylon height when
            the finality provider is slashed.
            if it's 0 then the finality provider is not slashed
          type: string
        slashed_btc_height:
          format: int64
          title: |-
            slashed_btc_height indicates the BTC height when
            the finality provider is slashed.
            if it's 0 then the finality provider is not slashed
          type: integer
        voting_power:
          format: uint64
          title: >-
            voting_power is the voting power of this finality provider at the
            given height
          type: string
      type: object
    babylon.btcstkconsumer.v1.Params:
      description: Params defines the parameters for the module.
      properties:
        permissioned_integration:
          description: >-
            permissioned_integration is a flag to enable permissioned
            integration, i.e.,

            requiring governance proposal to approve new integrations.
          type: boolean
      type: object
    babylon.btcstkconsumer.v1.QueryConsumerRegistryListResponse:
      properties:
        consumer_registers:
          items:
            properties:
              consumer_description:
                title: >-
                  consumer_description is a description for the consumer (can be
                  empty)
                type: string
              consumer_id:
                title: >-
                  consumer_id is the ID of the consumer

                  - for Cosmos SDK chains, the consumer ID will be the IBC
                  client ID

                  - for ETH L2 chains, the consumer ID will be the chain ID of
                  the ETH L2
                    chain
                type: string
              consumer_name:
                title: consumer_name is the name of the consumer
                type: string
              cosmos_channel_id:
                title: |-
                  cosmos_channel_id is the IBC channel ID for the consumer
                  set only for Cosmos integration
                type: string
              eth_l2_finality_contract_address:
                title: >-
                  eth_l2_finality_contract_address is the address of the
                  finality contract

                  set only for ETH L2 integration
                type: string
            title: >-
              ConsumerRegisterResponse contains the information for a registered
              consumer

              The struct is used in the query responses
            type: object
          title: >-
            consumer_registers are the registered consumers in ascending
            alphabetical order
          type: array
        pagination:
          description: |-
            PageResponse is to be embedded in gRPC response messages where the
            corresponding request message has used PageRequest.

             message SomeResponse {
                     repeated Bar results = 1;
                     PageResponse page = 2;
             }
          properties:
            next_key:
              description: |-
                next_key is the key to be passed to PageRequest.key to
                query the next page most efficiently. It will be empty if
                there are no more results.
              format: byte
              type: string
            total:
              format: uint64
              title: >-
                total is total number of results available if
                PageRequest.count_total

                was set, its value is undefined otherwise
              type: string
          title: pagination defines the pagination in the response
          type: object
      title: >-
        QueryConsumerRegistryListResponse is response type for the
        Query/ConsumerRegistryList RPC method
      type: object
    babylon.btcstkconsumer.v1.QueryConsumersRegistryResponse:
      description: >-
        QueryConsumersRegistryResponse is response type for the
        Query/ConsumersRegistry RPC method.
      properties:
        consumer_registers:
          items:
            properties:
              consumer_description:
                title: >-
                  consumer_description is a description for the consumer (can be
                  empty)
                type: string
              consumer_id:
                title: >-
                  consumer_id is the ID of the consumer

                  - for Cosmos SDK chains, the consumer ID will be the IBC
                  client ID

                  - for ETH L2 chains, the consumer ID will be the chain ID of
                  the ETH L2
                    chain
                type: string
              consumer_name:
                title: consumer_name is the name of the consumer
                type: string
              cosmos_channel_id:
                title: |-
                  cosmos_channel_id is the IBC channel ID for the consumer
                  set only for Cosmos integration
                type: string
              eth_l2_finality_contract_address:
                title: >-
                  eth_l2_finality_contract_address is the address of the
                  finality contract

                  set only for ETH L2 integration
                type: string
            title: >-
              ConsumerRegisterResponse contains the information for a registered
              consumer

              The struct is used in the query responses
            type: object
          type: array
      type: object
    babylon.btcstkconsumer.v1.QueryFinalityProviderConsumerResponse:
      properties:
        consumer_id:
          type: string
      title: >-
        QueryFinalityProviderConsumerResponse returns the CZ finality provier
        consumer id
      type: object
    babylon.btcstkconsumer.v1.QueryFinalityProviderResponse:
      properties:
        finality_provider:
          description: >-
            FinalityProviderResponse defines a finality provider with voting
            power information.
          properties:
            addr:
              title: babylon_pk is the Babylon secp256k1 PK of this finality provider
              type: string
            btc_pk:
              format: byte
              title: |-
                btc_pk is the Bitcoin secp256k1 PK of this finality provider
                the PK follows encoding in BIP-340 spec
              type: string
            commission:
              description: commission defines the commission rate of the finality provider.
              type: string
            consumer_id:
              title: >-
                consumer_id is the consumer id this finality provider is
                registered to
              type: string
            description:
              description: >-
                description defines the description terms for the finality
                provider.
              properties:
                details:
                  description: details define other optional details.
                  type: string
                identity:
                  description: >-
                    identity defines an optional identity signature (ex. UPort
                    or Keybase).
                  type: string
                moniker:
                  description: moniker defines a human-readable name for the validator.
                  type: string
                security_contact:
                  description: >-
                    security_contact defines an optional email for security
                    contact.
                  type: string
                website:
                  description: website defines an optional website link.
                  type: string
              type: object
            height:
              format: uint64
              title: height is the queried Babylon height
              type: string
            pop:
              properties:
                btc_sig:
                  format: byte
                  title: >-
                    btc_sig is the signature generated via sign(sk_btc,
                    babylon_staker_address)

                    the signature follows encoding in either BIP-340 spec or
                    BIP-322 spec
                  type: string
                btc_sig_type:
                  default: BIP340
                  description: >-
                    - BIP340: BIP340 means the btc_sig will follow the BIP-340
                    encoding
                     - BIP322: BIP322 means the btc_sig will follow the BIP-322 encoding
                     - ECDSA: ECDSA means the btc_sig will follow the ECDSA encoding
                    ref:
                    https://github.com/okx/js-wallet-sdk/blob/a57c2acbe6ce917c0aa4e951d96c4e562ad58444/packages/coin-bitcoin/src/BtcWallet.ts#L331
                  enum:
                    - BIP340
                    - BIP322
                    - ECDSA
                  title: btc_sig_type indicates the type of btc_sig in the pop
                  type: string
              title: pop is the proof of possession of babylon_pk and btc_pk
              type: object
            slashed_babylon_height:
              format: uint64
              title: |-
                slashed_babylon_height indicates the Babylon height when
                the finality provider is slashed.
                if it's 0 then the finality provider is not slashed
              type: string
            slashed_btc_height:
              format: int64
              title: |-
                slashed_btc_height indicates the BTC height when
                the finality provider is slashed.
                if it's 0 then the finality provider is not slashed
              type: integer
            voting_power:
              format: uint64
              title: >-
                voting_power is the voting power of this finality provider at
                the given height
              type: string
          title: finality_provider contains the FinalityProvider
          type: object
      title: >-
        QueryFinalityProviderResponse contains information about a finality
        provider
      type: object
    babylon.btcstkconsumer.v1.QueryFinalityProvidersResponse:
      description: |-
        QueryFinalityProvidersResponse is the response type for the
        Query/FinalityProviders RPC method.
      properties:
        finality_providers:
          items:
            description: >-
              FinalityProviderResponse defines a finality provider with voting
              power information.
            properties:
              addr:
                title: >-
                  babylon_pk is the Babylon secp256k1 PK of this finality
                  provider
                type: string
              btc_pk:
                format: byte
                title: |-
                  btc_pk is the Bitcoin secp256k1 PK of this finality provider
                  the PK follows encoding in BIP-340 spec
                type: string
              commission:
                description: >-
                  commission defines the commission rate of the finality
                  provider.
                type: string
              consumer_id:
                title: >-
                  consumer_id is the consumer id this finality provider is
                  registered to
                type: string
              description:
                description: >-
                  description defines the description terms for the finality
                  provider.
                properties:
                  details:
                    description: details define other optional details.
                    type: string
                  identity:
                    description: >-
                      identity defines an optional identity signature (ex. UPort
                      or Keybase).
                    type: string
                  moniker:
                    description: moniker defines a human-readable name for the validator.
                    type: string
                  security_contact:
                    description: >-
                      security_contact defines an optional email for security
                      contact.
                    type: string
                  website:
                    description: website defines an optional website link.
                    type: string
                type: object
              height:
                format: uint64
                title: height is the queried Babylon height
                type: string
              pop:
                properties:
                  btc_sig:
                    format: byte
                    title: >-
                      btc_sig is the signature generated via sign(sk_btc,
                      babylon_staker_address)

                      the signature follows encoding in either BIP-340 spec or
                      BIP-322 spec
                    type: string
                  btc_sig_type:
                    default: BIP340
                    description: >-
                      - BIP340: BIP340 means the btc_sig will follow the BIP-340
                      encoding
                       - BIP322: BIP322 means the btc_sig will follow the BIP-322 encoding
                       - ECDSA: ECDSA means the btc_sig will follow the ECDSA encoding
                      ref:
                      https://github.com/okx/js-wallet-sdk/blob/a57c2acbe6ce917c0aa4e951d96c4e562ad58444/packages/coin-bitcoin/src/BtcWallet.ts#L331
                    enum:
                      - BIP340
                      - BIP322
                      - ECDSA
                    title: btc_sig_type indicates the type of btc_sig in the pop
                    type: string
                title: pop is the proof of possession of babylon_pk and btc_pk
                type: object
              slashed_babylon_height:
                format: uint64
                title: |-
                  slashed_babylon_height indicates the Babylon height when
                  the finality provider is slashed.
                  if it's 0 then the finality provider is not slashed
                type: string
              slashed_btc_height:
                format: int64
                title: |-
                  slashed_btc_height indicates the BTC height when
                  the finality provider is slashed.
                  if it's 0 then the finality provider is not slashed
                type: integer
              voting_power:
                format: uint64
                title: >-
                  voting_power is the voting power of this finality provider at
                  the given height
                type: string
            type: object
          title: finality_providers contains all the finality providers
          type: array
        pagination:
          description: pagination defines the pagination in the response.
          properties:
            next_key:
              description: |-
                next_key is the key to be passed to PageRequest.key to
                query the next page most efficiently. It will be empty if
                there are no more results.
              format: byte
              type: string
            total:
              format: uint64
              title: >-
                total is total number of results available if
                PageRequest.count_total

                was set, its value is undefined otherwise
              type: string
          type: object
      type: object
    babylon.btcstkconsumer.v1.QueryParamsResponse:
      description: QueryParamsResponse is response type for the Query/Params RPC method.
      properties:
        params:
          description: params holds all the parameters of this module.
          properties:
            permissioned_integration:
              description: >-
                permissioned_integration is a flag to enable permissioned
                integration, i.e.,

                requiring governance proposal to approve new integrations.
              type: boolean
          type: object
      type: object
    babylon.checkpointing.v1.BlsPublicKeyListResponse:
      properties:
        bls_pub_key_hex:
          title: bls_pub_key is the BLS public key of the validator
          type: string
        validator_address:
          title: validator_address is the address of the validator
          type: string
        voting_power:
          format: uint64
          title: voting_power is the voting power of the validator at the given epoch
          type: string
      title: >-
        BlsPublicKeyListResponse couples validator address, voting power, and
        its bls

        public key
      type: object
    babylon.checkpointing.v1.CheckpointStateUpdateResponse:
      description: >-
        CheckpointStateUpdateResponse defines a state transition on the
        checkpoint.
      properties:
        block_height:
          format: uint64
          title: >-
            block_height is the height of the Babylon block that triggers the
            state

            update
          type: string
        block_time:
          format: date-time
          title: >-
            block_time is the timestamp in the Babylon block that triggers the
            state

            update
          type: string
        state:
          default: CKPT_STATUS_ACCUMULATING
          description: |-
            CheckpointStatus is the status of a checkpoint.

             - CKPT_STATUS_ACCUMULATING: ACCUMULATING defines a checkpoint that is awaiting for BLS signatures.
             - CKPT_STATUS_SEALED: SEALED defines a checkpoint that has accumulated sufficient BLS signatures.
             - CKPT_STATUS_SUBMITTED: SUBMITTED defines a checkpoint that is included on BTC.
             - CKPT_STATUS_CONFIRMED: CONFIRMED defines a checkpoint that is k-deep on BTC.
             - CKPT_STATUS_FINALIZED: FINALIZED defines a checkpoint that is w-deep on BTC.
          enum:
            - CKPT_STATUS_ACCUMULATING
            - CKPT_STATUS_SEALED
            - CKPT_STATUS_SUBMITTED
            - CKPT_STATUS_CONFIRMED
            - CKPT_STATUS_FINALIZED
          title: state defines the event of a state transition towards this state
          type: string
        status_desc:
          description: status_desc represents the description of status enum.
          type: string
      type: object
    babylon.checkpointing.v1.CheckpointStatus:
      default: CKPT_STATUS_ACCUMULATING
      description: |-
        CheckpointStatus is the status of a checkpoint.

         - CKPT_STATUS_ACCUMULATING: ACCUMULATING defines a checkpoint that is awaiting for BLS signatures.
         - CKPT_STATUS_SEALED: SEALED defines a checkpoint that has accumulated sufficient BLS signatures.
         - CKPT_STATUS_SUBMITTED: SUBMITTED defines a checkpoint that is included on BTC.
         - CKPT_STATUS_CONFIRMED: CONFIRMED defines a checkpoint that is k-deep on BTC.
         - CKPT_STATUS_FINALIZED: FINALIZED defines a checkpoint that is w-deep on BTC.
      enum:
        - CKPT_STATUS_ACCUMULATING
        - CKPT_STATUS_SEALED
        - CKPT_STATUS_SUBMITTED
        - CKPT_STATUS_CONFIRMED
        - CKPT_STATUS_FINALIZED
      type: string
    babylon.checkpointing.v1.QueryBlsPublicKeyListResponse:
      description: |-
        QueryBlsPublicKeyListResponse is the response type for the
        Query/BlsPublicKeys RPC method.
      properties:
        pagination:
          description: pagination defines the pagination in the response.
          properties:
            next_key:
              description: |-
                next_key is the key to be passed to PageRequest.key to
                query the next page most efficiently. It will be empty if
                there are no more results.
              format: byte
              type: string
            total:
              format: uint64
              title: >-
                total is total number of results available if
                PageRequest.count_total

                was set, its value is undefined otherwise
              type: string
          type: object
        validator_with_bls_keys:
          items:
            properties:
              bls_pub_key_hex:
                title: bls_pub_key is the BLS public key of the validator
                type: string
              validator_address:
                title: validator_address is the address of the validator
                type: string
              voting_power:
                format: uint64
                title: >-
                  voting_power is the voting power of the validator at the given
                  epoch
                type: string
            title: >-
              BlsPublicKeyListResponse couples validator address, voting power,
              and its bls

              public key
            type: object
          type: array
      type: object
    babylon.checkpointing.v1.QueryEpochStatusResponse:
      description: |-
        QueryEpochStatusResponse is the response type for the Query/EpochStatus
        RPC method.
      properties:
        status:
          default: CKPT_STATUS_ACCUMULATING
          description: |-
            CheckpointStatus is the status of a checkpoint.

             - CKPT_STATUS_ACCUMULATING: ACCUMULATING defines a checkpoint that is awaiting for BLS signatures.
             - CKPT_STATUS_SEALED: SEALED defines a checkpoint that has accumulated sufficient BLS signatures.
             - CKPT_STATUS_SUBMITTED: SUBMITTED defines a checkpoint that is included on BTC.
             - CKPT_STATUS_CONFIRMED: CONFIRMED defines a checkpoint that is k-deep on BTC.
             - CKPT_STATUS_FINALIZED: FINALIZED defines a checkpoint that is w-deep on BTC.
          enum:
            - CKPT_STATUS_ACCUMULATING
            - CKPT_STATUS_SEALED
            - CKPT_STATUS_SUBMITTED
            - CKPT_STATUS_CONFIRMED
            - CKPT_STATUS_FINALIZED
          type: string
      type: object
    babylon.checkpointing.v1.QueryLastCheckpointWithStatusResponse:
      description: |-
        QueryLastCheckpointWithStatusResponse is the response type for the
        Query/LastCheckpointWithStatus RPC method.
      properties:
        raw_checkpoint:
          properties:
            bitmap:
              format: byte
              title: >-
                bitmap defines the bitmap that indicates the signers of the BLS
                multi sig
              type: string
            block_hash_hex:
              title: |-
                block_hash_hex defines the 'BlockID.Hash', which is the hash of
                the block that individual BLS sigs are signed on as hex string
              type: string
            bls_multi_sig:
              format: byte
              title: >-
                bls_multi_sig defines the multi sig that is aggregated from
                individual BLS

                sigs
              type: string
            epoch_num:
              format: uint64
              title: epoch_num defines the epoch number the raw checkpoint is for
              type: string
          title: RawCheckpointResponse wraps the BLS multi sig with metadata
          type: object
      type: object
    babylon.checkpointing.v1.QueryRawCheckpointListResponse:
      description: |-
        QueryRawCheckpointListResponse is the response type for the
        Query/RawCheckpoints RPC method.
      properties:
        pagination:
          description: pagination defines the pagination in the response.
          properties:
            next_key:
              description: |-
                next_key is the key to be passed to PageRequest.key to
                query the next page most efficiently. It will be empty if
                there are no more results.
              format: byte
              type: string
            total:
              format: uint64
              title: >-
                total is total number of results available if
                PageRequest.count_total

                was set, its value is undefined otherwise
              type: string
          type: object
        raw_checkpoints:
          items:
            description: >-
              RawCheckpointWithMetaResponse wraps the raw checkpoint with
              metadata.
            properties:
              bls_aggr_pk:
                format: byte
                title: bls_aggr_pk defines the aggregated BLS public key
                type: string
              ckpt:
                properties:
                  bitmap:
                    format: byte
                    title: >-
                      bitmap defines the bitmap that indicates the signers of
                      the BLS multi sig
                    type: string
                  block_hash_hex:
                    title: >-
                      block_hash_hex defines the 'BlockID.Hash', which is the
                      hash of

                      the block that individual BLS sigs are signed on as hex
                      string
                    type: string
                  bls_multi_sig:
                    format: byte
                    title: >-
                      bls_multi_sig defines the multi sig that is aggregated
                      from individual BLS

                      sigs
                    type: string
                  epoch_num:
                    format: uint64
                    title: >-
                      epoch_num defines the epoch number the raw checkpoint is
                      for
                    type: string
                title: RawCheckpointResponse wraps the BLS multi sig with metadata
                type: object
              lifecycle:
                description: >-
                  lifecycle defines the lifecycle of this checkpoint, i.e., each
                  state

                  transition and the time (in both timestamp and block height)
                  of this

                  transition.
                items:
                  description: >-
                    CheckpointStateUpdateResponse defines a state transition on
                    the checkpoint.
                  properties:
                    block_height:
                      format: uint64
                      title: >-
                        block_height is the height of the Babylon block that
                        triggers the state

                        update
                      type: string
                    block_time:
                      format: date-time
                      title: >-
                        block_time is the timestamp in the Babylon block that
                        triggers the state

                        update
                      type: string
                    state:
                      default: CKPT_STATUS_ACCUMULATING
                      description: |-
                        CheckpointStatus is the status of a checkpoint.

                         - CKPT_STATUS_ACCUMULATING: ACCUMULATING defines a checkpoint that is awaiting for BLS signatures.
                         - CKPT_STATUS_SEALED: SEALED defines a checkpoint that has accumulated sufficient BLS signatures.
                         - CKPT_STATUS_SUBMITTED: SUBMITTED defines a checkpoint that is included on BTC.
                         - CKPT_STATUS_CONFIRMED: CONFIRMED defines a checkpoint that is k-deep on BTC.
                         - CKPT_STATUS_FINALIZED: FINALIZED defines a checkpoint that is w-deep on BTC.
                      enum:
                        - CKPT_STATUS_ACCUMULATING
                        - CKPT_STATUS_SEALED
                        - CKPT_STATUS_SUBMITTED
                        - CKPT_STATUS_CONFIRMED
                        - CKPT_STATUS_FINALIZED
                      title: >-
                        state defines the event of a state transition towards
                        this state
                      type: string
                    status_desc:
                      description: status_desc represents the description of status enum.
                      type: string
                  type: object
                type: array
              power_sum:
                format: uint64
                title: >-
                  power_sum defines the accumulated voting power for the
                  checkpoint
                type: string
              status:
                default: CKPT_STATUS_ACCUMULATING
                description: |-
                  CheckpointStatus is the status of a checkpoint.

                   - CKPT_STATUS_ACCUMULATING: ACCUMULATING defines a checkpoint that is awaiting for BLS signatures.
                   - CKPT_STATUS_SEALED: SEALED defines a checkpoint that has accumulated sufficient BLS signatures.
                   - CKPT_STATUS_SUBMITTED: SUBMITTED defines a checkpoint that is included on BTC.
                   - CKPT_STATUS_CONFIRMED: CONFIRMED defines a checkpoint that is k-deep on BTC.
                   - CKPT_STATUS_FINALIZED: FINALIZED defines a checkpoint that is w-deep on BTC.
                enum:
                  - CKPT_STATUS_ACCUMULATING
                  - CKPT_STATUS_SEALED
                  - CKPT_STATUS_SUBMITTED
                  - CKPT_STATUS_CONFIRMED
                  - CKPT_STATUS_FINALIZED
                title: status defines the status of the checkpoint
                type: string
              status_desc:
                description: status_desc represents the description of status enum.
                type: string
            type: object
          title: >-
            the order is going from the newest to oldest based on the epoch
            number
          type: array
      type: object
    babylon.checkpointing.v1.QueryRawCheckpointResponse:
      description: >-
        QueryRawCheckpointResponse is the response type for the
        Query/RawCheckpoint

        RPC method.
      properties:
        raw_checkpoint:
          description: >-
            RawCheckpointWithMetaResponse wraps the raw checkpoint with
            metadata.
          properties:
            bls_aggr_pk:
              format: byte
              title: bls_aggr_pk defines the aggregated BLS public key
              type: string
            ckpt:
              properties:
                bitmap:
                  format: byte
                  title: >-
                    bitmap defines the bitmap that indicates the signers of the
                    BLS multi sig
                  type: string
                block_hash_hex:
                  title: >-
                    block_hash_hex defines the 'BlockID.Hash', which is the hash
                    of

                    the block that individual BLS sigs are signed on as hex
                    string
                  type: string
                bls_multi_sig:
                  format: byte
                  title: >-
                    bls_multi_sig defines the multi sig that is aggregated from
                    individual BLS

                    sigs
                  type: string
                epoch_num:
                  format: uint64
                  title: epoch_num defines the epoch number the raw checkpoint is for
                  type: string
              title: RawCheckpointResponse wraps the BLS multi sig with metadata
              type: object
            lifecycle:
              description: >-
                lifecycle defines the lifecycle of this checkpoint, i.e., each
                state

                transition and the time (in both timestamp and block height) of
                this

                transition.
              items:
                description: >-
                  CheckpointStateUpdateResponse defines a state transition on
                  the checkpoint.
                properties:
                  block_height:
                    format: uint64
                    title: >-
                      block_height is the height of the Babylon block that
                      triggers the state

                      update
                    type: string
                  block_time:
                    format: date-time
                    title: >-
                      block_time is the timestamp in the Babylon block that
                      triggers the state

                      update
                    type: string
                  state:
                    default: CKPT_STATUS_ACCUMULATING
                    description: |-
                      CheckpointStatus is the status of a checkpoint.

                       - CKPT_STATUS_ACCUMULATING: ACCUMULATING defines a checkpoint that is awaiting for BLS signatures.
                       - CKPT_STATUS_SEALED: SEALED defines a checkpoint that has accumulated sufficient BLS signatures.
                       - CKPT_STATUS_SUBMITTED: SUBMITTED defines a checkpoint that is included on BTC.
                       - CKPT_STATUS_CONFIRMED: CONFIRMED defines a checkpoint that is k-deep on BTC.
                       - CKPT_STATUS_FINALIZED: FINALIZED defines a checkpoint that is w-deep on BTC.
                    enum:
                      - CKPT_STATUS_ACCUMULATING
                      - CKPT_STATUS_SEALED
                      - CKPT_STATUS_SUBMITTED
                      - CKPT_STATUS_CONFIRMED
                      - CKPT_STATUS_FINALIZED
                    title: >-
                      state defines the event of a state transition towards this
                      state
                    type: string
                  status_desc:
                    description: status_desc represents the description of status enum.
                    type: string
                type: object
              type: array
            power_sum:
              format: uint64
              title: >-
                power_sum defines the accumulated voting power for the
                checkpoint
              type: string
            status:
              default: CKPT_STATUS_ACCUMULATING
              description: |-
                CheckpointStatus is the status of a checkpoint.

                 - CKPT_STATUS_ACCUMULATING: ACCUMULATING defines a checkpoint that is awaiting for BLS signatures.
                 - CKPT_STATUS_SEALED: SEALED defines a checkpoint that has accumulated sufficient BLS signatures.
                 - CKPT_STATUS_SUBMITTED: SUBMITTED defines a checkpoint that is included on BTC.
                 - CKPT_STATUS_CONFIRMED: CONFIRMED defines a checkpoint that is k-deep on BTC.
                 - CKPT_STATUS_FINALIZED: FINALIZED defines a checkpoint that is w-deep on BTC.
              enum:
                - CKPT_STATUS_ACCUMULATING
                - CKPT_STATUS_SEALED
                - CKPT_STATUS_SUBMITTED
                - CKPT_STATUS_CONFIRMED
                - CKPT_STATUS_FINALIZED
              title: status defines the status of the checkpoint
              type: string
            status_desc:
              description: status_desc represents the description of status enum.
              type: string
          type: object
      type: object
    babylon.checkpointing.v1.QueryRawCheckpointsResponse:
      description: >-
        QueryRawCheckpointsResponse is the response type for the
        Query/RawCheckpoints

        RPC method.
      properties:
        pagination:
          description: pagination defines the pagination in the response.
          properties:
            next_key:
              description: |-
                next_key is the key to be passed to PageRequest.key to
                query the next page most efficiently. It will be empty if
                there are no more results.
              format: byte
              type: string
            total:
              format: uint64
              title: >-
                total is total number of results available if
                PageRequest.count_total

                was set, its value is undefined otherwise
              type: string
          type: object
        raw_checkpoints:
          items:
            description: >-
              RawCheckpointWithMetaResponse wraps the raw checkpoint with
              metadata.
            properties:
              bls_aggr_pk:
                format: byte
                title: bls_aggr_pk defines the aggregated BLS public key
                type: string
              ckpt:
                properties:
                  bitmap:
                    format: byte
                    title: >-
                      bitmap defines the bitmap that indicates the signers of
                      the BLS multi sig
                    type: string
                  block_hash_hex:
                    title: >-
                      block_hash_hex defines the 'BlockID.Hash', which is the
                      hash of

                      the block that individual BLS sigs are signed on as hex
                      string
                    type: string
                  bls_multi_sig:
                    format: byte
                    title: >-
                      bls_multi_sig defines the multi sig that is aggregated
                      from individual BLS

                      sigs
                    type: string
                  epoch_num:
                    format: uint64
                    title: >-
                      epoch_num defines the epoch number the raw checkpoint is
                      for
                    type: string
                title: RawCheckpointResponse wraps the BLS multi sig with metadata
                type: object
              lifecycle:
                description: >-
                  lifecycle defines the lifecycle of this checkpoint, i.e., each
                  state

                  transition and the time (in both timestamp and block height)
                  of this

                  transition.
                items:
                  description: >-
                    CheckpointStateUpdateResponse defines a state transition on
                    the checkpoint.
                  properties:
                    block_height:
                      format: uint64
                      title: >-
                        block_height is the height of the Babylon block that
                        triggers the state

                        update
                      type: string
                    block_time:
                      format: date-time
                      title: >-
                        block_time is the timestamp in the Babylon block that
                        triggers the state

                        update
                      type: string
                    state:
                      default: CKPT_STATUS_ACCUMULATING
                      description: |-
                        CheckpointStatus is the status of a checkpoint.

                         - CKPT_STATUS_ACCUMULATING: ACCUMULATING defines a checkpoint that is awaiting for BLS signatures.
                         - CKPT_STATUS_SEALED: SEALED defines a checkpoint that has accumulated sufficient BLS signatures.
                         - CKPT_STATUS_SUBMITTED: SUBMITTED defines a checkpoint that is included on BTC.
                         - CKPT_STATUS_CONFIRMED: CONFIRMED defines a checkpoint that is k-deep on BTC.
                         - CKPT_STATUS_FINALIZED: FINALIZED defines a checkpoint that is w-deep on BTC.
                      enum:
                        - CKPT_STATUS_ACCUMULATING
                        - CKPT_STATUS_SEALED
                        - CKPT_STATUS_SUBMITTED
                        - CKPT_STATUS_CONFIRMED
                        - CKPT_STATUS_FINALIZED
                      title: >-
                        state defines the event of a state transition towards
                        this state
                      type: string
                    status_desc:
                      description: status_desc represents the description of status enum.
                      type: string
                  type: object
                type: array
              power_sum:
                format: uint64
                title: >-
                  power_sum defines the accumulated voting power for the
                  checkpoint
                type: string
              status:
                default: CKPT_STATUS_ACCUMULATING
                description: |-
                  CheckpointStatus is the status of a checkpoint.

                   - CKPT_STATUS_ACCUMULATING: ACCUMULATING defines a checkpoint that is awaiting for BLS signatures.
                   - CKPT_STATUS_SEALED: SEALED defines a checkpoint that has accumulated sufficient BLS signatures.
                   - CKPT_STATUS_SUBMITTED: SUBMITTED defines a checkpoint that is included on BTC.
                   - CKPT_STATUS_CONFIRMED: CONFIRMED defines a checkpoint that is k-deep on BTC.
                   - CKPT_STATUS_FINALIZED: FINALIZED defines a checkpoint that is w-deep on BTC.
                enum:
                  - CKPT_STATUS_ACCUMULATING
                  - CKPT_STATUS_SEALED
                  - CKPT_STATUS_SUBMITTED
                  - CKPT_STATUS_CONFIRMED
                  - CKPT_STATUS_FINALIZED
                title: status defines the status of the checkpoint
                type: string
              status_desc:
                description: status_desc represents the description of status enum.
                type: string
            type: object
          title: >-
            the order is going from the newest to oldest based on the epoch
            number
          type: array
      type: object
    babylon.checkpointing.v1.QueryRecentEpochStatusCountResponse:
      description: |-
        QueryRecentEpochStatusCountResponse is the response type for the
        Query/EpochStatusCount RPC method.
      properties:
        epoch_count:
          format: uint64
          type: string
        status_count:
          additionalProperties:
            format: uint64
            type: string
          type: object
        tip_epoch:
          format: uint64
          type: string
      type: object
    babylon.checkpointing.v1.RawCheckpoint:
      properties:
        bitmap:
          format: byte
          title: >-
            bitmap defines the bitmap that indicates the signers of the BLS
            multi sig
          type: string
        block_hash:
          format: byte
          title: |-
            block_hash defines the 'BlockID.Hash', which is the hash of
            the block that individual BLS sigs are signed on
          type: string
        bls_multi_sig:
          format: byte
          title: >-
            bls_multi_sig defines the multi sig that is aggregated from
            individual BLS

            sigs
          type: string
        epoch_num:
          format: uint64
          title: epoch_num defines the epoch number the raw checkpoint is for
          type: string
      title: RawCheckpoint wraps the BLS multi sig with metadata
      type: object
    babylon.checkpointing.v1.RawCheckpointResponse:
      properties:
        bitmap:
          format: byte
          title: >-
            bitmap defines the bitmap that indicates the signers of the BLS
            multi sig
          type: string
        block_hash_hex:
          title: |-
            block_hash_hex defines the 'BlockID.Hash', which is the hash of
            the block that individual BLS sigs are signed on as hex string
          type: string
        bls_multi_sig:
          format: byte
          title: >-
            bls_multi_sig defines the multi sig that is aggregated from
            individual BLS

            sigs
          type: string
        epoch_num:
          format: uint64
          title: epoch_num defines the epoch number the raw checkpoint is for
          type: string
      title: RawCheckpointResponse wraps the BLS multi sig with metadata
      type: object
    babylon.checkpointing.v1.RawCheckpointWithMetaResponse:
      description: RawCheckpointWithMetaResponse wraps the raw checkpoint with metadata.
      properties:
        bls_aggr_pk:
          format: byte
          title: bls_aggr_pk defines the aggregated BLS public key
          type: string
        ckpt:
          properties:
            bitmap:
              format: byte
              title: >-
                bitmap defines the bitmap that indicates the signers of the BLS
                multi sig
              type: string
            block_hash_hex:
              title: |-
                block_hash_hex defines the 'BlockID.Hash', which is the hash of
                the block that individual BLS sigs are signed on as hex string
              type: string
            bls_multi_sig:
              format: byte
              title: >-
                bls_multi_sig defines the multi sig that is aggregated from
                individual BLS

                sigs
              type: string
            epoch_num:
              format: uint64
              title: epoch_num defines the epoch number the raw checkpoint is for
              type: string
          title: RawCheckpointResponse wraps the BLS multi sig with metadata
          type: object
        lifecycle:
          description: |-
            lifecycle defines the lifecycle of this checkpoint, i.e., each state
            transition and the time (in both timestamp and block height) of this
            transition.
          items:
            description: >-
              CheckpointStateUpdateResponse defines a state transition on the
              checkpoint.
            properties:
              block_height:
                format: uint64
                title: >-
                  block_height is the height of the Babylon block that triggers
                  the state

                  update
                type: string
              block_time:
                format: date-time
                title: >-
                  block_time is the timestamp in the Babylon block that triggers
                  the state

                  update
                type: string
              state:
                default: CKPT_STATUS_ACCUMULATING
                description: |-
                  CheckpointStatus is the status of a checkpoint.

                   - CKPT_STATUS_ACCUMULATING: ACCUMULATING defines a checkpoint that is awaiting for BLS signatures.
                   - CKPT_STATUS_SEALED: SEALED defines a checkpoint that has accumulated sufficient BLS signatures.
                   - CKPT_STATUS_SUBMITTED: SUBMITTED defines a checkpoint that is included on BTC.
                   - CKPT_STATUS_CONFIRMED: CONFIRMED defines a checkpoint that is k-deep on BTC.
                   - CKPT_STATUS_FINALIZED: FINALIZED defines a checkpoint that is w-deep on BTC.
                enum:
                  - CKPT_STATUS_ACCUMULATING
                  - CKPT_STATUS_SEALED
                  - CKPT_STATUS_SUBMITTED
                  - CKPT_STATUS_CONFIRMED
                  - CKPT_STATUS_FINALIZED
                title: >-
                  state defines the event of a state transition towards this
                  state
                type: string
              status_desc:
                description: status_desc represents the description of status enum.
                type: string
            type: object
          type: array
        power_sum:
          format: uint64
          title: power_sum defines the accumulated voting power for the checkpoint
          type: string
        status:
          default: CKPT_STATUS_ACCUMULATING
          description: |-
            CheckpointStatus is the status of a checkpoint.

             - CKPT_STATUS_ACCUMULATING: ACCUMULATING defines a checkpoint that is awaiting for BLS signatures.
             - CKPT_STATUS_SEALED: SEALED defines a checkpoint that has accumulated sufficient BLS signatures.
             - CKPT_STATUS_SUBMITTED: SUBMITTED defines a checkpoint that is included on BTC.
             - CKPT_STATUS_CONFIRMED: CONFIRMED defines a checkpoint that is k-deep on BTC.
             - CKPT_STATUS_FINALIZED: FINALIZED defines a checkpoint that is w-deep on BTC.
          enum:
            - CKPT_STATUS_ACCUMULATING
            - CKPT_STATUS_SEALED
            - CKPT_STATUS_SUBMITTED
            - CKPT_STATUS_CONFIRMED
            - CKPT_STATUS_FINALIZED
          title: status defines the status of the checkpoint
          type: string
        status_desc:
          description: status_desc represents the description of status enum.
          type: string
      type: object
    babylon.checkpointing.v1.ValidatorWithBlsKey:
      properties:
        bls_pub_key:
          format: byte
          title: bls_pub_key is the BLS public key of the validator
          type: string
        validator_address:
          title: validator_address is the address of the validator
          type: string
        voting_power:
          format: uint64
          title: voting_power is the voting power of the validator at the given epoch
          type: string
      title: |-
        ValidatorWithBlsKey couples validator address, voting power, and its bls
        public key
      type: object
    babylon.epoching.v1.BondState:
      default: CREATED
      description: |-
        - CREATED: CREATED is when the validator/delegation has been created
         - BONDED: CREATED is when the validator/delegation has become bonded
         - UNBONDING: CREATED is when the validator/delegation has become unbonding
         - UNBONDED: CREATED is when the validator/delegation has become unbonded
         - REMOVED: CREATED is when the validator/delegation has been removed
      enum:
        - CREATED
        - BONDED
        - UNBONDING
        - UNBONDED
        - REMOVED
      title: BondState is the bond state of a validator or delegation
      type: string
    babylon.epoching.v1.DelegationLifecycle:
      properties:
        del_addr:
          type: string
        del_life:
          items:
            properties:
              amount:
                description: >-
                  Coin defines a token with a denomination and an amount.


                  NOTE: The amount field is an Int which implements the custom
                  method

                  signatures required by gogoproto.
                properties:
                  amount:
                    type: string
                  denom:
                    type: string
                type: object
              block_height:
                format: uint64
                type: string
              block_time:
                format: date-time
                type: string
              state:
                default: CREATED
                description: >-
                  - CREATED: CREATED is when the validator/delegation has been
                  created
                   - BONDED: CREATED is when the validator/delegation has become bonded
                   - UNBONDING: CREATED is when the validator/delegation has become unbonding
                   - UNBONDED: CREATED is when the validator/delegation has become unbonded
                   - REMOVED: CREATED is when the validator/delegation has been removed
                enum:
                  - CREATED
                  - BONDED
                  - UNBONDING
                  - UNBONDED
                  - REMOVED
                title: BondState is the bond state of a validator or delegation
                type: string
              val_addr:
                type: string
            title: >-
              DelegationStateUpdate is the message that records a state update
              of a

              delegation
            type: object
          type: array
      title: |-
        ValidatorLifecycle is a message that records the lifecycle of
        a delegation
      type: object
    babylon.epoching.v1.DelegationStateUpdate:
      properties:
        amount:
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
          properties:
            amount:
              type: string
            denom:
              type: string
          type: object
        block_height:
          format: uint64
          type: string
        block_time:
          format: date-time
          type: string
        state:
          default: CREATED
          description: |-
            - CREATED: CREATED is when the validator/delegation has been created
             - BONDED: CREATED is when the validator/delegation has become bonded
             - UNBONDING: CREATED is when the validator/delegation has become unbonding
             - UNBONDED: CREATED is when the validator/delegation has become unbonded
             - REMOVED: CREATED is when the validator/delegation has been removed
          enum:
            - CREATED
            - BONDED
            - UNBONDING
            - UNBONDED
            - REMOVED
          title: BondState is the bond state of a validator or delegation
          type: string
        val_addr:
          type: string
      title: |-
        DelegationStateUpdate is the message that records a state update of a
        delegation
      type: object
    babylon.epoching.v1.Epoch:
      properties:
        current_epoch_interval:
          format: uint64
          title: >-
            current_epoch_interval is the epoch interval at the time of this
            epoch
          type: string
        epoch_number:
          format: uint64
          title: epoch_number is the number of this epoch
          type: string
        first_block_height:
          format: uint64
          title: first_block_height is the height of the first block in this epoch
          type: string
        last_block_time:
          description: >-
            last_block_time is the time of the last block in this epoch.

            Babylon needs to remember the last header's time of each epoch to
            complete

            unbonding validators/delegations when a previous epoch's checkpoint
            is

            finalised. The last_block_time field is nil in the epoch's
            beginning, and

            is set upon the end of this epoch.
          format: date-time
          type: string
        sealer_app_hash:
          format: byte
          title: |-
            sealer is the last block of the sealed epoch
            sealer_app_hash points to the sealer but stored in the 1st header
            of the next epoch
          type: string
        sealer_block_hash:
          format: byte
          title: |-
            sealer_block_hash is the hash of the sealer
            the validator set has generated a BLS multisig on the hash,
            i.e., hash of the last block in the epoch
          type: string
      title: Epoch is a structure that contains the metadata of an epoch
      type: object
    babylon.epoching.v1.EpochResponse:
      properties:
        current_epoch_interval:
          format: uint64
          title: >-
            current_epoch_interval is the epoch interval at the time of this
            epoch
          type: string
        epoch_number:
          format: uint64
          title: epoch_number is the number of this epoch
          type: string
        first_block_height:
          format: uint64
          title: first_block_height is the height of the first block in this epoch
          type: string
        last_block_time:
          description: >-
            last_block_time is the time of the last block in this epoch.

            Babylon needs to remember the last header's time of each epoch to
            complete

            unbonding validators/delegations when a previous epoch's checkpoint
            is

            finalised. The last_block_time field is nil in the epoch's
            beginning, and

            is set upon the end of this epoch.
          format: date-time
          type: string
        sealer_app_hash_hex:
          description: |-
            sealer is the last block of the sealed epoch
            sealer_app_hash points to the sealer but stored in the 1st header
            of the next epoch as hex string.
          type: string
        sealer_block_hash:
          description: |-
            sealer_block_hash is the hash of the sealer
            the validator set has generated a BLS multisig on the hash,
            i.e., hash of the last block in the epoch as hex string.
          type: string
      title: EpochResponse is a structure that contains the metadata of an epoch
      type: object
    babylon.epoching.v1.Params:
      description: Params defines the parameters for the module.
      properties:
        epoch_interval:
          format: uint64
          title: epoch_interval is the number of consecutive blocks to form an epoch
          type: string
      type: object
    babylon.epoching.v1.QueryCurrentEpochResponse:
      properties:
        current_epoch:
          format: uint64
          title: current_epoch is the current epoch number
          type: string
        epoch_boundary:
          format: uint64
          title: epoch_boundary is the height of this epoch's last block
          type: string
      title: >-
        QueryCurrentEpochResponse is the response type for the
        Query/CurrentEpoch RPC

        method
      type: object
    babylon.epoching.v1.QueryDelegationLifecycleResponse:
      properties:
        del_life:
          properties:
            del_addr:
              type: string
            del_life:
              items:
                properties:
                  amount:
                    description: >-
                      Coin defines a token with a denomination and an amount.


                      NOTE: The amount field is an Int which implements the
                      custom method

                      signatures required by gogoproto.
                    properties:
                      amount:
                        type: string
                      denom:
                        type: string
                    type: object
                  block_height:
                    format: uint64
                    type: string
                  block_time:
                    format: date-time
                    type: string
                  state:
                    default: CREATED
                    description: >-
                      - CREATED: CREATED is when the validator/delegation has
                      been created
                       - BONDED: CREATED is when the validator/delegation has become bonded
                       - UNBONDING: CREATED is when the validator/delegation has become unbonding
                       - UNBONDED: CREATED is when the validator/delegation has become unbonded
                       - REMOVED: CREATED is when the validator/delegation has been removed
                    enum:
                      - CREATED
                      - BONDED
                      - UNBONDING
                      - UNBONDED
                      - REMOVED
                    title: BondState is the bond state of a validator or delegation
                    type: string
                  val_addr:
                    type: string
                title: >-
                  DelegationStateUpdate is the message that records a state
                  update of a

                  delegation
                type: object
              type: array
          title: |-
            ValidatorLifecycle is a message that records the lifecycle of
            a delegation
          type: object
      title: |-
        QueryDelegationLifecycleRequest is the response type for the
        Query/DelegationLifecycle RPC method
      type: object
    babylon.epoching.v1.QueryEpochInfoResponse:
      properties:
        epoch:
          properties:
            current_epoch_interval:
              format: uint64
              title: >-
                current_epoch_interval is the epoch interval at the time of this
                epoch
              type: string
            epoch_number:
              format: uint64
              title: epoch_number is the number of this epoch
              type: string
            first_block_height:
              format: uint64
              title: >-
                first_block_height is the height of the first block in this
                epoch
              type: string
            last_block_time:
              description: >-
                last_block_time is the time of the last block in this epoch.

                Babylon needs to remember the last header's time of each epoch
                to complete

                unbonding validators/delegations when a previous epoch's
                checkpoint is

                finalised. The last_block_time field is nil in the epoch's
                beginning, and

                is set upon the end of this epoch.
              format: date-time
              type: string
            sealer_app_hash_hex:
              description: >-
                sealer is the last block of the sealed epoch

                sealer_app_hash points to the sealer but stored in the 1st
                header

                of the next epoch as hex string.
              type: string
            sealer_block_hash:
              description: |-
                sealer_block_hash is the hash of the sealer
                the validator set has generated a BLS multisig on the hash,
                i.e., hash of the last block in the epoch as hex string.
              type: string
          title: EpochResponse is a structure that contains the metadata of an epoch
          type: object
      title: >-
        QueryEpochInfoRequest is the response type for the Query/EpochInfo
        method
      type: object
    babylon.epoching.v1.QueryEpochMsgsResponse:
      properties:
        msgs:
          items:
            properties:
              block_height:
                format: uint64
                title: >-
                  block_height is the height when this msg is submitted to
                  Babylon
                type: string
              block_time:
                format: date-time
                title: >-
                  block_time is the timestamp when this msg is submitted to
                  Babylon
                type: string
              msg:
                description: >-
                  msg is the actual message that is sent by a user and is queued
                  by the

                  epoching module as string.
                type: string
              msg_id:
                description: >-
                  msg_id is the original message ID, i.e., hash of the marshaled
                  message as hex.
                type: string
              tx_id:
                description: tx_id is the ID of the tx that contains the message as hex.
                type: string
            title: >-
              QueuedMessageResponse is a message that can change the validator
              set and is delayed

              to the end of an epoch
            type: object
          title: msgs is the list of messages queued in the current epoch
          type: array
        pagination:
          description: |-
            PageResponse is to be embedded in gRPC response messages where the
            corresponding request message has used PageRequest.

             message SomeResponse {
                     repeated Bar results = 1;
                     PageResponse page = 2;
             }
          properties:
            next_key:
              description: |-
                next_key is the key to be passed to PageRequest.key to
                query the next page most efficiently. It will be empty if
                there are no more results.
              format: byte
              type: string
            total:
              format: uint64
              title: >-
                total is total number of results available if
                PageRequest.count_total

                was set, its value is undefined otherwise
              type: string
          title: pagination defines the pagination in the response
          type: object
      title: |-
        QueryEpochMsgsResponse is the response type for the Query/EpochMsgs RPC
        method
      type: object
    babylon.epoching.v1.QueryEpochValSetResponse:
      properties:
        pagination:
          description: |-
            PageResponse is to be embedded in gRPC response messages where the
            corresponding request message has used PageRequest.

             message SomeResponse {
                     repeated Bar results = 1;
                     PageResponse page = 2;
             }
          properties:
            next_key:
              description: |-
                next_key is the key to be passed to PageRequest.key to
                query the next page most efficiently. It will be empty if
                there are no more results.
              format: byte
              type: string
            total:
              format: uint64
              title: >-
                total is total number of results available if
                PageRequest.count_total

                was set, its value is undefined otherwise
              type: string
          type: object
        total_voting_power:
          format: int64
          type: string
        validators:
          items:
            properties:
              addr:
                format: byte
                title: addr is the validator's address (in sdk.ValAddress)
                type: string
              power:
                format: int64
                title: power is the validator's voting power
                type: string
            title: Validator is a message that denotes a validator
            type: object
          type: array
      title: >-
        QueryEpochValSetRequest is the response type for the Query/EpochValSet
        RPC

        method
      type: object
    babylon.epoching.v1.QueryEpochsInfoResponse:
      properties:
        epochs:
          items:
            properties:
              current_epoch_interval:
                format: uint64
                title: >-
                  current_epoch_interval is the epoch interval at the time of
                  this epoch
                type: string
              epoch_number:
                format: uint64
                title: epoch_number is the number of this epoch
                type: string
              first_block_height:
                format: uint64
                title: >-
                  first_block_height is the height of the first block in this
                  epoch
                type: string
              last_block_time:
                description: >-
                  last_block_time is the time of the last block in this epoch.

                  Babylon needs to remember the last header's time of each epoch
                  to complete

                  unbonding validators/delegations when a previous epoch's
                  checkpoint is

                  finalised. The last_block_time field is nil in the epoch's
                  beginning, and

                  is set upon the end of this epoch.
                format: date-time
                type: string
              sealer_app_hash_hex:
                description: >-
                  sealer is the last block of the sealed epoch

                  sealer_app_hash points to the sealer but stored in the 1st
                  header

                  of the next epoch as hex string.
                type: string
              sealer_block_hash:
                description: |-
                  sealer_block_hash is the hash of the sealer
                  the validator set has generated a BLS multisig on the hash,
                  i.e., hash of the last block in the epoch as hex string.
                type: string
            title: >-
              EpochResponse is a structure that contains the metadata of an
              epoch
            type: object
          type: array
        pagination:
          description: |-
            PageResponse is to be embedded in gRPC response messages where the
            corresponding request message has used PageRequest.

             message SomeResponse {
                     repeated Bar results = 1;
                     PageResponse page = 2;
             }
          properties:
            next_key:
              description: |-
                next_key is the key to be passed to PageRequest.key to
                query the next page most efficiently. It will be empty if
                there are no more results.
              format: byte
              type: string
            total:
              format: uint64
              title: >-
                total is total number of results available if
                PageRequest.count_total

                was set, its value is undefined otherwise
              type: string
          title: pagination defines the pagination in the response
          type: object
      title: >-
        QueryEpochsInfoResponse is the response type for the Query/EpochInfos
        method
      type: object
    babylon.epoching.v1.QueryLatestEpochMsgsResponse:
      properties:
        latest_epoch_msgs:
          items:
            properties:
              epoch_number:
                format: uint64
                type: string
              msgs:
                items:
                  properties:
                    block_height:
                      format: uint64
                      title: >-
                        block_height is the height when this msg is submitted to
                        Babylon
                      type: string
                    block_time:
                      format: date-time
                      title: >-
                        block_time is the timestamp when this msg is submitted
                        to Babylon
                      type: string
                    msg:
                      description: >-
                        msg is the actual message that is sent by a user and is
                        queued by the

                        epoching module as string.
                      type: string
                    msg_id:
                      description: >-
                        msg_id is the original message ID, i.e., hash of the
                        marshaled message as hex.
                      type: string
                    tx_id:
                      description: >-
                        tx_id is the ID of the tx that contains the message as
                        hex.
                      type: string
                  title: >-
                    QueuedMessageResponse is a message that can change the
                    validator set and is delayed

                    to the end of an epoch
                  type: object
                type: array
            title: >-
              QueuedMessageList is a message that contains a list of
              staking-related

              messages queued for an epoch
            type: object
          title: |-
            latest_epoch_msgs is a list of QueuedMessageList
            each QueuedMessageList has a field identifying the epoch number
          type: array
        pagination:
          description: |-
            PageResponse is to be embedded in gRPC response messages where the
            corresponding request message has used PageRequest.

             message SomeResponse {
                     repeated Bar results = 1;
                     PageResponse page = 2;
             }
          properties:
            next_key:
              description: |-
                next_key is the key to be passed to PageRequest.key to
                query the next page most efficiently. It will be empty if
                there are no more results.
              format: byte
              type: string
            total:
              format: uint64
              title: >-
                total is total number of results available if
                PageRequest.count_total

                was set, its value is undefined otherwise
              type: string
          type: object
      title: |-
        QueryLatestEpochMsgsResponse is the response type for the
        Query/LatestEpochMsgs RPC method
      type: object
    babylon.epoching.v1.QueryParamsResponse:
      description: >-
        QueryParamsResponse is the response type for the Query/Params RPC
        method.
      properties:
        params:
          description: params holds all the parameters of this module.
          properties:
            epoch_interval:
              format: uint64
              title: >-
                epoch_interval is the number of consecutive blocks to form an
                epoch
              type: string
          type: object
      type: object
    babylon.epoching.v1.QueryValidatorLifecycleResponse:
      properties:
        val_addr:
          type: string
        val_life:
          items:
            description: >-
              ValStateUpdateResponse is a message response that records a state
              update of a validator.
            properties:
              block_height:
                format: uint64
                type: string
              block_time:
                format: date-time
                type: string
              state_desc:
                description: StateDesc defines the descriptive state.
                type: string
            type: object
          type: array
      title: |-
        QueryValidatorLifecycleResponse is the response type for the
        Query/ValidatorLifecycle RPC method
      type: object
    babylon.epoching.v1.QueuedMessageList:
      properties:
        epoch_number:
          format: uint64
          type: string
        msgs:
          items:
            properties:
              block_height:
                format: uint64
                title: >-
                  block_height is the height when this msg is submitted to
                  Babylon
                type: string
              block_time:
                format: date-time
                title: >-
                  block_time is the timestamp when this msg is submitted to
                  Babylon
                type: string
              msg:
                description: >-
                  msg is the actual message that is sent by a user and is queued
                  by the

                  epoching module as string.
                type: string
              msg_id:
                description: >-
                  msg_id is the original message ID, i.e., hash of the marshaled
                  message as hex.
                type: string
              tx_id:
                description: tx_id is the ID of the tx that contains the message as hex.
                type: string
            title: >-
              QueuedMessageResponse is a message that can change the validator
              set and is delayed

              to the end of an epoch
            type: object
          type: array
      title: |-
        QueuedMessageList is a message that contains a list of staking-related
        messages queued for an epoch
      type: object
    babylon.epoching.v1.QueuedMessageResponse:
      properties:
        block_height:
          format: uint64
          title: block_height is the height when this msg is submitted to Babylon
          type: string
        block_time:
          format: date-time
          title: block_time is the timestamp when this msg is submitted to Babylon
          type: string
        msg:
          description: >-
            msg is the actual message that is sent by a user and is queued by
            the

            epoching module as string.
          type: string
        msg_id:
          description: >-
            msg_id is the original message ID, i.e., hash of the marshaled
            message as hex.
          type: string
        tx_id:
          description: tx_id is the ID of the tx that contains the message as hex.
          type: string
      title: >-
        QueuedMessageResponse is a message that can change the validator set and
        is delayed

        to the end of an epoch
      type: object
    babylon.epoching.v1.ValStateUpdateResponse:
      description: >-
        ValStateUpdateResponse is a message response that records a state update
        of a validator.
      properties:
        block_height:
          format: uint64
          type: string
        block_time:
          format: date-time
          type: string
        state_desc:
          description: StateDesc defines the descriptive state.
          type: string
      type: object
    babylon.epoching.v1.Validator:
      properties:
        addr:
          format: byte
          title: addr is the validator's address (in sdk.ValAddress)
          type: string
        power:
          format: int64
          title: power is the validator's voting power
          type: string
      title: Validator is a message that denotes a validator
      type: object
    babylon.finality.v1.ActiveFinalityProvidersAtHeightResponse:
      description: >-
        ActiveFinalityProvidersAtHeightResponse wraps the FinalityProvider with
        metadata.
      properties:
        btc_pk_hex:
          title: |-
            btc_pk is the Bitcoin secp256k1 PK of thisfinality provider
            the PK follows encoding in BIP-340 spec
          type: string
        height:
          format: uint64
          title: height is the queried Babylon height
          type: string
        highest_voted_height:
          format: int64
          title: |-
            highest_voted_height is the highest height for which the
            finality provider has voted
          type: integer
        jailed:
          title: jailed defines whether the finality provider is detected jailed
          type: boolean
        slashed_babylon_height:
          format: uint64
          title: |-
            slashed_babylon_height indicates the Babylon height when
            the finality provider is slashed.
            if it's 0 then the finality provider is not slashed
          type: string
        slashed_btc_height:
          format: int64
          title: |-
            slashed_btc_height indicates the BTC height when
            the finality provider is slashed.
            if it's 0 then the finality provider is not slashed
          type: integer
        voting_power:
          format: uint64
          title: >-
            voting_power is the voting power of this finality provider at the
            given height
          type: string
      type: object
    babylon.finality.v1.EvidenceResponse:
      properties:
        block_height:
          format: uint64
          title: block_height is the height of the conflicting blocks
          type: string
        canonical_app_hash:
          format: byte
          title: canonical_app_hash is the AppHash of the canonical block
          type: string
        canonical_finality_sig:
          format: byte
          title: >-
            canonical_finality_sig is the finality signature to the canonical
            block

            where finality signature is an EOTS signature, i.e.,

            the `s` in a Schnorr signature `(r, s)`

            `r` is the public randomness that is already committed by the
            finality provider
          type: string
        fork_app_hash:
          format: byte
          title: fork_app_hash is the AppHash of the fork block
          type: string
        fork_finality_sig:
          format: byte
          title: |-
            fork_finality_sig is the finality signature to the fork block
            where finality signature is an EOTS signature
          type: string
        fp_btc_pk_hex:
          title: >-
            fp_btc_pk_hex is the BTC PK of the finality provider that casts this
            vote
          type: string
        pub_rand:
          format: byte
          title: >-
            pub_rand is the public randomness the finality provider has
            committed to
          type: string
      title: >-
        Evidence is the evidence that a finality provider has signed finality

        signatures with correct public randomness on two conflicting Babylon
        headers
      type: object
    babylon.finality.v1.IndexedBlock:
      properties:
        app_hash:
          format: byte
          title: app_hash is the AppHash of the block
          type: string
        finalized:
          title: |-
            finalized indicates whether the IndexedBlock is finalised by 2/3
            finality providers or not
          type: boolean
        height:
          format: uint64
          title: height is the height of the block
          type: string
      title: >-
        IndexedBlock is the necessary metadata and finalization status of a
        block
      type: object
    babylon.finality.v1.Params:
      description: Params defines the parameters for the module.
      properties:
        finality_activation_height:
          description: >-
            finality_activation_height is the babylon block height which the
            finality module will

            start to accept finality voting and the minimum allowed value for
            the public randomness

            commit start height.
          format: uint64
          type: string
        finality_sig_timeout:
          format: int64
          title: >-
            finality_sig_timeout defines how much time (in terms of blocks)
            finality providers have to cast a finality

            vote before being judged as missing their voting turn on the given
            block
          type: string
        jail_duration:
          title: >-
            jail_duration is the minimum period of time that a finality provider
            remains jailed
          type: string
        max_active_finality_providers:
          format: int64
          title: >-
            max_active_finality_providers is the maximum number of active
            finality providers in the BTC staking protocol
          type: integer
        min_pub_rand:
          format: uint64
          title: |-
            min_pub_rand is the minimum number of public randomness each
            message should commit
          type: string
        min_signed_per_window:
          format: byte
          title: >-
            min_signed_per_window defines the minimum number of blocks that a
            finality provider is required to sign

            within the sliding window to avoid being jailed
          type: string
        signed_blocks_window:
          format: int64
          title: >-
            signed_blocks_window defines the size of the sliding window for
            tracking finality provider liveness
          type: string
      type: object
    babylon.finality.v1.PubRandCommitResponse:
      properties:
        commitment:
          format: byte
          title: commitment is the value of the commitment
          type: string
        epoch_num:
          format: uint64
          title: epoch_num defines the epoch number that the commit falls into
          type: string
        num_pub_rand:
          format: uint64
          title: num_pub_rand is the number of committed public randomness
          type: string
      title: >-
        PubRandCommitResponse is the response type for a public randomness
        commitment
      type: object
    babylon.finality.v1.QueriedBlockStatus:
      default: NON_FINALIZED
      description: >-
        QueriedBlockStatus is the status of blocks that the querier wants to
        query.

         - NON_FINALIZED: NON_FINALIZED means the block is not finalised
         - FINALIZED: FINALIZED means the block is finalized
         - ANY: ANY means the block can be in any status
      enum:
        - NON_FINALIZED
        - FINALIZED
        - ANY
      type: string
    babylon.finality.v1.QueryActivatedHeightResponse:
      description: >-
        QueryActivatedHeightResponse is the response type for the
        Query/ActivatedHeight RPC method.
      properties:
        height:
          format: uint64
          type: string
      type: object
    babylon.finality.v1.QueryActiveFinalityProvidersAtHeightResponse:
      description: >-
        QueryActiveFinalityProvidersAtHeightResponse is the response type for
        the

        Query/ActiveFinalityProvidersAtHeight RPC method.
      properties:
        finality_providers:
          description: finality_providers contains all the queried finality providersn.
          items:
            description: >-
              ActiveFinalityProvidersAtHeightResponse wraps the FinalityProvider
              with metadata.
            properties:
              btc_pk_hex:
                title: |-
                  btc_pk is the Bitcoin secp256k1 PK of thisfinality provider
                  the PK follows encoding in BIP-340 spec
                type: string
              height:
                format: uint64
                title: height is the queried Babylon height
                type: string
              highest_voted_height:
                format: int64
                title: |-
                  highest_voted_height is the highest height for which the
                  finality provider has voted
                type: integer
              jailed:
                title: >-
                  jailed defines whether the finality provider is detected
                  jailed
                type: boolean
              slashed_babylon_height:
                format: uint64
                title: |-
                  slashed_babylon_height indicates the Babylon height when
                  the finality provider is slashed.
                  if it's 0 then the finality provider is not slashed
                type: string
              slashed_btc_height:
                format: int64
                title: |-
                  slashed_btc_height indicates the BTC height when
                  the finality provider is slashed.
                  if it's 0 then the finality provider is not slashed
                type: integer
              voting_power:
                format: uint64
                title: >-
                  voting_power is the voting power of this finality provider at
                  the given height
                type: string
            type: object
          type: array
        pagination:
          description: pagination defines the pagination in the response.
          properties:
            next_key:
              description: |-
                next_key is the key to be passed to PageRequest.key to
                query the next page most efficiently. It will be empty if
                there are no more results.
              format: byte
              type: string
            total:
              format: uint64
              title: >-
                total is total number of results available if
                PageRequest.count_total

                was set, its value is undefined otherwise
              type: string
          type: object
      type: object
    babylon.finality.v1.QueryBlockResponse:
      description: |-
        QueryBlockResponse is the response type for the
        Query/Block RPC method.
      properties:
        block:
          properties:
            app_hash:
              format: byte
              title: app_hash is the AppHash of the block
              type: string
            finalized:
              title: |-
                finalized indicates whether the IndexedBlock is finalised by 2/3
                finality providers or not
              type: boolean
            height:
              format: uint64
              title: height is the height of the block
              type: string
          title: >-
            IndexedBlock is the necessary metadata and finalization status of a
            block
          type: object
      type: object
    babylon.finality.v1.QueryEvidenceResponse:
      description: |-
        QueryEvidenceResponse is the response type for the
        Query/Evidence RPC method.
      properties:
        evidence:
          properties:
            block_height:
              format: uint64
              title: block_height is the height of the conflicting blocks
              type: string
            canonical_app_hash:
              format: byte
              title: canonical_app_hash is the AppHash of the canonical block
              type: string
            canonical_finality_sig:
              format: byte
              title: >-
                canonical_finality_sig is the finality signature to the
                canonical block

                where finality signature is an EOTS signature, i.e.,

                the `s` in a Schnorr signature `(r, s)`

                `r` is the public randomness that is already committed by the
                finality provider
              type: string
            fork_app_hash:
              format: byte
              title: fork_app_hash is the AppHash of the fork block
              type: string
            fork_finality_sig:
              format: byte
              title: |-
                fork_finality_sig is the finality signature to the fork block
                where finality signature is an EOTS signature
              type: string
            fp_btc_pk_hex:
              title: >-
                fp_btc_pk_hex is the BTC PK of the finality provider that casts
                this vote
              type: string
            pub_rand:
              format: byte
              title: >-
                pub_rand is the public randomness the finality provider has
                committed to
              type: string
          title: >-
            Evidence is the evidence that a finality provider has signed
            finality

            signatures with correct public randomness on two conflicting Babylon
            headers
          type: object
      type: object
    babylon.finality.v1.QueryFinalityProviderCurrentPowerResponse:
      description: |-
        QueryFinalityProviderCurrentPowerResponse is the response type for the
        Query/FinalityProviderCurrentPower RPC method.
      properties:
        height:
          format: uint64
          title: height is the current height
          type: string
        voting_power:
          format: uint64
          title: voting_power is the voting power of the finality provider
          type: string
      type: object
    babylon.finality.v1.QueryFinalityProviderPowerAtHeightResponse:
      description: |-
        QueryFinalityProviderPowerAtHeightResponse is the response type for the
        Query/FinalityProviderPowerAtHeight RPC method.
      properties:
        voting_power:
          format: uint64
          title: voting_power is the voting power of the finality provider
          type: string
      type: object
    babylon.finality.v1.QueryListBlocksResponse:
      description: |-
        QueryListBlocksResponse is the response type for the
        Query/ListBlocks RPC method.
      properties:
        blocks:
          items:
            properties:
              app_hash:
                format: byte
                title: app_hash is the AppHash of the block
                type: string
              finalized:
                title: >-
                  finalized indicates whether the IndexedBlock is finalised by
                  2/3

                  finality providers or not
                type: boolean
              height:
                format: uint64
                title: height is the height of the block
                type: string
            title: >-
              IndexedBlock is the necessary metadata and finalization status of
              a block
            type: object
          title: blocks is the list of blocks at the given status
          type: array
        pagination:
          description: pagination defines the pagination in the response.
          properties:
            next_key:
              description: |-
                next_key is the key to be passed to PageRequest.key to
                query the next page most efficiently. It will be empty if
                there are no more results.
              format: byte
              type: string
            total:
              format: uint64
              title: >-
                total is total number of results available if
                PageRequest.count_total

                was set, its value is undefined otherwise
              type: string
          type: object
      type: object
    babylon.finality.v1.QueryListEvidencesResponse:
      description: |-
        QueryListEvidencesResponse is the response type for the
        Query/ListEvidences RPC method.
      properties:
        evidences:
          items:
            properties:
              block_height:
                format: uint64
                title: block_height is the height of the conflicting blocks
                type: string
              canonical_app_hash:
                format: byte
                title: canonical_app_hash is the AppHash of the canonical block
                type: string
              canonical_finality_sig:
                format: byte
                title: >-
                  canonical_finality_sig is the finality signature to the
                  canonical block

                  where finality signature is an EOTS signature, i.e.,

                  the `s` in a Schnorr signature `(r, s)`

                  `r` is the public randomness that is already committed by the
                  finality provider
                type: string
              fork_app_hash:
                format: byte
                title: fork_app_hash is the AppHash of the fork block
                type: string
              fork_finality_sig:
                format: byte
                title: |-
                  fork_finality_sig is the finality signature to the fork block
                  where finality signature is an EOTS signature
                type: string
              fp_btc_pk_hex:
                title: >-
                  fp_btc_pk_hex is the BTC PK of the finality provider that
                  casts this vote
                type: string
              pub_rand:
                format: byte
                title: >-
                  pub_rand is the public randomness the finality provider has
                  committed to
                type: string
            title: >-
              Evidence is the evidence that a finality provider has signed
              finality

              signatures with correct public randomness on two conflicting
              Babylon headers
            type: object
          title: blocks is the list of evidences
          type: array
        pagination:
          description: pagination defines the pagination in the response.
          properties:
            next_key:
              description: |-
                next_key is the key to be passed to PageRequest.key to
                query the next page most efficiently. It will be empty if
                there are no more results.
              format: byte
              type: string
            total:
              format: uint64
              title: >-
                total is total number of results available if
                PageRequest.count_total

                was set, its value is undefined otherwise
              type: string
          type: object
      type: object
    babylon.finality.v1.QueryListPubRandCommitResponse:
      description: |-
        QueryListPubRandCommitResponse is the response type for the
        Query/ListPubRandCommit RPC method.
      properties:
        pagination:
          description: pagination defines the pagination in the response.
          properties:
            next_key:
              description: |-
                next_key is the key to be passed to PageRequest.key to
                query the next page most efficiently. It will be empty if
                there are no more results.
              format: byte
              type: string
            total:
              format: uint64
              title: >-
                total is total number of results available if
                PageRequest.count_total

                was set, its value is undefined otherwise
              type: string
          type: object
        pub_rand_commit_map:
          additionalProperties:
            properties:
              commitment:
                format: byte
                title: commitment is the value of the commitment
                type: string
              epoch_num:
                format: uint64
                title: epoch_num defines the epoch number that the commit falls into
                type: string
              num_pub_rand:
                format: uint64
                title: num_pub_rand is the number of committed public randomness
                type: string
            title: >-
              PubRandCommitResponse is the response type for a public randomness
              commitment
            type: object
          title: >-
            pub_rand_commit_map is the map where the key is the start height and
            the value

            is the public randomness commitment at this height for the given
            finality provider
          type: object
      type: object
    babylon.finality.v1.QueryListPublicRandomnessResponse:
      description: |-
        QueryListPublicRandomnessResponse is the response type for the
        Query/ListPublicRandomness RPC method.
      properties:
        pagination:
          description: pagination defines the pagination in the response.
          properties:
            next_key:
              description: |-
                next_key is the key to be passed to PageRequest.key to
                query the next page most efficiently. It will be empty if
                there are no more results.
              format: byte
              type: string
            total:
              format: uint64
              title: >-
                total is total number of results available if
                PageRequest.count_total

                was set, its value is undefined otherwise
              type: string
          type: object
        pub_rand_map:
          additionalProperties:
            format: byte
            type: string
          title: >-
            pub_rand_map is the map where the key is the height and the value

            is the public randomness at this height for the given finality
            provider
          type: object
      type: object
    babylon.finality.v1.QueryParamsResponse:
      description: QueryParamsResponse is response type for the Query/Params RPC method.
      properties:
        params:
          description: params holds all the parameters of this module.
          properties:
            finality_activation_height:
              description: >-
                finality_activation_height is the babylon block height which the
                finality module will

                start to accept finality voting and the minimum allowed value
                for the public randomness

                commit start height.
              format: uint64
              type: string
            finality_sig_timeout:
              format: int64
              title: >-
                finality_sig_timeout defines how much time (in terms of blocks)
                finality providers have to cast a finality

                vote before being judged as missing their voting turn on the
                given block
              type: string
            jail_duration:
              title: >-
                jail_duration is the minimum period of time that a finality
                provider remains jailed
              type: string
            max_active_finality_providers:
              format: int64
              title: >-
                max_active_finality_providers is the maximum number of active
                finality providers in the BTC staking protocol
              type: integer
            min_pub_rand:
              format: uint64
              title: |-
                min_pub_rand is the minimum number of public randomness each
                message should commit
              type: string
            min_signed_per_window:
              format: byte
              title: >-
                min_signed_per_window defines the minimum number of blocks that
                a finality provider is required to sign

                within the sliding window to avoid being jailed
              type: string
            signed_blocks_window:
              format: int64
              title: >-
                signed_blocks_window defines the size of the sliding window for
                tracking finality provider liveness
              type: string
          type: object
      type: object
    babylon.finality.v1.QuerySigningInfoResponse:
      properties:
        signing_info:
          description: >-
            SigningInfoResponse defines the API response containing a finality
            provider's signing info

            for monitoring their liveness activity.
          properties:
            fp_btc_pk_hex:
              title: >-
                fp_btc_pk is the BTC PK of the finality provider that casts this
                vote
              type: string
            jailed_until:
              description: >-
                Timestamp until which the validator is jailed due to liveness
                downtime.
              format: date-time
              type: string
            missed_blocks_counter:
              description: >-
                missed_blocks_counter defines a counter to avoid unnecessary
                array reads.

                Note that `Sum(MissedBlocksBitArray)` always equals
                `MissedBlocksCounter`.
              format: int64
              type: string
            start_height:
              format: int64
              title: >-
                start_height is the block height at which finality provider
                become active
              type: string
          type: object
      title: >-
        QuerySigningInfoResponse is the response type for the Query/SigningInfo
        RPC

        method
      type: object
    babylon.finality.v1.QuerySigningInfosResponse:
      properties:
        pagination:
          description: |-
            PageResponse is to be embedded in gRPC response messages where the
            corresponding request message has used PageRequest.

             message SomeResponse {
                     repeated Bar results = 1;
                     PageResponse page = 2;
             }
          properties:
            next_key:
              description: |-
                next_key is the key to be passed to PageRequest.key to
                query the next page most efficiently. It will be empty if
                there are no more results.
              format: byte
              type: string
            total:
              format: uint64
              title: >-
                total is total number of results available if
                PageRequest.count_total

                was set, its value is undefined otherwise
              type: string
          type: object
        signing_infos:
          items:
            description: >-
              SigningInfoResponse defines the API response containing a finality
              provider's signing info

              for monitoring their liveness activity.
            properties:
              fp_btc_pk_hex:
                title: >-
                  fp_btc_pk is the BTC PK of the finality provider that casts
                  this vote
                type: string
              jailed_until:
                description: >-
                  Timestamp until which the validator is jailed due to liveness
                  downtime.
                format: date-time
                type: string
              missed_blocks_counter:
                description: >-
                  missed_blocks_counter defines a counter to avoid unnecessary
                  array reads.

                  Note that `Sum(MissedBlocksBitArray)` always equals
                  `MissedBlocksCounter`.
                format: int64
                type: string
              start_height:
                format: int64
                title: >-
                  start_height is the block height at which finality provider
                  become active
                type: string
            type: object
          title: info is the signing info of all finality providers with signing info
          type: array
      title: >-
        QuerySigningInfosResponse is the response type for the
        Query/SigningInfos RPC

        method
      type: object
    babylon.finality.v1.QueryVotesAtHeightResponse:
      description: |-
        QueryVotesAtHeightResponse is the response type for the
        Query/VotesAtHeight RPC method.
      properties:
        btc_pks:
          items:
            format: byte
            type: string
          title: >-
            btc_pk is the Bitcoin secp256k1 PK of finality providers who have
            signed the block at given height.

            the PK follows encoding in BIP-340 spec
          type: array
      type: object
    babylon.finality.v1.SigningInfoResponse:
      description: >-
        SigningInfoResponse defines the API response containing a finality
        provider's signing info

        for monitoring their liveness activity.
      properties:
        fp_btc_pk_hex:
          title: >-
            fp_btc_pk is the BTC PK of the finality provider that casts this
            vote
          type: string
        jailed_until:
          description: >-
            Timestamp until which the validator is jailed due to liveness
            downtime.
          format: date-time
          type: string
        missed_blocks_counter:
          description: >-
            missed_blocks_counter defines a counter to avoid unnecessary array
            reads.

            Note that `Sum(MissedBlocksBitArray)` always equals
            `MissedBlocksCounter`.
          format: int64
          type: string
        start_height:
          format: int64
          title: >-
            start_height is the block height at which finality provider become
            active
          type: string
      type: object
    babylon.incentive.BTCStakingGaugeResponse:
      description: >-
        BTCStakingGaugeResponse is response type for the Query/BTCStakingGauge
        RPC

        method.
      properties:
        coins:
          items:
            description: >-
              Coin defines a token with a denomination and an amount.


              NOTE: The amount field is an Int which implements the custom
              method

              signatures required by gogoproto.
            properties:
              amount:
                type: string
              denom:
                type: string
            type: object
          title: |-
            coins that have been in the gauge
            can have multiple coin denoms
          type: array
      type: object
    babylon.incentive.Params:
      properties:
        btc_staking_portion:
          title: >-
            btc_staking_portion is the portion of rewards that goes to Finality

            Providers/delegations NOTE: the portion of each Finality

            Provider/delegation is calculated by using its voting power and
            finality

            provider's commission
          type: string
      title: >-
        Params defines the parameters for the module, including portions of
        rewards

        distributed to each type of stakeholder. Note that sum of the portions
        should

        be strictly less than 1 so that the rest will go to Comet

        validators/delegations adapted from

        https://github.com/cosmos/cosmos-sdk/blob/release/v0.47.x/proto/cosmos/distribution/v1beta1/distribution.proto
      type: object
    babylon.incentive.QueryBTCStakingGaugeResponse:
      description: >-
        QueryBTCStakingGaugeResponse is response type for the
        Query/BTCStakingGauge

        RPC method.
      properties:
        gauge:
          description: >-
            BTCStakingGaugeResponse is response type for the
            Query/BTCStakingGauge RPC

            method.
          properties:
            coins:
              items:
                description: >-
                  Coin defines a token with a denomination and an amount.


                  NOTE: The amount field is an Int which implements the custom
                  method

                  signatures required by gogoproto.
                properties:
                  amount:
                    type: string
                  denom:
                    type: string
                type: object
              title: |-
                coins that have been in the gauge
                can have multiple coin denoms
              type: array
          title: gauge is the BTC staking gauge at the queried height
          type: object
      type: object
    babylon.incentive.QueryDelegationRewardsResponse:
      description: |-
        QueryDelegationRewardsResponse is the response type for the
        Query/DelegationRewards RPC method.
      properties:
        rewards:
          items:
            description: >-
              Coin defines a token with a denomination and an amount.


              NOTE: The amount field is an Int which implements the custom
              method

              signatures required by gogoproto.
            properties:
              amount:
                type: string
              denom:
                type: string
            type: object
          title: |-
            rewards are the delegation reward coins
            Can have multiple coin denoms
          type: array
      type: object
    babylon.incentive.QueryDelegatorWithdrawAddressResponse:
      description: |-
        QueryDelegatorWithdrawAddressResponse is the response type for the
        Query/DelegatorWithdrawAddress RPC method.
      properties:
        withdraw_address:
          description: withdraw_address defines the delegator address to query for.
          type: string
      type: object
    babylon.incentive.QueryParamsResponse:
      description: QueryParamsResponse is response type for the Query/Params RPC method.
      properties:
        params:
          description: params holds all the parameters of this module.
          properties:
            btc_staking_portion:
              title: >-
                btc_staking_portion is the portion of rewards that goes to
                Finality

                Providers/delegations NOTE: the portion of each Finality

                Provider/delegation is calculated by using its voting power and
                finality

                provider's commission
              type: string
          title: >-
            Params defines the parameters for the module, including portions of
            rewards

            distributed to each type of stakeholder. Note that sum of the
            portions should

            be strictly less than 1 so that the rest will go to Comet

            validators/delegations adapted from

            https://github.com/cosmos/cosmos-sdk/blob/release/v0.47.x/proto/cosmos/distribution/v1beta1/distribution.proto
          type: object
      type: object
    babylon.incentive.QueryRewardGaugesResponse:
      description: >-
        QueryRewardGaugesResponse is response type for the Query/RewardGauges
        RPC

        method.
      properties:
        reward_gauges:
          additionalProperties:
            properties:
              coins:
                items:
                  description: >-
                    Coin defines a token with a denomination and an amount.


                    NOTE: The amount field is an Int which implements the custom
                    method

                    signatures required by gogoproto.
                  properties:
                    amount:
                      type: string
                    denom:
                      type: string
                  type: object
                title: |-
                  coins are coins that have been in the gauge
                  Can have multiple coin denoms
                type: array
              withdrawn_coins:
                items:
                  description: >-
                    Coin defines a token with a denomination and an amount.


                    NOTE: The amount field is an Int which implements the custom
                    method

                    signatures required by gogoproto.
                  properties:
                    amount:
                      type: string
                    denom:
                      type: string
                  type: object
                title: >-
                  withdrawn_coins are coins that have been withdrawn by the
                  stakeholder

                  already
                type: array
            title: >-
              RewardGaugesResponse is an object that stores rewards distributed
              to a BTC

              staking stakeholder
            type: object
          title: >-
            reward_gauges is the map of reward gauges, where key is the
            stakeholder

            type and value is the reward gauge holding all rewards for the
            stakeholder

            in that type
          type: object
      type: object
    babylon.incentive.RewardGaugesResponse:
      properties:
        coins:
          items:
            description: >-
              Coin defines a token with a denomination and an amount.


              NOTE: The amount field is an Int which implements the custom
              method

              signatures required by gogoproto.
            properties:
              amount:
                type: string
              denom:
                type: string
            type: object
          title: |-
            coins are coins that have been in the gauge
            Can have multiple coin denoms
          type: array
        withdrawn_coins:
          items:
            description: >-
              Coin defines a token with a denomination and an amount.


              NOTE: The amount field is an Int which implements the custom
              method

              signatures required by gogoproto.
            properties:
              amount:
                type: string
              denom:
                type: string
            type: object
          title: >-
            withdrawn_coins are coins that have been withdrawn by the
            stakeholder

            already
          type: array
      title: >-
        RewardGaugesResponse is an object that stores rewards distributed to a
        BTC

        staking stakeholder
      type: object
    babylon.mint.v1.QueryAnnualProvisionsResponse:
      description: |-
        QueryAnnualProvisionsResponse is the response type for the
        Query/AnnualProvisions RPC method.
      properties:
        annual_provisions:
          description: AnnualProvisions is the current annual provisions.
          format: byte
          type: string
      type: object
    babylon.mint.v1.QueryGenesisTimeResponse:
      description: >-
        QueryGenesisTimeResponse is the response type for the Query/GenesisTime
        RPC

        method.
      properties:
        genesis_time:
          description: GenesisTime is the timestamp associated with the first block.
          format: date-time
          type: string
      type: object
    babylon.mint.v1.QueryInflationRateResponse:
      description: >-
        QueryInflationRateResponse is the response type for the
        Query/InflationRate

        RPC method.
      properties:
        inflation_rate:
          description: InflationRate is the current inflation rate.
          format: byte
          type: string
      type: object
    babylon.monitor.v1.QueryEndedEpochBtcHeightResponse:
      properties:
        btc_light_client_height:
          format: int64
          title: height of btc light client when epoch ended
          type: integer
      title: |-
        QueryEndedEpochBtcHeightResponse defines a response type for
        EndedEpochBtcHeight RPC method
      type: object
    babylon.monitor.v1.QueryReportedCheckpointBtcHeightResponse:
      properties:
        btc_light_client_height:
          format: int64
          title: height of btc light client when checkpoint is reported
          type: integer
      title: |-
        QueryReportedCheckpointBtcHeightResponse defines a response type for
        ReportedCheckpointBtcHeight RPC method
      type: object
    babylon.zoneconcierge.v1.ChainInfo:
      properties:
        consumer_id:
          title: consumer_id is the ID of the consumer
          type: string
        latest_forks:
          description: >-
            Forks is a list of non-canonical `IndexedHeader`s at the same
            height.

            For example, assuming the following blockchain

            ```

            A <- B <- C <- D <- E
                       \ -- D1
                       \ -- D2
            ```

            Then the fork will be {[D1, D2]} where each item is in struct
            `IndexedBlock`.


            Note that each `IndexedHeader` in the fork should have a valid
            quorum

            certificate. Such forks exist since Babylon considers CZs might have

            dishonest majority. Also note that the IBC-Go implementation will
            only

            consider the first header in a fork valid, since the subsequent
            headers

            cannot be verified without knowing the validator set in the previous
            header.
          properties:
            headers:
              items:
                properties:
                  babylon_epoch:
                    format: uint64
                    title: epoch is the epoch number of this header on Babylon ledger
                    type: string
                  babylon_header_hash:
                    format: byte
                    title: >-
                      babylon_header_hash is the hash of the babylon block that
                      includes this CZ

                      header
                    type: string
                  babylon_header_height:
                    format: uint64
                    title: >-
                      babylon_header_height is the height of the babylon block
                      that includes this CZ

                      header
                    type: string
                  babylon_tx_hash:
                    format: byte
                    title: >-
                      babylon_tx_hash is the hash of the tx that includes this
                      header

                      (babylon_block_height, babylon_tx_hash) jointly provides
                      the position of

                      the header on Babylon ledger
                    type: string
                  consumer_id:
                    title: consumer_id is the unique ID of the consumer
                    type: string
                  hash:
                    format: byte
                    title: hash is the hash of this header
                    type: string
                  height:
                    format: uint64
                    title: >-
                      height is the height of this header on CZ ledger

                      (hash, height) jointly provides the position of the header
                      on CZ ledger
                    type: string
                  time:
                    format: date-time
                    title: >-
                      time is the timestamp of this header on CZ ledger

                      it is needed for CZ to unbond all mature
                      validators/delegations

                      before this timestamp when this header is BTC-finalised
                    type: string
                title: IndexedHeader is the metadata of a CZ header
                type: object
              title: >-
                blocks is the list of non-canonical indexed headers at the same
                height
              type: array
          title: >-
            latest_forks is the latest forks, formed as a series of
            IndexedHeader (from

            low to high)
          type: object
        latest_header:
          properties:
            babylon_epoch:
              format: uint64
              title: epoch is the epoch number of this header on Babylon ledger
              type: string
            babylon_header_hash:
              format: byte
              title: >-
                babylon_header_hash is the hash of the babylon block that
                includes this CZ

                header
              type: string
            babylon_header_height:
              format: uint64
              title: >-
                babylon_header_height is the height of the babylon block that
                includes this CZ

                header
              type: string
            babylon_tx_hash:
              format: byte
              title: >-
                babylon_tx_hash is the hash of the tx that includes this header

                (babylon_block_height, babylon_tx_hash) jointly provides the
                position of

                the header on Babylon ledger
              type: string
            consumer_id:
              title: consumer_id is the unique ID of the consumer
              type: string
            hash:
              format: byte
              title: hash is the hash of this header
              type: string
            height:
              format: uint64
              title: >-
                height is the height of this header on CZ ledger

                (hash, height) jointly provides the position of the header on CZ
                ledger
              type: string
            time:
              format: date-time
              title: |-
                time is the timestamp of this header on CZ ledger
                it is needed for CZ to unbond all mature validators/delegations
                before this timestamp when this header is BTC-finalised
              type: string
          title: IndexedHeader is the metadata of a CZ header
          type: object
        timestamped_headers_count:
          format: uint64
          title: >-
            timestamped_headers_count is the number of timestamped headers in
            CZ's

            canonical chain
          type: string
      title: ChainInfo is the information of a CZ
      type: object
    babylon.zoneconcierge.v1.FinalizedChainInfo:
      properties:
        btc_submission_key:
          properties:
            key:
              items:
                properties:
                  hash:
                    format: byte
                    type: string
                  index:
                    format: int64
                    type: integer
                title: >-
                  Each provided OP_RETURN transaction can be identified by hash
                  of block in

                  which transaction was included and transaction index in the
                  block
                type: object
              type: array
          title: |-
            btc_submission_key is position of two BTC txs that include the raw
            checkpoint of this epoch
          type: object
        consumer_id:
          title: consumer_id is the ID of the consumer
          type: string
        epoch_info:
          properties:
            current_epoch_interval:
              format: uint64
              title: >-
                current_epoch_interval is the epoch interval at the time of this
                epoch
              type: string
            epoch_number:
              format: uint64
              title: epoch_number is the number of this epoch
              type: string
            first_block_height:
              format: uint64
              title: >-
                first_block_height is the height of the first block in this
                epoch
              type: string
            last_block_time:
              description: >-
                last_block_time is the time of the last block in this epoch.

                Babylon needs to remember the last header's time of each epoch
                to complete

                unbonding validators/delegations when a previous epoch's
                checkpoint is

                finalised. The last_block_time field is nil in the epoch's
                beginning, and

                is set upon the end of this epoch.
              format: date-time
              type: string
            sealer_app_hash:
              format: byte
              title: >-
                sealer is the last block of the sealed epoch

                sealer_app_hash points to the sealer but stored in the 1st
                header

                of the next epoch
              type: string
            sealer_block_hash:
              format: byte
              title: |-
                sealer_block_hash is the hash of the sealer
                the validator set has generated a BLS multisig on the hash,
                i.e., hash of the last block in the epoch
              type: string
          title: epoch_info is the metadata of the last BTC-finalised epoch
          type: object
        finalized_chain_info:
          properties:
            consumer_id:
              title: consumer_id is the ID of the consumer
              type: string
            latest_forks:
              description: >-
                Forks is a list of non-canonical `IndexedHeader`s at the same
                height.

                For example, assuming the following blockchain

                ```

                A <- B <- C <- D <- E
                           \ -- D1
                           \ -- D2
                ```

                Then the fork will be {[D1, D2]} where each item is in struct
                `IndexedBlock`.


                Note that each `IndexedHeader` in the fork should have a valid
                quorum

                certificate. Such forks exist since Babylon considers CZs might
                have

                dishonest majority. Also note that the IBC-Go implementation
                will only

                consider the first header in a fork valid, since the subsequent
                headers

                cannot be verified without knowing the validator set in the
                previous header.
              properties:
                headers:
                  items:
                    properties:
                      babylon_epoch:
                        format: uint64
                        title: >-
                          epoch is the epoch number of this header on Babylon
                          ledger
                        type: string
                      babylon_header_hash:
                        format: byte
                        title: >-
                          babylon_header_hash is the hash of the babylon block
                          that includes this CZ

                          header
                        type: string
                      babylon_header_height:
                        format: uint64
                        title: >-
                          babylon_header_height is the height of the babylon
                          block that includes this CZ

                          header
                        type: string
                      babylon_tx_hash:
                        format: byte
                        title: >-
                          babylon_tx_hash is the hash of the tx that includes
                          this header

                          (babylon_block_height, babylon_tx_hash) jointly
                          provides the position of

                          the header on Babylon ledger
                        type: string
                      consumer_id:
                        title: consumer_id is the unique ID of the consumer
                        type: string
                      hash:
                        format: byte
                        title: hash is the hash of this header
                        type: string
                      height:
                        format: uint64
                        title: >-
                          height is the height of this header on CZ ledger

                          (hash, height) jointly provides the position of the
                          header on CZ ledger
                        type: string
                      time:
                        format: date-time
                        title: >-
                          time is the timestamp of this header on CZ ledger

                          it is needed for CZ to unbond all mature
                          validators/delegations

                          before this timestamp when this header is
                          BTC-finalised
                        type: string
                    title: IndexedHeader is the metadata of a CZ header
                    type: object
                  title: >-
                    blocks is the list of non-canonical indexed headers at the
                    same height
                  type: array
              title: >-
                latest_forks is the latest forks, formed as a series of
                IndexedHeader (from

                low to high)
              type: object
            latest_header:
              properties:
                babylon_epoch:
                  format: uint64
                  title: epoch is the epoch number of this header on Babylon ledger
                  type: string
                babylon_header_hash:
                  format: byte
                  title: >-
                    babylon_header_hash is the hash of the babylon block that
                    includes this CZ

                    header
                  type: string
                babylon_header_height:
                  format: uint64
                  title: >-
                    babylon_header_height is the height of the babylon block
                    that includes this CZ

                    header
                  type: string
                babylon_tx_hash:
                  format: byte
                  title: >-
                    babylon_tx_hash is the hash of the tx that includes this
                    header

                    (babylon_block_height, babylon_tx_hash) jointly provides the
                    position of

                    the header on Babylon ledger
                  type: string
                consumer_id:
                  title: consumer_id is the unique ID of the consumer
                  type: string
                hash:
                  format: byte
                  title: hash is the hash of this header
                  type: string
                height:
                  format: uint64
                  title: >-
                    height is the height of this header on CZ ledger

                    (hash, height) jointly provides the position of the header
                    on CZ ledger
                  type: string
                time:
                  format: date-time
                  title: >-
                    time is the timestamp of this header on CZ ledger

                    it is needed for CZ to unbond all mature
                    validators/delegations

                    before this timestamp when this header is BTC-finalised
                  type: string
              title: IndexedHeader is the metadata of a CZ header
              type: object
            timestamped_headers_count:
              format: uint64
              title: >-
                timestamped_headers_count is the number of timestamped headers
                in CZ's

                canonical chain
              type: string
          title: ChainInfo is the information of a CZ
          type: object
        proof:
          properties:
            proof_cz_header_in_epoch:
              properties:
                ops:
                  items:
                    properties:
                      data:
                        format: byte
                        type: string
                      key:
                        format: byte
                        type: string
                      type:
                        type: string
                    title: >-
                      ProofOp defines an operation used for calculating Merkle
                      root

                      The data could be arbitrary format, providing nessecary
                      data

                      for example neighbouring node hash
                    type: object
                  type: array
              title: >-
                proof_cz_header_in_epoch is the proof that the CZ header is
                timestamped

                within a certain epoch
              type: object
            proof_epoch_sealed:
              properties:
                proof_epoch_info:
                  properties:
                    ops:
                      items:
                        properties:
                          data:
                            format: byte
                            type: string
                          key:
                            format: byte
                            type: string
                          type:
                            type: string
                        title: >-
                          ProofOp defines an operation used for calculating
                          Merkle root

                          The data could be arbitrary format, providing
                          nessecary data

                          for example neighbouring node hash
                        type: object
                      type: array
                  title: >-
                    proof_epoch_info is the Merkle proof that the epoch's
                    metadata is committed

                    to `app_hash` of the sealer header
                  type: object
                proof_epoch_val_set:
                  properties:
                    ops:
                      items:
                        properties:
                          data:
                            format: byte
                            type: string
                          key:
                            format: byte
                            type: string
                          type:
                            type: string
                        title: >-
                          ProofOp defines an operation used for calculating
                          Merkle root

                          The data could be arbitrary format, providing
                          nessecary data

                          for example neighbouring node hash
                        type: object
                      type: array
                  title: >-
                    proof_epoch_info is the Merkle proof that the epoch's
                    validator set is

                    committed to `app_hash` of the sealer header
                  type: object
                validator_set:
                  items:
                    properties:
                      bls_pub_key:
                        format: byte
                        title: bls_pub_key is the BLS public key of the validator
                        type: string
                      validator_address:
                        title: validator_address is the address of the validator
                        type: string
                      voting_power:
                        format: uint64
                        title: >-
                          voting_power is the voting power of the validator at
                          the given epoch
                        type: string
                    title: >-
                      ValidatorWithBlsKey couples validator address, voting
                      power, and its bls

                      public key
                    type: object
                  title: >-
                    validator_set is the validator set of the sealed epoch

                    This validator set has generated a BLS multisig on
                    `app_hash` of

                    the sealer header
                  type: array
              title: proof_epoch_sealed is the proof that the epoch is sealed
              type: object
            proof_epoch_submitted:
              items:
                properties:
                  key:
                    description: >-
                      key is the position (txIdx, blockHash) of this tx on BTC
                      blockchain

                      Although it is already a part of SubmissionKey, we store
                      it here again

                      to make TransactionInfo self-contained.

                      For example, storing the key allows TransactionInfo to not
                      relay on

                      the fact that TransactionInfo will be ordered in the same
                      order as

                      TransactionKeys in SubmissionKey.
                    properties:
                      hash:
                        format: byte
                        type: string
                      index:
                        format: int64
                        type: integer
                    title: >-
                      Each provided OP_RETURN transaction can be identified by
                      hash of block in

                      which transaction was included and transaction index in
                      the block
                    type: object
                  proof:
                    format: byte
                    title: >-
                      proof is the Merkle proof that this tx is included in the
                      position in `key`

                      TODO: maybe it could use here better format as we already
                      processed and

                      validated the proof?
                    type: string
                  transaction:
                    format: byte
                    title: transaction is the full transaction in bytes
                    type: string
                title: |-
                  TransactionInfo is the info of a tx on Bitcoin,
                  including
                  - the position of the tx on BTC blockchain
                  - the full tx content
                  - the Merkle proof that this tx is on the above position
                type: object
              title: >-
                proof_epoch_submitted is the proof that the epoch's checkpoint
                is included

                in BTC ledger It is the two TransactionInfo in the best (i.e.,
                earliest)

                checkpoint submission
              type: array
          title: proof is the proof that the chain info is finalized
          type: object
        raw_checkpoint:
          properties:
            bitmap:
              format: byte
              title: >-
                bitmap defines the bitmap that indicates the signers of the BLS
                multi sig
              type: string
            block_hash:
              format: byte
              title: |-
                block_hash defines the 'BlockID.Hash', which is the hash of
                the block that individual BLS sigs are signed on
              type: string
            bls_multi_sig:
              format: byte
              title: >-
                bls_multi_sig defines the multi sig that is aggregated from
                individual BLS

                sigs
              type: string
            epoch_num:
              format: uint64
              title: epoch_num defines the epoch number the raw checkpoint is for
              type: string
          title: raw_checkpoint is the raw checkpoint of this epoch
          type: object
      title: FinalizedChainInfo is the information of a CZ that is BTC-finalised
      type: object
    babylon.zoneconcierge.v1.Forks:
      description: >-
        Forks is a list of non-canonical `IndexedHeader`s at the same height.

        For example, assuming the following blockchain

        ```

        A <- B <- C <- D <- E
                   \ -- D1
                   \ -- D2
        ```

        Then the fork will be {[D1, D2]} where each item is in struct
        `IndexedBlock`.


        Note that each `IndexedHeader` in the fork should have a valid quorum

        certificate. Such forks exist since Babylon considers CZs might have

        dishonest majority. Also note that the IBC-Go implementation will only

        consider the first header in a fork valid, since the subsequent headers

        cannot be verified without knowing the validator set in the previous
        header.
      properties:
        headers:
          items:
            properties:
              babylon_epoch:
                format: uint64
                title: epoch is the epoch number of this header on Babylon ledger
                type: string
              babylon_header_hash:
                format: byte
                title: >-
                  babylon_header_hash is the hash of the babylon block that
                  includes this CZ

                  header
                type: string
              babylon_header_height:
                format: uint64
                title: >-
                  babylon_header_height is the height of the babylon block that
                  includes this CZ

                  header
                type: string
              babylon_tx_hash:
                format: byte
                title: >-
                  babylon_tx_hash is the hash of the tx that includes this
                  header

                  (babylon_block_height, babylon_tx_hash) jointly provides the
                  position of

                  the header on Babylon ledger
                type: string
              consumer_id:
                title: consumer_id is the unique ID of the consumer
                type: string
              hash:
                format: byte
                title: hash is the hash of this header
                type: string
              height:
                format: uint64
                title: >-
                  height is the height of this header on CZ ledger

                  (hash, height) jointly provides the position of the header on
                  CZ ledger
                type: string
              time:
                format: date-time
                title: >-
                  time is the timestamp of this header on CZ ledger

                  it is needed for CZ to unbond all mature
                  validators/delegations

                  before this timestamp when this header is BTC-finalised
                type: string
            title: IndexedHeader is the metadata of a CZ header
            type: object
          title: >-
            blocks is the list of non-canonical indexed headers at the same
            height
          type: array
      type: object
    babylon.zoneconcierge.v1.IndexedHeader:
      properties:
        babylon_epoch:
          format: uint64
          title: epoch is the epoch number of this header on Babylon ledger
          type: string
        babylon_header_hash:
          format: byte
          title: >-
            babylon_header_hash is the hash of the babylon block that includes
            this CZ

            header
          type: string
        babylon_header_height:
          format: uint64
          title: >-
            babylon_header_height is the height of the babylon block that
            includes this CZ

            header
          type: string
        babylon_tx_hash:
          format: byte
          title: >-
            babylon_tx_hash is the hash of the tx that includes this header

            (babylon_block_height, babylon_tx_hash) jointly provides the
            position of

            the header on Babylon ledger
          type: string
        consumer_id:
          title: consumer_id is the unique ID of the consumer
          type: string
        hash:
          format: byte
          title: hash is the hash of this header
          type: string
        height:
          format: uint64
          title: >-
            height is the height of this header on CZ ledger

            (hash, height) jointly provides the position of the header on CZ
            ledger
          type: string
        time:
          format: date-time
          title: |-
            time is the timestamp of this header on CZ ledger
            it is needed for CZ to unbond all mature validators/delegations
            before this timestamp when this header is BTC-finalised
          type: string
      title: IndexedHeader is the metadata of a CZ header
      type: object
    babylon.zoneconcierge.v1.Params:
      description: Params defines the parameters for the module.
      properties:
        ibc_packet_timeout_seconds:
          format: int64
          title: >-
            ibc_packet_timeout_seconds is the time period after which an
            unrelayed 

            IBC packet becomes timeout, measured in seconds
          type: integer
      type: object
    babylon.zoneconcierge.v1.ProofEpochSealed:
      properties:
        proof_epoch_info:
          properties:
            ops:
              items:
                properties:
                  data:
                    format: byte
                    type: string
                  key:
                    format: byte
                    type: string
                  type:
                    type: string
                title: |-
                  ProofOp defines an operation used for calculating Merkle root
                  The data could be arbitrary format, providing nessecary data
                  for example neighbouring node hash
                type: object
              type: array
          title: >-
            proof_epoch_info is the Merkle proof that the epoch's metadata is
            committed

            to `app_hash` of the sealer header
          type: object
        proof_epoch_val_set:
          properties:
            ops:
              items:
                properties:
                  data:
                    format: byte
                    type: string
                  key:
                    format: byte
                    type: string
                  type:
                    type: string
                title: |-
                  ProofOp defines an operation used for calculating Merkle root
                  The data could be arbitrary format, providing nessecary data
                  for example neighbouring node hash
                type: object
              type: array
          title: >-
            proof_epoch_info is the Merkle proof that the epoch's validator set
            is

            committed to `app_hash` of the sealer header
          type: object
        validator_set:
          items:
            properties:
              bls_pub_key:
                format: byte
                title: bls_pub_key is the BLS public key of the validator
                type: string
              validator_address:
                title: validator_address is the address of the validator
                type: string
              voting_power:
                format: uint64
                title: >-
                  voting_power is the voting power of the validator at the given
                  epoch
                type: string
            title: >-
              ValidatorWithBlsKey couples validator address, voting power, and
              its bls

              public key
            type: object
          title: |-
            validator_set is the validator set of the sealed epoch
            This validator set has generated a BLS multisig on `app_hash` of
            the sealer header
          type: array
      title: >-
        ProofEpochSealed is the proof that an epoch is sealed by the sealer
        header,

        i.e., the 2nd header of the next epoch With the access of metadata

        - Metadata of this epoch, which includes the sealer header

        - Raw checkpoint of this epoch

        The verifier can perform the following verification rules:

        - The raw checkpoint's `app_hash` is same as in the sealer header

        - More than 2/3 (in voting power) validators in the validator set of
        this

        epoch have signed `app_hash` of the sealer header

        - The epoch metadata is committed to the `app_hash` of the sealer header

        - The validator set is committed to the `app_hash` of the sealer header
      type: object
    babylon.zoneconcierge.v1.ProofFinalizedChainInfo:
      properties:
        proof_cz_header_in_epoch:
          properties:
            ops:
              items:
                properties:
                  data:
                    format: byte
                    type: string
                  key:
                    format: byte
                    type: string
                  type:
                    type: string
                title: |-
                  ProofOp defines an operation used for calculating Merkle root
                  The data could be arbitrary format, providing nessecary data
                  for example neighbouring node hash
                type: object
              type: array
          title: >-
            proof_cz_header_in_epoch is the proof that the CZ header is
            timestamped

            within a certain epoch
          type: object
        proof_epoch_sealed:
          properties:
            proof_epoch_info:
              properties:
                ops:
                  items:
                    properties:
                      data:
                        format: byte
                        type: string
                      key:
                        format: byte
                        type: string
                      type:
                        type: string
                    title: >-
                      ProofOp defines an operation used for calculating Merkle
                      root

                      The data could be arbitrary format, providing nessecary
                      data

                      for example neighbouring node hash
                    type: object
                  type: array
              title: >-
                proof_epoch_info is the Merkle proof that the epoch's metadata
                is committed

                to `app_hash` of the sealer header
              type: object
            proof_epoch_val_set:
              properties:
                ops:
                  items:
                    properties:
                      data:
                        format: byte
                        type: string
                      key:
                        format: byte
                        type: string
                      type:
                        type: string
                    title: >-
                      ProofOp defines an operation used for calculating Merkle
                      root

                      The data could be arbitrary format, providing nessecary
                      data

                      for example neighbouring node hash
                    type: object
                  type: array
              title: >-
                proof_epoch_info is the Merkle proof that the epoch's validator
                set is

                committed to `app_hash` of the sealer header
              type: object
            validator_set:
              items:
                properties:
                  bls_pub_key:
                    format: byte
                    title: bls_pub_key is the BLS public key of the validator
                    type: string
                  validator_address:
                    title: validator_address is the address of the validator
                    type: string
                  voting_power:
                    format: uint64
                    title: >-
                      voting_power is the voting power of the validator at the
                      given epoch
                    type: string
                title: >-
                  ValidatorWithBlsKey couples validator address, voting power,
                  and its bls

                  public key
                type: object
              title: |-
                validator_set is the validator set of the sealed epoch
                This validator set has generated a BLS multisig on `app_hash` of
                the sealer header
              type: array
          title: proof_epoch_sealed is the proof that the epoch is sealed
          type: object
        proof_epoch_submitted:
          items:
            properties:
              key:
                description: >-
                  key is the position (txIdx, blockHash) of this tx on BTC
                  blockchain

                  Although it is already a part of SubmissionKey, we store it
                  here again

                  to make TransactionInfo self-contained.

                  For example, storing the key allows TransactionInfo to not
                  relay on

                  the fact that TransactionInfo will be ordered in the same
                  order as

                  TransactionKeys in SubmissionKey.
                properties:
                  hash:
                    format: byte
                    type: string
                  index:
                    format: int64
                    type: integer
                title: >-
                  Each provided OP_RETURN transaction can be identified by hash
                  of block in

                  which transaction was included and transaction index in the
                  block
                type: object
              proof:
                format: byte
                title: >-
                  proof is the Merkle proof that this tx is included in the
                  position in `key`

                  TODO: maybe it could use here better format as we already
                  processed and

                  validated the proof?
                type: string
              transaction:
                format: byte
                title: transaction is the full transaction in bytes
                type: string
            title: |-
              TransactionInfo is the info of a tx on Bitcoin,
              including
              - the position of the tx on BTC blockchain
              - the full tx content
              - the Merkle proof that this tx is on the above position
            type: object
          title: >-
            proof_epoch_submitted is the proof that the epoch's checkpoint is
            included

            in BTC ledger It is the two TransactionInfo in the best (i.e.,
            earliest)

            checkpoint submission
          type: array
      title: |-
        ProofFinalizedChainInfo is a set of proofs that attest a chain info is
        BTC-finalised
      type: object
    babylon.zoneconcierge.v1.QueryChainListResponse:
      properties:
        consumer_ids:
          items:
            type: string
          title: consumer_ids are IDs of the chains in ascending alphabetical order
          type: array
        pagination:
          description: |-
            PageResponse is to be embedded in gRPC response messages where the
            corresponding request message has used PageRequest.

             message SomeResponse {
                     repeated Bar results = 1;
                     PageResponse page = 2;
             }
          properties:
            next_key:
              description: |-
                next_key is the key to be passed to PageRequest.key to
                query the next page most efficiently. It will be empty if
                there are no more results.
              format: byte
              type: string
            total:
              format: uint64
              title: >-
                total is total number of results available if
                PageRequest.count_total

                was set, its value is undefined otherwise
              type: string
          title: pagination defines the pagination in the response
          type: object
      title: >-
        QueryChainListResponse is response type for the Query/ChainList RPC
        method
      type: object
    babylon.zoneconcierge.v1.QueryChainsInfoResponse:
      description: >-
        QueryChainsInfoResponse is response type for the Query/ChainsInfo RPC
        method.
      properties:
        chains_info:
          items:
            properties:
              consumer_id:
                title: consumer_id is the ID of the consumer
                type: string
              latest_forks:
                description: >-
                  Forks is a list of non-canonical `IndexedHeader`s at the same
                  height.

                  For example, assuming the following blockchain

                  ```

                  A <- B <- C <- D <- E
                             \ -- D1
                             \ -- D2
                  ```

                  Then the fork will be {[D1, D2]} where each item is in struct
                  `IndexedBlock`.


                  Note that each `IndexedHeader` in the fork should have a valid
                  quorum

                  certificate. Such forks exist since Babylon considers CZs
                  might have

                  dishonest majority. Also note that the IBC-Go implementation
                  will only

                  consider the first header in a fork valid, since the
                  subsequent headers

                  cannot be verified without knowing the validator set in the
                  previous header.
                properties:
                  headers:
                    items:
                      properties:
                        babylon_epoch:
                          format: uint64
                          title: >-
                            epoch is the epoch number of this header on Babylon
                            ledger
                          type: string
                        babylon_header_hash:
                          format: byte
                          title: >-
                            babylon_header_hash is the hash of the babylon block
                            that includes this CZ

                            header
                          type: string
                        babylon_header_height:
                          format: uint64
                          title: >-
                            babylon_header_height is the height of the babylon
                            block that includes this CZ

                            header
                          type: string
                        babylon_tx_hash:
                          format: byte
                          title: >-
                            babylon_tx_hash is the hash of the tx that includes
                            this header

                            (babylon_block_height, babylon_tx_hash) jointly
                            provides the position of

                            the header on Babylon ledger
                          type: string
                        consumer_id:
                          title: consumer_id is the unique ID of the consumer
                          type: string
                        hash:
                          format: byte
                          title: hash is the hash of this header
                          type: string
                        height:
                          format: uint64
                          title: >-
                            height is the height of this header on CZ ledger

                            (hash, height) jointly provides the position of the
                            header on CZ ledger
                          type: string
                        time:
                          format: date-time
                          title: >-
                            time is the timestamp of this header on CZ ledger

                            it is needed for CZ to unbond all mature
                            validators/delegations

                            before this timestamp when this header is
                            BTC-finalised
                          type: string
                      title: IndexedHeader is the metadata of a CZ header
                      type: object
                    title: >-
                      blocks is the list of non-canonical indexed headers at the
                      same height
                    type: array
                title: >-
                  latest_forks is the latest forks, formed as a series of
                  IndexedHeader (from

                  low to high)
                type: object
              latest_header:
                properties:
                  babylon_epoch:
                    format: uint64
                    title: epoch is the epoch number of this header on Babylon ledger
                    type: string
                  babylon_header_hash:
                    format: byte
                    title: >-
                      babylon_header_hash is the hash of the babylon block that
                      includes this CZ

                      header
                    type: string
                  babylon_header_height:
                    format: uint64
                    title: >-
                      babylon_header_height is the height of the babylon block
                      that includes this CZ

                      header
                    type: string
                  babylon_tx_hash:
                    format: byte
                    title: >-
                      babylon_tx_hash is the hash of the tx that includes this
                      header

                      (babylon_block_height, babylon_tx_hash) jointly provides
                      the position of

                      the header on Babylon ledger
                    type: string
                  consumer_id:
                    title: consumer_id is the unique ID of the consumer
                    type: string
                  hash:
                    format: byte
                    title: hash is the hash of this header
                    type: string
                  height:
                    format: uint64
                    title: >-
                      height is the height of this header on CZ ledger

                      (hash, height) jointly provides the position of the header
                      on CZ ledger
                    type: string
                  time:
                    format: date-time
                    title: >-
                      time is the timestamp of this header on CZ ledger

                      it is needed for CZ to unbond all mature
                      validators/delegations

                      before this timestamp when this header is BTC-finalised
                    type: string
                title: IndexedHeader is the metadata of a CZ header
                type: object
              timestamped_headers_count:
                format: uint64
                title: >-
                  timestamped_headers_count is the number of timestamped headers
                  in CZ's

                  canonical chain
                type: string
            title: ChainInfo is the information of a CZ
            type: object
          type: array
      type: object
    babylon.zoneconcierge.v1.QueryEpochChainsInfoResponse:
      description: >-
        QueryEpochChainsInfoResponse is response type for the
        Query/EpochChainsInfo RPC

        method.
      properties:
        chains_info:
          items:
            properties:
              consumer_id:
                title: consumer_id is the ID of the consumer
                type: string
              latest_forks:
                description: >-
                  Forks is a list of non-canonical `IndexedHeader`s at the same
                  height.

                  For example, assuming the following blockchain

                  ```

                  A <- B <- C <- D <- E
                             \ -- D1
                             \ -- D2
                  ```

                  Then the fork will be {[D1, D2]} where each item is in struct
                  `IndexedBlock`.


                  Note that each `IndexedHeader` in the fork should have a valid
                  quorum

                  certificate. Such forks exist since Babylon considers CZs
                  might have

                  dishonest majority. Also note that the IBC-Go implementation
                  will only

                  consider the first header in a fork valid, since the
                  subsequent headers

                  cannot be verified without knowing the validator set in the
                  previous header.
                properties:
                  headers:
                    items:
                      properties:
                        babylon_epoch:
                          format: uint64
                          title: >-
                            epoch is the epoch number of this header on Babylon
                            ledger
                          type: string
                        babylon_header_hash:
                          format: byte
                          title: >-
                            babylon_header_hash is the hash of the babylon block
                            that includes this CZ

                            header
                          type: string
                        babylon_header_height:
                          format: uint64
                          title: >-
                            babylon_header_height is the height of the babylon
                            block that includes this CZ

                            header
                          type: string
                        babylon_tx_hash:
                          format: byte
                          title: >-
                            babylon_tx_hash is the hash of the tx that includes
                            this header

                            (babylon_block_height, babylon_tx_hash) jointly
                            provides the position of

                            the header on Babylon ledger
                          type: string
                        consumer_id:
                          title: consumer_id is the unique ID of the consumer
                          type: string
                        hash:
                          format: byte
                          title: hash is the hash of this header
                          type: string
                        height:
                          format: uint64
                          title: >-
                            height is the height of this header on CZ ledger

                            (hash, height) jointly provides the position of the
                            header on CZ ledger
                          type: string
                        time:
                          format: date-time
                          title: >-
                            time is the timestamp of this header on CZ ledger

                            it is needed for CZ to unbond all mature
                            validators/delegations

                            before this timestamp when this header is
                            BTC-finalised
                          type: string
                      title: IndexedHeader is the metadata of a CZ header
                      type: object
                    title: >-
                      blocks is the list of non-canonical indexed headers at the
                      same height
                    type: array
                title: >-
                  latest_forks is the latest forks, formed as a series of
                  IndexedHeader (from

                  low to high)
                type: object
              latest_header:
                properties:
                  babylon_epoch:
                    format: uint64
                    title: epoch is the epoch number of this header on Babylon ledger
                    type: string
                  babylon_header_hash:
                    format: byte
                    title: >-
                      babylon_header_hash is the hash of the babylon block that
                      includes this CZ

                      header
                    type: string
                  babylon_header_height:
                    format: uint64
                    title: >-
                      babylon_header_height is the height of the babylon block
                      that includes this CZ

                      header
                    type: string
                  babylon_tx_hash:
                    format: byte
                    title: >-
                      babylon_tx_hash is the hash of the tx that includes this
                      header

                      (babylon_block_height, babylon_tx_hash) jointly provides
                      the position of

                      the header on Babylon ledger
                    type: string
                  consumer_id:
                    title: consumer_id is the unique ID of the consumer
                    type: string
                  hash:
                    format: byte
                    title: hash is the hash of this header
                    type: string
                  height:
                    format: uint64
                    title: >-
                      height is the height of this header on CZ ledger

                      (hash, height) jointly provides the position of the header
                      on CZ ledger
                    type: string
                  time:
                    format: date-time
                    title: >-
                      time is the timestamp of this header on CZ ledger

                      it is needed for CZ to unbond all mature
                      validators/delegations

                      before this timestamp when this header is BTC-finalised
                    type: string
                title: IndexedHeader is the metadata of a CZ header
                type: object
              timestamped_headers_count:
                format: uint64
                title: >-
                  timestamped_headers_count is the number of timestamped headers
                  in CZ's

                  canonical chain
                type: string
            title: ChainInfo is the information of a CZ
            type: object
          title: chain_info is the info of the CZ
          type: array
      type: object
    babylon.zoneconcierge.v1.QueryFinalizedChainInfoUntilHeightResponse:
      description: |-
        QueryFinalizedChainInfoUntilHeightResponse is response type for the
        Query/FinalizedChainInfoUntilHeight RPC method.
      properties:
        btc_submission_key:
          properties:
            key:
              items:
                properties:
                  hash:
                    format: byte
                    type: string
                  index:
                    format: int64
                    type: integer
                title: >-
                  Each provided OP_RETURN transaction can be identified by hash
                  of block in

                  which transaction was included and transaction index in the
                  block
                type: object
              type: array
          title: |-
            btc_submission_key is position of two BTC txs that include the raw
            checkpoint of this epoch
          type: object
        epoch_info:
          properties:
            current_epoch_interval:
              format: uint64
              title: >-
                current_epoch_interval is the epoch interval at the time of this
                epoch
              type: string
            epoch_number:
              format: uint64
              title: epoch_number is the number of this epoch
              type: string
            first_block_height:
              format: uint64
              title: >-
                first_block_height is the height of the first block in this
                epoch
              type: string
            last_block_time:
              description: >-
                last_block_time is the time of the last block in this epoch.

                Babylon needs to remember the last header's time of each epoch
                to complete

                unbonding validators/delegations when a previous epoch's
                checkpoint is

                finalised. The last_block_time field is nil in the epoch's
                beginning, and

                is set upon the end of this epoch.
              format: date-time
              type: string
            sealer_app_hash:
              format: byte
              title: >-
                sealer is the last block of the sealed epoch

                sealer_app_hash points to the sealer but stored in the 1st
                header

                of the next epoch
              type: string
            sealer_block_hash:
              format: byte
              title: |-
                sealer_block_hash is the hash of the sealer
                the validator set has generated a BLS multisig on the hash,
                i.e., hash of the last block in the epoch
              type: string
          title: epoch_info is the metadata of the last BTC-finalised epoch
          type: object
        finalized_chain_info:
          properties:
            consumer_id:
              title: consumer_id is the ID of the consumer
              type: string
            latest_forks:
              description: >-
                Forks is a list of non-canonical `IndexedHeader`s at the same
                height.

                For example, assuming the following blockchain

                ```

                A <- B <- C <- D <- E
                           \ -- D1
                           \ -- D2
                ```

                Then the fork will be {[D1, D2]} where each item is in struct
                `IndexedBlock`.


                Note that each `IndexedHeader` in the fork should have a valid
                quorum

                certificate. Such forks exist since Babylon considers CZs might
                have

                dishonest majority. Also note that the IBC-Go implementation
                will only

                consider the first header in a fork valid, since the subsequent
                headers

                cannot be verified without knowing the validator set in the
                previous header.
              properties:
                headers:
                  items:
                    properties:
                      babylon_epoch:
                        format: uint64
                        title: >-
                          epoch is the epoch number of this header on Babylon
                          ledger
                        type: string
                      babylon_header_hash:
                        format: byte
                        title: >-
                          babylon_header_hash is the hash of the babylon block
                          that includes this CZ

                          header
                        type: string
                      babylon_header_height:
                        format: uint64
                        title: >-
                          babylon_header_height is the height of the babylon
                          block that includes this CZ

                          header
                        type: string
                      babylon_tx_hash:
                        format: byte
                        title: >-
                          babylon_tx_hash is the hash of the tx that includes
                          this header

                          (babylon_block_height, babylon_tx_hash) jointly
                          provides the position of

                          the header on Babylon ledger
                        type: string
                      consumer_id:
                        title: consumer_id is the unique ID of the consumer
                        type: string
                      hash:
                        format: byte
                        title: hash is the hash of this header
                        type: string
                      height:
                        format: uint64
                        title: >-
                          height is the height of this header on CZ ledger

                          (hash, height) jointly provides the position of the
                          header on CZ ledger
                        type: string
                      time:
                        format: date-time
                        title: >-
                          time is the timestamp of this header on CZ ledger

                          it is needed for CZ to unbond all mature
                          validators/delegations

                          before this timestamp when this header is
                          BTC-finalised
                        type: string
                    title: IndexedHeader is the metadata of a CZ header
                    type: object
                  title: >-
                    blocks is the list of non-canonical indexed headers at the
                    same height
                  type: array
              title: >-
                latest_forks is the latest forks, formed as a series of
                IndexedHeader (from

                low to high)
              type: object
            latest_header:
              properties:
                babylon_epoch:
                  format: uint64
                  title: epoch is the epoch number of this header on Babylon ledger
                  type: string
                babylon_header_hash:
                  format: byte
                  title: >-
                    babylon_header_hash is the hash of the babylon block that
                    includes this CZ

                    header
                  type: string
                babylon_header_height:
                  format: uint64
                  title: >-
                    babylon_header_height is the height of the babylon block
                    that includes this CZ

                    header
                  type: string
                babylon_tx_hash:
                  format: byte
                  title: >-
                    babylon_tx_hash is the hash of the tx that includes this
                    header

                    (babylon_block_height, babylon_tx_hash) jointly provides the
                    position of

                    the header on Babylon ledger
                  type: string
                consumer_id:
                  title: consumer_id is the unique ID of the consumer
                  type: string
                hash:
                  format: byte
                  title: hash is the hash of this header
                  type: string
                height:
                  format: uint64
                  title: >-
                    height is the height of this header on CZ ledger

                    (hash, height) jointly provides the position of the header
                    on CZ ledger
                  type: string
                time:
                  format: date-time
                  title: >-
                    time is the timestamp of this header on CZ ledger

                    it is needed for CZ to unbond all mature
                    validators/delegations

                    before this timestamp when this header is BTC-finalised
                  type: string
              title: IndexedHeader is the metadata of a CZ header
              type: object
            timestamped_headers_count:
              format: uint64
              title: >-
                timestamped_headers_count is the number of timestamped headers
                in CZ's

                canonical chain
              type: string
          title: ChainInfo is the information of a CZ
          type: object
        proof:
          properties:
            proof_cz_header_in_epoch:
              properties:
                ops:
                  items:
                    properties:
                      data:
                        format: byte
                        type: string
                      key:
                        format: byte
                        type: string
                      type:
                        type: string
                    title: >-
                      ProofOp defines an operation used for calculating Merkle
                      root

                      The data could be arbitrary format, providing nessecary
                      data

                      for example neighbouring node hash
                    type: object
                  type: array
              title: >-
                proof_cz_header_in_epoch is the proof that the CZ header is
                timestamped

                within a certain epoch
              type: object
            proof_epoch_sealed:
              properties:
                proof_epoch_info:
                  properties:
                    ops:
                      items:
                        properties:
                          data:
                            format: byte
                            type: string
                          key:
                            format: byte
                            type: string
                          type:
                            type: string
                        title: >-
                          ProofOp defines an operation used for calculating
                          Merkle root

                          The data could be arbitrary format, providing
                          nessecary data

                          for example neighbouring node hash
                        type: object
                      type: array
                  title: >-
                    proof_epoch_info is the Merkle proof that the epoch's
                    metadata is committed

                    to `app_hash` of the sealer header
                  type: object
                proof_epoch_val_set:
                  properties:
                    ops:
                      items:
                        properties:
                          data:
                            format: byte
                            type: string
                          key:
                            format: byte
                            type: string
                          type:
                            type: string
                        title: >-
                          ProofOp defines an operation used for calculating
                          Merkle root

                          The data could be arbitrary format, providing
                          nessecary data

                          for example neighbouring node hash
                        type: object
                      type: array
                  title: >-
                    proof_epoch_info is the Merkle proof that the epoch's
                    validator set is

                    committed to `app_hash` of the sealer header
                  type: object
                validator_set:
                  items:
                    properties:
                      bls_pub_key:
                        format: byte
                        title: bls_pub_key is the BLS public key of the validator
                        type: string
                      validator_address:
                        title: validator_address is the address of the validator
                        type: string
                      voting_power:
                        format: uint64
                        title: >-
                          voting_power is the voting power of the validator at
                          the given epoch
                        type: string
                    title: >-
                      ValidatorWithBlsKey couples validator address, voting
                      power, and its bls

                      public key
                    type: object
                  title: >-
                    validator_set is the validator set of the sealed epoch

                    This validator set has generated a BLS multisig on
                    `app_hash` of

                    the sealer header
                  type: array
              title: proof_epoch_sealed is the proof that the epoch is sealed
              type: object
            proof_epoch_submitted:
              items:
                properties:
                  key:
                    description: >-
                      key is the position (txIdx, blockHash) of this tx on BTC
                      blockchain

                      Although it is already a part of SubmissionKey, we store
                      it here again

                      to make TransactionInfo self-contained.

                      For example, storing the key allows TransactionInfo to not
                      relay on

                      the fact that TransactionInfo will be ordered in the same
                      order as

                      TransactionKeys in SubmissionKey.
                    properties:
                      hash:
                        format: byte
                        type: string
                      index:
                        format: int64
                        type: integer
                    title: >-
                      Each provided OP_RETURN transaction can be identified by
                      hash of block in

                      which transaction was included and transaction index in
                      the block
                    type: object
                  proof:
                    format: byte
                    title: >-
                      proof is the Merkle proof that this tx is included in the
                      position in `key`

                      TODO: maybe it could use here better format as we already
                      processed and

                      validated the proof?
                    type: string
                  transaction:
                    format: byte
                    title: transaction is the full transaction in bytes
                    type: string
                title: |-
                  TransactionInfo is the info of a tx on Bitcoin,
                  including
                  - the position of the tx on BTC blockchain
                  - the full tx content
                  - the Merkle proof that this tx is on the above position
                type: object
              title: >-
                proof_epoch_submitted is the proof that the epoch's checkpoint
                is included

                in BTC ledger It is the two TransactionInfo in the best (i.e.,
                earliest)

                checkpoint submission
              type: array
          title: proof is the proof that the chain info is finalized
          type: object
        raw_checkpoint:
          properties:
            bitmap:
              format: byte
              title: >-
                bitmap defines the bitmap that indicates the signers of the BLS
                multi sig
              type: string
            block_hash:
              format: byte
              title: |-
                block_hash defines the 'BlockID.Hash', which is the hash of
                the block that individual BLS sigs are signed on
              type: string
            bls_multi_sig:
              format: byte
              title: >-
                bls_multi_sig defines the multi sig that is aggregated from
                individual BLS

                sigs
              type: string
            epoch_num:
              format: uint64
              title: epoch_num defines the epoch number the raw checkpoint is for
              type: string
          title: raw_checkpoint is the raw checkpoint of this epoch
          type: object
      type: object
    babylon.zoneconcierge.v1.QueryFinalizedChainsInfoResponse:
      description: |-
        QueryFinalizedChainsInfoResponse is response type for the
        Query/FinalizedChainsInfo RPC method.
      properties:
        finalized_chains_info:
          items:
            properties:
              btc_submission_key:
                properties:
                  key:
                    items:
                      properties:
                        hash:
                          format: byte
                          type: string
                        index:
                          format: int64
                          type: integer
                      title: >-
                        Each provided OP_RETURN transaction can be identified by
                        hash of block in

                        which transaction was included and transaction index in
                        the block
                      type: object
                    type: array
                title: >-
                  btc_submission_key is position of two BTC txs that include the
                  raw

                  checkpoint of this epoch
                type: object
              consumer_id:
                title: consumer_id is the ID of the consumer
                type: string
              epoch_info:
                properties:
                  current_epoch_interval:
                    format: uint64
                    title: >-
                      current_epoch_interval is the epoch interval at the time
                      of this epoch
                    type: string
                  epoch_number:
                    format: uint64
                    title: epoch_number is the number of this epoch
                    type: string
                  first_block_height:
                    format: uint64
                    title: >-
                      first_block_height is the height of the first block in
                      this epoch
                    type: string
                  last_block_time:
                    description: >-
                      last_block_time is the time of the last block in this
                      epoch.

                      Babylon needs to remember the last header's time of each
                      epoch to complete

                      unbonding validators/delegations when a previous epoch's
                      checkpoint is

                      finalised. The last_block_time field is nil in the epoch's
                      beginning, and

                      is set upon the end of this epoch.
                    format: date-time
                    type: string
                  sealer_app_hash:
                    format: byte
                    title: >-
                      sealer is the last block of the sealed epoch

                      sealer_app_hash points to the sealer but stored in the 1st
                      header

                      of the next epoch
                    type: string
                  sealer_block_hash:
                    format: byte
                    title: >-
                      sealer_block_hash is the hash of the sealer

                      the validator set has generated a BLS multisig on the
                      hash,

                      i.e., hash of the last block in the epoch
                    type: string
                title: epoch_info is the metadata of the last BTC-finalised epoch
                type: object
              finalized_chain_info:
                properties:
                  consumer_id:
                    title: consumer_id is the ID of the consumer
                    type: string
                  latest_forks:
                    description: >-
                      Forks is a list of non-canonical `IndexedHeader`s at the
                      same height.

                      For example, assuming the following blockchain

                      ```

                      A <- B <- C <- D <- E
                                 \ -- D1
                                 \ -- D2
                      ```

                      Then the fork will be {[D1, D2]} where each item is in
                      struct `IndexedBlock`.


                      Note that each `IndexedHeader` in the fork should have a
                      valid quorum

                      certificate. Such forks exist since Babylon considers CZs
                      might have

                      dishonest majority. Also note that the IBC-Go
                      implementation will only

                      consider the first header in a fork valid, since the
                      subsequent headers

                      cannot be verified without knowing the validator set in
                      the previous header.
                    properties:
                      headers:
                        items:
                          properties:
                            babylon_epoch:
                              format: uint64
                              title: >-
                                epoch is the epoch number of this header on
                                Babylon ledger
                              type: string
                            babylon_header_hash:
                              format: byte
                              title: >-
                                babylon_header_hash is the hash of the babylon
                                block that includes this CZ

                                header
                              type: string
                            babylon_header_height:
                              format: uint64
                              title: >-
                                babylon_header_height is the height of the
                                babylon block that includes this CZ

                                header
                              type: string
                            babylon_tx_hash:
                              format: byte
                              title: >-
                                babylon_tx_hash is the hash of the tx that
                                includes this header

                                (babylon_block_height, babylon_tx_hash) jointly
                                provides the position of

                                the header on Babylon ledger
                              type: string
                            consumer_id:
                              title: consumer_id is the unique ID of the consumer
                              type: string
                            hash:
                              format: byte
                              title: hash is the hash of this header
                              type: string
                            height:
                              format: uint64
                              title: >-
                                height is the height of this header on CZ ledger

                                (hash, height) jointly provides the position of
                                the header on CZ ledger
                              type: string
                            time:
                              format: date-time
                              title: >-
                                time is the timestamp of this header on CZ
                                ledger

                                it is needed for CZ to unbond all mature
                                validators/delegations

                                before this timestamp when this header is
                                BTC-finalised
                              type: string
                          title: IndexedHeader is the metadata of a CZ header
                          type: object
                        title: >-
                          blocks is the list of non-canonical indexed headers at
                          the same height
                        type: array
                    title: >-
                      latest_forks is the latest forks, formed as a series of
                      IndexedHeader (from

                      low to high)
                    type: object
                  latest_header:
                    properties:
                      babylon_epoch:
                        format: uint64
                        title: >-
                          epoch is the epoch number of this header on Babylon
                          ledger
                        type: string
                      babylon_header_hash:
                        format: byte
                        title: >-
                          babylon_header_hash is the hash of the babylon block
                          that includes this CZ

                          header
                        type: string
                      babylon_header_height:
                        format: uint64
                        title: >-
                          babylon_header_height is the height of the babylon
                          block that includes this CZ

                          header
                        type: string
                      babylon_tx_hash:
                        format: byte
                        title: >-
                          babylon_tx_hash is the hash of the tx that includes
                          this header

                          (babylon_block_height, babylon_tx_hash) jointly
                          provides the position of

                          the header on Babylon ledger
                        type: string
                      consumer_id:
                        title: consumer_id is the unique ID of the consumer
                        type: string
                      hash:
                        format: byte
                        title: hash is the hash of this header
                        type: string
                      height:
                        format: uint64
                        title: >-
                          height is the height of this header on CZ ledger

                          (hash, height) jointly provides the position of the
                          header on CZ ledger
                        type: string
                      time:
                        format: date-time
                        title: >-
                          time is the timestamp of this header on CZ ledger

                          it is needed for CZ to unbond all mature
                          validators/delegations

                          before this timestamp when this header is
                          BTC-finalised
                        type: string
                    title: IndexedHeader is the metadata of a CZ header
                    type: object
                  timestamped_headers_count:
                    format: uint64
                    title: >-
                      timestamped_headers_count is the number of timestamped
                      headers in CZ's

                      canonical chain
                    type: string
                title: ChainInfo is the information of a CZ
                type: object
              proof:
                properties:
                  proof_cz_header_in_epoch:
                    properties:
                      ops:
                        items:
                          properties:
                            data:
                              format: byte
                              type: string
                            key:
                              format: byte
                              type: string
                            type:
                              type: string
                          title: >-
                            ProofOp defines an operation used for calculating
                            Merkle root

                            The data could be arbitrary format, providing
                            nessecary data

                            for example neighbouring node hash
                          type: object
                        type: array
                    title: >-
                      proof_cz_header_in_epoch is the proof that the CZ header
                      is timestamped

                      within a certain epoch
                    type: object
                  proof_epoch_sealed:
                    properties:
                      proof_epoch_info:
                        properties:
                          ops:
                            items:
                              properties:
                                data:
                                  format: byte
                                  type: string
                                key:
                                  format: byte
                                  type: string
                                type:
                                  type: string
                              title: >-
                                ProofOp defines an operation used for
                                calculating Merkle root

                                The data could be arbitrary format, providing
                                nessecary data

                                for example neighbouring node hash
                              type: object
                            type: array
                        title: >-
                          proof_epoch_info is the Merkle proof that the epoch's
                          metadata is committed

                          to `app_hash` of the sealer header
                        type: object
                      proof_epoch_val_set:
                        properties:
                          ops:
                            items:
                              properties:
                                data:
                                  format: byte
                                  type: string
                                key:
                                  format: byte
                                  type: string
                                type:
                                  type: string
                              title: >-
                                ProofOp defines an operation used for
                                calculating Merkle root

                                The data could be arbitrary format, providing
                                nessecary data

                                for example neighbouring node hash
                              type: object
                            type: array
                        title: >-
                          proof_epoch_info is the Merkle proof that the epoch's
                          validator set is

                          committed to `app_hash` of the sealer header
                        type: object
                      validator_set:
                        items:
                          properties:
                            bls_pub_key:
                              format: byte
                              title: >-
                                bls_pub_key is the BLS public key of the
                                validator
                              type: string
                            validator_address:
                              title: >-
                                validator_address is the address of the
                                validator
                              type: string
                            voting_power:
                              format: uint64
                              title: >-
                                voting_power is the voting power of the
                                validator at the given epoch
                              type: string
                          title: >-
                            ValidatorWithBlsKey couples validator address,
                            voting power, and its bls

                            public key
                          type: object
                        title: >-
                          validator_set is the validator set of the sealed epoch

                          This validator set has generated a BLS multisig on
                          `app_hash` of

                          the sealer header
                        type: array
                    title: proof_epoch_sealed is the proof that the epoch is sealed
                    type: object
                  proof_epoch_submitted:
                    items:
                      properties:
                        key:
                          description: >-
                            key is the position (txIdx, blockHash) of this tx on
                            BTC blockchain

                            Although it is already a part of SubmissionKey, we
                            store it here again

                            to make TransactionInfo self-contained.

                            For example, storing the key allows TransactionInfo
                            to not relay on

                            the fact that TransactionInfo will be ordered in the
                            same order as

                            TransactionKeys in SubmissionKey.
                          properties:
                            hash:
                              format: byte
                              type: string
                            index:
                              format: int64
                              type: integer
                          title: >-
                            Each provided OP_RETURN transaction can be
                            identified by hash of block in

                            which transaction was included and transaction index
                            in the block
                          type: object
                        proof:
                          format: byte
                          title: >-
                            proof is the Merkle proof that this tx is included
                            in the position in `key`

                            TODO: maybe it could use here better format as we
                            already processed and

                            validated the proof?
                          type: string
                        transaction:
                          format: byte
                          title: transaction is the full transaction in bytes
                          type: string
                      title: |-
                        TransactionInfo is the info of a tx on Bitcoin,
                        including
                        - the position of the tx on BTC blockchain
                        - the full tx content
                        - the Merkle proof that this tx is on the above position
                      type: object
                    title: >-
                      proof_epoch_submitted is the proof that the epoch's
                      checkpoint is included

                      in BTC ledger It is the two TransactionInfo in the best
                      (i.e., earliest)

                      checkpoint submission
                    type: array
                title: proof is the proof that the chain info is finalized
                type: object
              raw_checkpoint:
                properties:
                  bitmap:
                    format: byte
                    title: >-
                      bitmap defines the bitmap that indicates the signers of
                      the BLS multi sig
                    type: string
                  block_hash:
                    format: byte
                    title: >-
                      block_hash defines the 'BlockID.Hash', which is the hash
                      of

                      the block that individual BLS sigs are signed on
                    type: string
                  bls_multi_sig:
                    format: byte
                    title: >-
                      bls_multi_sig defines the multi sig that is aggregated
                      from individual BLS

                      sigs
                    type: string
                  epoch_num:
                    format: uint64
                    title: >-
                      epoch_num defines the epoch number the raw checkpoint is
                      for
                    type: string
                title: raw_checkpoint is the raw checkpoint of this epoch
                type: object
            title: >-
              FinalizedChainInfo is the information of a CZ that is
              BTC-finalised
            type: object
          type: array
      type: object
    babylon.zoneconcierge.v1.QueryHeaderResponse:
      description: QueryHeaderResponse is response type for the Query/Header RPC method.
      properties:
        fork_headers:
          description: >-
            Forks is a list of non-canonical `IndexedHeader`s at the same
            height.

            For example, assuming the following blockchain

            ```

            A <- B <- C <- D <- E
                       \ -- D1
                       \ -- D2
            ```

            Then the fork will be {[D1, D2]} where each item is in struct
            `IndexedBlock`.


            Note that each `IndexedHeader` in the fork should have a valid
            quorum

            certificate. Such forks exist since Babylon considers CZs might have

            dishonest majority. Also note that the IBC-Go implementation will
            only

            consider the first header in a fork valid, since the subsequent
            headers

            cannot be verified without knowing the validator set in the previous
            header.
          properties:
            headers:
              items:
                properties:
                  babylon_epoch:
                    format: uint64
                    title: epoch is the epoch number of this header on Babylon ledger
                    type: string
                  babylon_header_hash:
                    format: byte
                    title: >-
                      babylon_header_hash is the hash of the babylon block that
                      includes this CZ

                      header
                    type: string
                  babylon_header_height:
                    format: uint64
                    title: >-
                      babylon_header_height is the height of the babylon block
                      that includes this CZ

                      header
                    type: string
                  babylon_tx_hash:
                    format: byte
                    title: >-
                      babylon_tx_hash is the hash of the tx that includes this
                      header

                      (babylon_block_height, babylon_tx_hash) jointly provides
                      the position of

                      the header on Babylon ledger
                    type: string
                  consumer_id:
                    title: consumer_id is the unique ID of the consumer
                    type: string
                  hash:
                    format: byte
                    title: hash is the hash of this header
                    type: string
                  height:
                    format: uint64
                    title: >-
                      height is the height of this header on CZ ledger

                      (hash, height) jointly provides the position of the header
                      on CZ ledger
                    type: string
                  time:
                    format: date-time
                    title: >-
                      time is the timestamp of this header on CZ ledger

                      it is needed for CZ to unbond all mature
                      validators/delegations

                      before this timestamp when this header is BTC-finalised
                    type: string
                title: IndexedHeader is the metadata of a CZ header
                type: object
              title: >-
                blocks is the list of non-canonical indexed headers at the same
                height
              type: array
          type: object
        header:
          properties:
            babylon_epoch:
              format: uint64
              title: epoch is the epoch number of this header on Babylon ledger
              type: string
            babylon_header_hash:
              format: byte
              title: >-
                babylon_header_hash is the hash of the babylon block that
                includes this CZ

                header
              type: string
            babylon_header_height:
              format: uint64
              title: >-
                babylon_header_height is the height of the babylon block that
                includes this CZ

                header
              type: string
            babylon_tx_hash:
              format: byte
              title: >-
                babylon_tx_hash is the hash of the tx that includes this header

                (babylon_block_height, babylon_tx_hash) jointly provides the
                position of

                the header on Babylon ledger
              type: string
            consumer_id:
              title: consumer_id is the unique ID of the consumer
              type: string
            hash:
              format: byte
              title: hash is the hash of this header
              type: string
            height:
              format: uint64
              title: >-
                height is the height of this header on CZ ledger

                (hash, height) jointly provides the position of the header on CZ
                ledger
              type: string
            time:
              format: date-time
              title: |-
                time is the timestamp of this header on CZ ledger
                it is needed for CZ to unbond all mature validators/delegations
                before this timestamp when this header is BTC-finalised
              type: string
          title: IndexedHeader is the metadata of a CZ header
          type: object
      type: object
    babylon.zoneconcierge.v1.QueryListEpochHeadersResponse:
      description: >-
        QueryListEpochHeadersResponse is response type for the
        Query/ListEpochHeaders

        RPC method.
      properties:
        headers:
          items:
            properties:
              babylon_epoch:
                format: uint64
                title: epoch is the epoch number of this header on Babylon ledger
                type: string
              babylon_header_hash:
                format: byte
                title: >-
                  babylon_header_hash is the hash of the babylon block that
                  includes this CZ

                  header
                type: string
              babylon_header_height:
                format: uint64
                title: >-
                  babylon_header_height is the height of the babylon block that
                  includes this CZ

                  header
                type: string
              babylon_tx_hash:
                format: byte
                title: >-
                  babylon_tx_hash is the hash of the tx that includes this
                  header

                  (babylon_block_height, babylon_tx_hash) jointly provides the
                  position of

                  the header on Babylon ledger
                type: string
              consumer_id:
                title: consumer_id is the unique ID of the consumer
                type: string
              hash:
                format: byte
                title: hash is the hash of this header
                type: string
              height:
                format: uint64
                title: >-
                  height is the height of this header on CZ ledger

                  (hash, height) jointly provides the position of the header on
                  CZ ledger
                type: string
              time:
                format: date-time
                title: >-
                  time is the timestamp of this header on CZ ledger

                  it is needed for CZ to unbond all mature
                  validators/delegations

                  before this timestamp when this header is BTC-finalised
                type: string
            title: IndexedHeader is the metadata of a CZ header
            type: object
          title: headers is the list of headers
          type: array
      type: object
    babylon.zoneconcierge.v1.QueryListHeadersResponse:
      description: |-
        QueryListHeadersResponse is response type for the Query/ListHeaders RPC
        method.
      properties:
        headers:
          items:
            properties:
              babylon_epoch:
                format: uint64
                title: epoch is the epoch number of this header on Babylon ledger
                type: string
              babylon_header_hash:
                format: byte
                title: >-
                  babylon_header_hash is the hash of the babylon block that
                  includes this CZ

                  header
                type: string
              babylon_header_height:
                format: uint64
                title: >-
                  babylon_header_height is the height of the babylon block that
                  includes this CZ

                  header
                type: string
              babylon_tx_hash:
                format: byte
                title: >-
                  babylon_tx_hash is the hash of the tx that includes this
                  header

                  (babylon_block_height, babylon_tx_hash) jointly provides the
                  position of

                  the header on Babylon ledger
                type: string
              consumer_id:
                title: consumer_id is the unique ID of the consumer
                type: string
              hash:
                format: byte
                title: hash is the hash of this header
                type: string
              height:
                format: uint64
                title: >-
                  height is the height of this header on CZ ledger

                  (hash, height) jointly provides the position of the header on
                  CZ ledger
                type: string
              time:
                format: date-time
                title: >-
                  time is the timestamp of this header on CZ ledger

                  it is needed for CZ to unbond all mature
                  validators/delegations

                  before this timestamp when this header is BTC-finalised
                type: string
            title: IndexedHeader is the metadata of a CZ header
            type: object
          title: headers is the list of headers
          type: array
        pagination:
          description: |-
            PageResponse is to be embedded in gRPC response messages where the
            corresponding request message has used PageRequest.

             message SomeResponse {
                     repeated Bar results = 1;
                     PageResponse page = 2;
             }
          properties:
            next_key:
              description: |-
                next_key is the key to be passed to PageRequest.key to
                query the next page most efficiently. It will be empty if
                there are no more results.
              format: byte
              type: string
            total:
              format: uint64
              title: >-
                total is total number of results available if
                PageRequest.count_total

                was set, its value is undefined otherwise
              type: string
          title: pagination defines the pagination in the response
          type: object
      type: object
    babylon.zoneconcierge.v1.QueryParamsResponse:
      description: >-
        QueryParamsResponse is the response type for the Query/Params RPC
        method.
      properties:
        params:
          description: params holds all the parameters of this module.
          properties:
            ibc_packet_timeout_seconds:
              format: int64
              title: >-
                ibc_packet_timeout_seconds is the time period after which an
                unrelayed 

                IBC packet becomes timeout, measured in seconds
              type: integer
          type: object
      type: object
    cosmos.base.query.v1beta1.PageRequest:
      description: |-
        message SomeRequest {
                 Foo some_parameter = 1;
                 PageRequest pagination = 2;
         }
      properties:
        count_total:
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          type: boolean
        key:
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          format: byte
          type: string
        limit:
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          format: uint64
          type: string
        offset:
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          format: uint64
          type: string
        reverse:
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          type: boolean
      title: |-
        PageRequest is to be embedded in gRPC request messages for efficient
        pagination. Ex:
      type: object
    cosmos.base.query.v1beta1.PageResponse:
      description: |-
        PageResponse is to be embedded in gRPC response messages where the
        corresponding request message has used PageRequest.

         message SomeResponse {
                 repeated Bar results = 1;
                 PageResponse page = 2;
         }
      properties:
        next_key:
          description: |-
            next_key is the key to be passed to PageRequest.key to
            query the next page most efficiently. It will be empty if
            there are no more results.
          format: byte
          type: string
        total:
          format: uint64
          title: >-
            total is total number of results available if
            PageRequest.count_total

            was set, its value is undefined otherwise
          type: string
      type: object
    cosmos.base.v1beta1.Coin:
      description: |-
        Coin defines a token with a denomination and an amount.

        NOTE: The amount field is an Int which implements the custom method
        signatures required by gogoproto.
      properties:
        amount:
          type: string
        denom:
          type: string
      type: object
    cosmos.staking.v1beta1.Description:
      description: Description defines a validator description.
      properties:
        details:
          description: details define other optional details.
          type: string
        identity:
          description: >-
            identity defines an optional identity signature (ex. UPort or
            Keybase).
          type: string
        moniker:
          description: moniker defines a human-readable name for the validator.
          type: string
        security_contact:
          description: security_contact defines an optional email for security contact.
          type: string
        website:
          description: website defines an optional website link.
          type: string
      type: object
    google.protobuf.Any:
      description: >-
        `Any` contains an arbitrary serialized protocol buffer message along
        with a

        URL that describes the type of the serialized message.


        Protobuf library provides support to pack/unpack Any values in the form

        of utility functions or additional generated methods of the Any type.


        Example 1: Pack and unpack a message in C++.

            Foo foo = ...;
            Any any;
            any.PackFrom(foo);
            ...
            if (any.UnpackTo(&foo)) {
              ...
            }

        Example 2: Pack and unpack a message in Java.

            Foo foo = ...;
            Any any = Any.pack(foo);
            ...
            if (any.is(Foo.class)) {
              foo = any.unpack(Foo.class);
            }
            // or ...
            if (any.isSameTypeAs(Foo.getDefaultInstance())) {
              foo = any.unpack(Foo.getDefaultInstance());
            }

        Example 3: Pack and unpack a message in Python.

            foo = Foo(...)
            any = Any()
            any.Pack(foo)
            ...
            if any.Is(Foo.DESCRIPTOR):
              any.Unpack(foo)
              ...

        Example 4: Pack and unpack a message in Go

             foo := &pb.Foo{...}
             any, err := anypb.New(foo)
             if err != nil {
               ...
             }
             ...
             foo := &pb.Foo{}
             if err := any.UnmarshalTo(foo); err != nil {
               ...
             }

        The pack methods provided by protobuf library will by default use

        'type.googleapis.com/full.type.name' as the type URL and the unpack

        methods only use the fully qualified type name after the last '/'

        in the type URL, for example "foo.bar.com/x/y.z" will yield type

        name "y.z".


        JSON


        The JSON representation of an `Any` value uses the regular

        representation of the deserialized, embedded message, with an

        additional field `@type` which contains the type URL. Example:

            package google.profile;
            message Person {
              string first_name = 1;
              string last_name = 2;
            }

            {
              "@type": "type.googleapis.com/google.profile.Person",
              "firstName": <string>,
              "lastName": <string>
            }

        If the embedded message type is well-known and has a custom JSON

        representation, that representation will be embedded adding a field

        `value` which holds the custom JSON in addition to the `@type`

        field. Example (for message [google.protobuf.Duration][]):

            {
              "@type": "type.googleapis.com/google.protobuf.Duration",
              "value": "1.212s"
            }
      properties:
        type_url:
          description: >-
            A URL/resource name that uniquely identifies the type of the
            serialized

            protocol buffer message. This string must contain at least

            one "/" character. The last segment of the URL's path must represent

            the fully qualified name of the type (as in

            `path/google.protobuf.Duration`). The name should be in a canonical
            form

            (e.g., leading "." is not accepted).


            In practice, teams usually precompile into the binary all types that
            they

            expect it to use in the context of Any. However, for URLs which use
            the

            scheme `http`, `https`, or no scheme, one can optionally set up a
            type

            server that maps type URLs to message definitions as follows:


            * If no scheme is provided, `https` is assumed.

            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
              value in binary format, or produce an error.
            * Applications are allowed to cache lookup results based on the
              URL, or have them precompiled into a binary to avoid any
              lookup. Therefore, binary compatibility needs to be preserved
              on changes to types. (Use versioned type names to manage
              breaking changes.)

            Note: this functionality is not currently available in the official

            protobuf release, and it is not used for type URLs beginning with

            type.googleapis.com.


            Schemes other than `http`, `https` (or the empty scheme) might be

            used with implementation specific semantics.
          type: string
        value:
          description: >-
            Must be a valid serialized protocol buffer of the above specified
            type.
          format: byte
          type: string
      type: object
    grpc.gateway.runtime.Error:
      properties:
        code:
          format: int32
          type: integer
        details:
          items:
            description: >-
              `Any` contains an arbitrary serialized protocol buffer message
              along with a

              URL that describes the type of the serialized message.


              Protobuf library provides support to pack/unpack Any values in the
              form

              of utility functions or additional generated methods of the Any
              type.


              Example 1: Pack and unpack a message in C++.

                  Foo foo = ...;
                  Any any;
                  any.PackFrom(foo);
                  ...
                  if (any.UnpackTo(&foo)) {
                    ...
                  }

              Example 2: Pack and unpack a message in Java.

                  Foo foo = ...;
                  Any any = Any.pack(foo);
                  ...
                  if (any.is(Foo.class)) {
                    foo = any.unpack(Foo.class);
                  }
                  // or ...
                  if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                    foo = any.unpack(Foo.getDefaultInstance());
                  }

              Example 3: Pack and unpack a message in Python.

                  foo = Foo(...)
                  any = Any()
                  any.Pack(foo)
                  ...
                  if any.Is(Foo.DESCRIPTOR):
                    any.Unpack(foo)
                    ...

              Example 4: Pack and unpack a message in Go

                   foo := &pb.Foo{...}
                   any, err := anypb.New(foo)
                   if err != nil {
                     ...
                   }
                   ...
                   foo := &pb.Foo{}
                   if err := any.UnmarshalTo(foo); err != nil {
                     ...
                   }

              The pack methods provided by protobuf library will by default use

              'type.googleapis.com/full.type.name' as the type URL and the
              unpack

              methods only use the fully qualified type name after the last '/'

              in the type URL, for example "foo.bar.com/x/y.z" will yield type

              name "y.z".


              JSON


              The JSON representation of an `Any` value uses the regular

              representation of the deserialized, embedded message, with an

              additional field `@type` which contains the type URL. Example:

                  package google.profile;
                  message Person {
                    string first_name = 1;
                    string last_name = 2;
                  }

                  {
                    "@type": "type.googleapis.com/google.profile.Person",
                    "firstName": <string>,
                    "lastName": <string>
                  }

              If the embedded message type is well-known and has a custom JSON

              representation, that representation will be embedded adding a
              field

              `value` which holds the custom JSON in addition to the `@type`

              field. Example (for message [google.protobuf.Duration][]):

                  {
                    "@type": "type.googleapis.com/google.protobuf.Duration",
                    "value": "1.212s"
                  }
            properties:
              type_url:
                description: >-
                  A URL/resource name that uniquely identifies the type of the
                  serialized

                  protocol buffer message. This string must contain at least

                  one "/" character. The last segment of the URL's path must
                  represent

                  the fully qualified name of the type (as in

                  `path/google.protobuf.Duration`). The name should be in a
                  canonical form

                  (e.g., leading "." is not accepted).


                  In practice, teams usually precompile into the binary all
                  types that they

                  expect it to use in the context of Any. However, for URLs
                  which use the

                  scheme `http`, `https`, or no scheme, one can optionally set
                  up a type

                  server that maps type URLs to message definitions as follows:


                  * If no scheme is provided, `https` is assumed.

                  * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                    value in binary format, or produce an error.
                  * Applications are allowed to cache lookup results based on
                  the
                    URL, or have them precompiled into a binary to avoid any
                    lookup. Therefore, binary compatibility needs to be preserved
                    on changes to types. (Use versioned type names to manage
                    breaking changes.)

                  Note: this functionality is not currently available in the
                  official

                  protobuf release, and it is not used for type URLs beginning
                  with

                  type.googleapis.com.


                  Schemes other than `http`, `https` (or the empty scheme) might
                  be

                  used with implementation specific semantics.
                type: string
              value:
                description: >-
                  Must be a valid serialized protocol buffer of the above
                  specified type.
                format: byte
                type: string
            type: object
          type: array
        error:
          type: string
        message:
          type: string
      type: object
    tendermint.crypto.ProofOp:
      properties:
        data:
          format: byte
          type: string
        key:
          format: byte
          type: string
        type:
          type: string
      title: |-
        ProofOp defines an operation used for calculating Merkle root
        The data could be arbitrary format, providing nessecary data
        for example neighbouring node hash
      type: object
    tendermint.crypto.ProofOps:
      properties:
        ops:
          items:
            properties:
              data:
                format: byte
                type: string
              key:
                format: byte
                type: string
              type:
                type: string
            title: |-
              ProofOp defines an operation used for calculating Merkle root
              The data could be arbitrary format, providing nessecary data
              for example neighbouring node hash
            type: object
          type: array
      title: ProofOps is Merkle proof defined by the list of ProofOps
      type: object
    JSONRPC:
      type: object
      properties:
        id:
          type: integer
          example: 0
        jsonrpc:
          type: string
          example: '2.0'
    EmptyResponse:
      description: Empty Response
      allOf:
        - $ref: '#/components/schemas/JSONRPC'
        - type: object
          properties:
            result:
              type: object
              additionalProperties: {}
    ErrorResponse:
      description: Error Response
      allOf:
        - $ref: '#/components/schemas/JSONRPC'
        - type: object
          properties:
            error:
              type: string
              example: Description of failure
    ProtocolVersion:
      type: object
      properties:
        p2p:
          type: string
          example: '7'
        block:
          type: string
          example: '10'
        app:
          type: string
          example: '0'
    PubKey:
      type: object
      properties:
        type:
          type: string
          example: tendermint/PubKeyEd25519
        value:
          type: string
          example: A6DoBUypNtUAyEHWtQ9bFjfNg8Bo9CrnkUGl6k6OHN4=
    NodeInfo:
      type: object
      properties:
        protocol_version:
          $ref: '#/components/schemas/ProtocolVersion'
        id:
          type: string
          example: 5576458aef205977e18fd50b274e9b5d9014525a
        listen_addr:
          type: string
          example: tcp:0.0.0.0:26656
        network:
          type: string
          example: cosmoshub-2
        version:
          type: string
          example: 0.32.1
        channels:
          type: string
          example: '4020212223303800'
        moniker:
          type: string
          example: moniker-node
        other:
          type: object
          properties:
            tx_index:
              type: string
              example: 'on'
            rpc_address:
              type: string
              example: tcp:0.0.0.0:26657
    SyncInfo:
      type: object
      properties:
        latest_block_hash:
          type: string
          example: 790BA84C3545FCCC49A5C629CEE6EA58A6E875C3862175BDC11EE7AF54703501
        latest_app_hash:
          type: string
          example: C9AEBB441B787D9F1D846DE51F3826F4FD386108B59B08239653ABF59455C3F8
        latest_block_height:
          type: string
          example: '1262196'
        latest_block_time:
          type: string
          example: '2019-08-01T11:52:22.818762194Z'
        earliest_block_hash:
          type: string
          example: 790BA84C3545FCCC49A5C629CEE6EA58A6E875C3862175BDC11EE7AF54703501
        earliest_app_hash:
          type: string
          example: C9AEBB441B787D9F1D846DE51F3826F4FD386108B59B08239653ABF59455C3F8
        earliest_block_height:
          type: string
          example: '1262196'
        earliest_block_time:
          type: string
          example: '2019-08-01T11:52:22.818762194Z'
        catching_up:
          type: boolean
          example: false
    ValidatorInfo:
      type: object
      properties:
        address:
          type: string
          example: 5D6A51A8E9899C44079C6AF90618BA0369070E6E
        pub_key:
          $ref: '#/components/schemas/PubKey'
        voting_power:
          type: string
          example: '0'
    Status:
      description: Status Response
      type: object
      properties:
        node_info:
          $ref: '#/components/schemas/NodeInfo'
        sync_info:
          $ref: '#/components/schemas/SyncInfo'
        validator_info:
          $ref: '#/components/schemas/ValidatorInfo'
    StatusResponse:
      description: Status Response
      allOf:
        - $ref: '#/components/schemas/JSONRPC'
        - type: object
          properties:
            result:
              $ref: '#/components/schemas/Status'
    Monitor:
      type: object
      properties:
        Active:
          type: boolean
          example: true
        Start:
          type: string
          example: '2019-07-31T14:31:28.66Z'
        Duration:
          type: string
          example: '168901060000000'
        Idle:
          type: string
          example: '168901040000000'
        Bytes:
          type: string
          example: '5'
        Samples:
          type: string
          example: '1'
        InstRate:
          type: string
          example: '0'
        CurRate:
          type: string
          example: '0'
        AvgRate:
          type: string
          example: '0'
        PeakRate:
          type: string
          example: '0'
        BytesRem:
          type: string
          example: '0'
        TimeRem:
          type: string
          example: '0'
        Progress:
          type: integer
          example: 0
    Channel:
      type: object
      properties:
        ID:
          type: integer
          example: 48
        SendQueueCapacity:
          type: string
          example: '1'
        SendQueueSize:
          type: string
          example: '0'
        Priority:
          type: string
          example: '5'
        RecentlySent:
          type: string
          example: '0'
    ConnectionStatus:
      type: object
      properties:
        Duration:
          type: string
          example: '168901057956119'
        SendMonitor:
          $ref: '#/components/schemas/Monitor'
        RecvMonitor:
          $ref: '#/components/schemas/Monitor'
        Channels:
          type: array
          items:
            $ref: '#/components/schemas/Channel'
    Peer:
      type: object
      properties:
        node_info:
          $ref: '#/components/schemas/NodeInfo'
        is_outbound:
          type: boolean
          example: true
        connection_status:
          $ref: '#/components/schemas/ConnectionStatus'
        remote_ip:
          type: string
          example: 95.179.155.35
    NetInfo:
      type: object
      properties:
        listening:
          type: boolean
          example: true
        listeners:
          type: array
          items:
            type: string
            example: Listener(@)
        n_peers:
          type: string
          example: '1'
        peers:
          type: array
          items:
            $ref: '#/components/schemas/Peer'
    NetInfoResponse:
      description: NetInfo Response
      allOf:
        - $ref: '#/components/schemas/JSONRPC'
        - type: object
          properties:
            result:
              $ref: '#/components/schemas/NetInfo'
    BlockMeta:
      type: object
      properties:
        block_id:
          $ref: '#/components/schemas/BlockID'
        block_size:
          type: integer
          example: 1000000
        header:
          $ref: '#/components/schemas/BlockHeader'
        num_txs:
          type: string
          example: '54'
    Blockchain:
      type: object
      required:
        - last_height
        - block_metas
      properties:
        last_height:
          type: string
          example: '1276718'
        block_metas:
          type: array
          items:
            $ref: '#/components/schemas/BlockMeta'
    BlockchainResponse:
      description: Blockchain info
      allOf:
        - $ref: '#/components/schemas/JSONRPC'
        - type: object
          properties:
            result:
              $ref: '#/components/schemas/Blockchain'
    Commit:
      required:
        - type
        - height
        - round
        - block_id
        - timestamp
        - validator_address
        - validator_index
        - signature
      properties:
        type:
          type: integer
          example: 2
        height:
          type: string
          example: '1262085'
        round:
          type: integer
          example: 0
        block_id:
          $ref: '#/components/schemas/BlockID'
        timestamp:
          type: string
          example: '2019-08-01T11:39:38.867269833Z'
        validator_address:
          type: string
          example: 000001E443FD237E4B616E2FA69DF4EE3D49A94F
        validator_index:
          type: integer
          example: 0
        signature:
          type: string
          example: >-
            DBchvucTzAUEJnGYpNvMdqLhBAHG4Px8BsOBB3J3mAFCLGeuG7uJqy+nVngKzZdPhPi8RhmE/xcw/M9DOJjEDg==
    Block:
      type: object
      properties:
        header:
          $ref: '#/components/schemas/BlockHeader'
        data:
          type: array
          items:
            type: string
            example: >-
              yQHwYl3uCkKoo2GaChRnd+THLQ2RM87nEZrE19910Z28ABIUWW/t8AtIMwcyU0sT32RcMDI9GF0aEAoFdWF0b20SBzEwMDAwMDASEwoNCgV1YXRvbRIEMzEwMRCd8gEaagom61rphyEDoJPxlcjRoNDtZ9xMdvs+lRzFaHe2dl2P5R2yVCWrsHISQKkqX5H1zXAIJuC57yw0Yb03Fwy75VRip0ZBtLiYsUqkOsPUoQZAhDNP+6LY+RUwz/nVzedkF0S29NZ32QXdGv0=
        evidence:
          type: array
          items:
            $ref: '#/components/schemas/Evidence'
        last_commit:
          type: object
          properties:
            height:
              type: integer
            round:
              type: integer
            block_id:
              $ref: '#/components/schemas/BlockID'
            signatures:
              type: array
              items:
                $ref: '#/components/schemas/Commit'
    Evidence:
      type: object
      properties:
        type:
          type: string
        height:
          type: integer
        time:
          type: integer
        total_voting_power:
          type: integer
        validator:
          $ref: '#/components/schemas/Validator'
    BlockComplete:
      type: object
      properties:
        block_id:
          $ref: '#/components/schemas/BlockID'
        block:
          $ref: '#/components/schemas/Block'
    BlockResponse:
      description: Blockc info
      allOf:
        - $ref: '#/components/schemas/JSONRPC'
        - type: object
          properties:
            result:
              $ref: '#/components/schemas/BlockComplete'
    BlockResultsResponse:
      type: object
      required:
        - jsonrpc
        - id
        - result
      properties:
        jsonrpc:
          type: string
          example: '2.0'
        id:
          type: integer
          example: 0
        result:
          type: object
          required:
            - height
          properties:
            height:
              type: string
              example: '12'
            txs_results:
              type: array
              nullable: true
              items:
                type: object
                properties:
                  code:
                    type: string
                    example: '0'
                  data:
                    type: string
                    example: ''
                  log:
                    type: string
                    example: not enough gas
                  info:
                    type: string
                    example: ''
                  gas_wanted:
                    type: string
                    example: '100'
                  gas_used:
                    type: string
                    example: '100'
                  events:
                    type: array
                    nullable: true
                    items:
                      type: object
                      properties:
                        type:
                          type: string
                          example: app
                        attributes:
                          type: array
                          nullable: false
                          items:
                            $ref: '#/components/schemas/Event'
                  codespace:
                    type: string
                    example: ibc
            finalize_block_events:
              type: array
              nullable: true
              items:
                type: object
                properties:
                  type:
                    type: string
                    example: app
                  attributes:
                    type: array
                    nullable: false
                    items:
                      $ref: '#/components/schemas/Event'
            validator_updates:
              type: array
              nullable: true
              items:
                type: object
                properties:
                  pub_key:
                    type: object
                    required:
                      - type
                      - value
                    properties:
                      type:
                        type: string
                        example: tendermint/PubKeyEd25519
                      value:
                        type: string
                        example: 9tK9IT+FPdf2qm+5c2qaxi10sWP+3erWTKgftn2PaQM=
                  power:
                    type: string
                    example: '300'
            consensus_param_updates:
              $ref: '#/components/schemas/ConsensusParams'
    CommitResponse:
      type: object
      required:
        - jsonrpc
        - id
        - result
      properties:
        jsonrpc:
          type: string
          example: '2.0'
        id:
          type: integer
          example: 0
        result:
          required:
            - signed_header
            - canonical
          properties:
            signed_header:
              required:
                - header
                - commit
              properties:
                header:
                  $ref: '#/components/schemas/BlockHeader'
                commit:
                  required:
                    - height
                    - round
                    - block_id
                    - signatures
                  properties:
                    height:
                      type: string
                      example: '1311801'
                    round:
                      type: integer
                      example: 0
                    block_id:
                      $ref: '#/components/schemas/BlockID'
                    signatures:
                      type: array
                      items:
                        type: object
                        properties:
                          block_id_flag:
                            type: integer
                            example: 2
                          validator_address:
                            type: string
                            example: 000001E443FD237E4B616E2FA69DF4EE3D49A94F
                          timestamp:
                            type: string
                            example: '2019-04-22T17:01:58.376629719Z'
                          signature:
                            type: string
                            example: >-
                              14jaTQXYRt8kbLKEhdHq7AXycrFImiLuZx50uOjs2+Zv+2i7RTG/jnObD07Jo2ubZ8xd7bNBJMqkgtkd0oQHAw==
                  type: object
              type: object
            canonical:
              type: boolean
              example: true
          type: object
    ValidatorsResponse:
      type: object
      required:
        - jsonrpc
        - id
        - result
      properties:
        jsonrpc:
          type: string
          example: '2.0'
        id:
          type: integer
          example: 0
        result:
          required:
            - block_height
            - validators
          properties:
            block_height:
              type: string
              example: '55'
            validators:
              type: array
              items:
                $ref: '#/components/schemas/ValidatorPriority'
            count:
              type: string
              example: '1'
            total:
              type: string
              example: '25'
          type: object
    GenesisResponse:
      type: object
      required:
        - jsonrpc
        - id
        - result
      properties:
        jsonrpc:
          type: string
          example: '2.0'
        id:
          type: integer
          example: 0
        result:
          type: object
          required:
            - genesis
          properties:
            genesis:
              type: object
              required:
                - genesis_time
                - chain_id
                - initial_height
                - consensus_params
                - validators
                - app_hash
              properties:
                genesis_time:
                  type: string
                  example: '2019-04-22T17:00:00Z'
                chain_id:
                  type: string
                  example: cosmoshub-2
                initial_height:
                  type: string
                  example: '2'
                consensus_params:
                  $ref: '#/components/schemas/ConsensusParams'
                validators:
                  type: array
                  items:
                    type: object
                    properties:
                      address:
                        type: string
                        example: B00A6323737F321EB0B8D59C6FD497A14B60938A
                      pub_key:
                        required:
                          - type
                          - value
                        properties:
                          type:
                            type: string
                            example: tendermint/PubKeyEd25519
                          value:
                            type: string
                            example: cOQZvh/h9ZioSeUMZB/1Vy1Xo5x2sjrVjlE/qHnYifM=
                        type: object
                      power:
                        type: string
                        example: '9328525'
                      name:
                        type: string
                        example: Certus One
                app_hash:
                  type: string
                  example: ''
                app_state:
                  properties: {}
                  type: object
    GenesisChunkedResponse:
      type: object
      required:
        - jsonrpc
        - id
        - result
      properties:
        jsonrpc:
          type: string
          example: '2.0'
        id:
          type: integer
          example: 0
        result:
          required:
            - chunk
            - total
            - data
          properties:
            chunk:
              type: integer
              example: 0
            total:
              type: integer
              example: 1
            data:
              type: string
              example: Z2VuZXNpcwo=
    DumpConsensusResponse:
      type: object
      required:
        - jsonrpc
        - id
        - result
      properties:
        jsonrpc:
          type: string
          example: '2.0'
        id:
          type: integer
          example: 0
        result:
          required:
            - round_state
            - peers
          properties:
            round_state:
              required:
                - height
                - round
                - step
                - start_time
                - commit_time
                - validators
                - proposal
                - proposal_block
                - proposal_block_parts
                - locked_round
                - locked_block
                - locked_block_parts
                - valid_round
                - valid_block
                - valid_block_parts
                - votes
                - commit_round
                - last_commit
                - last_validators
                - triggered_timeout_precommit
              properties:
                height:
                  type: string
                  example: '1311801'
                round:
                  type: integer
                  example: 0
                step:
                  type: integer
                  example: 3
                start_time:
                  type: string
                  example: '2019-08-05T11:28:49.064658805Z'
                commit_time:
                  type: string
                  example: '2019-08-05T11:28:44.064658805Z'
                validators:
                  required:
                    - validators
                    - proposer
                  properties:
                    validators:
                      type: array
                      items:
                        $ref: '#/components/schemas/ValidatorPriority'
                    proposer:
                      $ref: '#/components/schemas/ValidatorPriority'
                  type: object
                locked_round:
                  type: integer
                  example: -1
                valid_round:
                  type: string
                  example: '-1'
                votes:
                  type: array
                  items:
                    type: object
                    properties:
                      round:
                        type: string
                        example: '0'
                      prevotes:
                        type: array
                        nullable: true
                        items:
                          type: string
                        example:
                          - nil-Vote
                          - >-
                            Vote{19:46A3F8B8393B 1311801/00/1(Prevote)
                            000000000000 64CE682305CB @
                            2019-08-05T11:28:47.374703444Z}
                      prevotes_bit_array:
                        type: string
                        example: >-
                          BA{100:___________________x________________________________________________________________________________}
                          209706/170220253 = 0.00
                      precommits:
                        type: array
                        nullable: true
                        items:
                          type: string
                        example:
                          - nil-Vote
                      precommits_bit_array:
                        type: string
                        example: >-
                          BA{100:____________________________________________________________________________________________________}
                          0/170220253 = 0.00
                commit_round:
                  type: integer
                  example: -1
                last_commit:
                  nullable: true
                  required:
                    - votes
                    - votes_bit_array
                    - peer_maj_23s
                  properties:
                    votes:
                      type: array
                      items:
                        type: string
                      example:
                        - >-
                          Vote{0:000001E443FD 1311800/00/2(Precommit)
                          3071ADB27D1A 77EE1B6B6847 @
                          2019-08-05T11:28:43.810128139Z}
                    votes_bit_array:
                      type: string
                      example: >-
                        BA{100:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx}
                        170220253/170220253 = 1.00
                    peer_maj_23s:
                      properties: {}
                      type: object
                  type: object
                last_validators:
                  required:
                    - validators
                    - proposer
                  properties:
                    validators:
                      type: array
                      items:
                        $ref: '#/components/schemas/ValidatorPriority'
                    proposer:
                      $ref: '#/components/schemas/ValidatorPriority'
                  type: object
                triggered_timeout_precommit:
                  type: boolean
                  example: false
              type: object
            peers:
              type: array
              items:
                type: object
                properties:
                  node_address:
                    type: string
                    example: >-
                      357f6a6c1d27414579a8185060aa8adf9815c43c@68.183.41.207:26656
                  peer_state:
                    required:
                      - round_state
                      - stats
                    properties:
                      round_state:
                        required:
                          - height
                          - round
                          - step
                          - start_time
                          - proposal
                          - proposal_block_parts_header
                          - proposal_block_parts
                          - proposal_pol_round
                          - proposal_pol
                          - prevotes
                          - precommits
                          - last_commit_round
                          - last_commit
                          - catchup_commit_round
                          - catchup_commit
                        properties:
                          height:
                            type: string
                            example: '1311801'
                          round:
                            type: string
                            example: '0'
                          step:
                            type: integer
                            example: 3
                          start_time:
                            type: string
                            example: '2019-08-05T11:28:49.21730864Z'
                          proposal:
                            type: boolean
                            example: false
                          proposal_block_parts_header:
                            required:
                              - total
                              - hash
                            properties:
                              total:
                                type: integer
                                example: 0
                              hash:
                                type: string
                                example: ''
                            type: object
                          proposal_pol_round:
                            nullable: true
                            type: integer
                            example: -1
                          proposal_pol:
                            nullable: true
                            type: string
                            example: >-
                              ____________________________________________________________________________________________________
                          prevotes:
                            nullable: true
                            type: string
                            example: >-
                              ___________________x________________________________________________________________________________
                          precommits:
                            nullable: true
                            type: string
                            example: >-
                              ____________________________________________________________________________________________________
                          last_commit_round:
                            nullable: true
                            type: integer
                            example: 0
                          last_commit:
                            nullable: true
                            type: string
                            example: >-
                              xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
                          catchup_commit_round:
                            type: integer
                            nullable: true
                            example: -1
                          catchup_commit:
                            nullable: true
                            type: string
                            example: >-
                              ____________________________________________________________________________________________________
                        type: object
                      stats:
                        required:
                          - votes
                          - block_parts
                        properties:
                          votes:
                            type: string
                            example: '1159558'
                          block_parts:
                            type: string
                            example: '4786'
                        type: object
                    type: object
          type: object
    ConsensusStateResponse:
      type: object
      required:
        - jsonrpc
        - id
        - result
      properties:
        jsonrpc:
          type: string
          example: '2.0'
        id:
          type: integer
          example: 0
        result:
          required:
            - round_state
          properties:
            round_state:
              required:
                - height/round/step
                - start_time
                - proposal_block_hash
                - locked_block_hash
                - valid_block_hash
                - height_vote_set
                - proposer
              properties:
                height/round/step:
                  type: string
                  example: 1262197/0/8
                start_time:
                  type: string
                  example: '2019-08-01T11:52:38.962730289Z'
                proposal_block_hash:
                  type: string
                  example: >-
                    634ADAF1F402663BEC2ABC340ECE8B4B45AA906FA603272ACC5F5EED3097E009
                locked_block_hash:
                  type: string
                  example: >-
                    634ADAF1F402663BEC2ABC340ECE8B4B45AA906FA603272ACC5F5EED3097E009
                valid_block_hash:
                  type: string
                  example: >-
                    634ADAF1F402663BEC2ABC340ECE8B4B45AA906FA603272ACC5F5EED3097E009
                height_vote_set:
                  type: array
                  items:
                    type: object
                    properties:
                      round:
                        type: integer
                        example: 0
                      prevotes:
                        type: array
                        items:
                          type: string
                        example:
                          - >-
                            Vote{0:000001E443FD 1262197/00/1(Prevote)
                            634ADAF1F402 7BB974E1BA40 @
                            2019-08-01T11:52:35.513572509Z}
                          - nil-Vote
                      prevotes_bit_array:
                        type: string
                        example: >-
                          BA{100:xxxxxxxxxxxxxxxxx_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx}
                          169753436/170151262 = 1.00
                      precommits:
                        type: array
                        items:
                          type: string
                        example:
                          - >-
                            Vote{5:18C78D135C9D 1262197/00/2(Precommit)
                            634ADAF1F402 8B5EFFFEABCD @
                            2019-08-01T11:52:36.25600005Z}
                          - nil-Vote
                      precommits_bit_array:
                        type: string
                        example: >-
                          BA{100:xxxxxx_xxxxx_xxxx_x_xxx_xx_xx_xx__x_x_x__xxxxxxxxxxxxxx_xxxx_xx_xxxxxx_xxxxxxxx_xxxx_xxx_x_xxxx__xxx}
                          118726247/170151262 = 0.70
                proposer:
                  type: object
                  properties:
                    address:
                      type: string
                      example: D540AB022088612AC74B287D076DBFBC4A377A2E
                    index:
                      type: integer
                      example: 0
              type: object
          type: object
    ConsensusParamsResponse:
      type: object
      required:
        - jsonrpc
        - id
        - result
      properties:
        jsonrpc:
          type: string
          example: '2.0'
        id:
          type: integer
          example: 0
        result:
          type: object
          required:
            - block_height
            - consensus_params
          properties:
            block_height:
              type: string
              example: '1'
            consensus_params:
              $ref: '#/components/schemas/ConsensusParams'
    NumUnconfirmedTransactionsResponse:
      type: object
      required:
        - jsonrpc
        - id
        - result
      properties:
        jsonrpc:
          type: string
          example: '2.0'
        id:
          type: integer
          example: 0
        result:
          required:
            - n_txs
            - total
            - total_bytes
          properties:
            n_txs:
              type: string
              example: '31'
            total:
              type: string
              example: '82'
            total_bytes:
              type: string
              example: '19974'
          type: object
    UnconfirmedTransactionsResponse:
      type: object
      required:
        - jsonrpc
        - id
        - result
      properties:
        jsonrpc:
          type: string
          example: '2.0'
        id:
          type: integer
          example: 0
        result:
          required:
            - n_txs
            - total
            - total_bytes
            - txs
          properties:
            n_txs:
              type: string
              example: '82'
            total:
              type: string
              example: '82'
            total_bytes:
              type: string
              example: '19974'
            txs:
              type: array
              nullable: true
              items:
                type: string
                nullable: true
              example:
                - >-
                  gAPwYl3uCjCMTXENChSMnIkb5ZpYHBKIZqecFEV2tuZr7xIUA75/FmYq9WymsOBJ0XSJ8yV8zmQKMIxNcQ0KFIyciRvlmlgcEohmp5wURXa25mvvEhQbrvwbvlNiT+Yjr86G+YQNx7kRVgowjE1xDQoUjJyJG+WaWBwSiGannBRFdrbma+8SFK2m+1oxgILuQLO55n8mWfnbIzyPCjCMTXENChSMnIkb5ZpYHBKIZqecFEV2tuZr7xIUQNGfkmhTNMis4j+dyMDIWXdIPiYKMIxNcQ0KFIyciRvlmlgcEohmp5wURXa25mvvEhS8sL0D0wwgGCItQwVowak5YB38KRIUCg4KBXVhdG9tEgUxMDA1NBDoxRgaagom61rphyECn8x7emhhKdRCB2io7aS/6Cpuq5NbVqbODmqOT3jWw6kSQKUresk+d+Gw0BhjiggTsu8+1voW+VlDCQ1GRYnMaFOHXhyFv7BCLhFWxLxHSAYT8a5XqoMayosZf9mANKdXArA=
          type: object
    TxSearchResponse:
      type: object
      required:
        - jsonrpc
        - id
        - result
      properties:
        jsonrpc:
          type: string
          example: '2.0'
        id:
          type: integer
          example: 0
        result:
          required:
            - txs
            - total_count
          properties:
            txs:
              type: array
              items:
                type: object
                properties:
                  hash:
                    type: string
                    example: >-
                      D70952032620CC4E2737EB8AC379806359D8E0B17B0488F627997A0B043ABDED
                  height:
                    type: string
                    example: '1000'
                  index:
                    type: integer
                    example: 0
                  tx_result:
                    required:
                      - log
                      - gas_wanted
                      - gas_used
                      - tags
                    properties:
                      log:
                        type: string
                        example: '[{"msg_index":"0","success":true,"log":""}]'
                      gas_wanted:
                        type: string
                        example: '200000'
                      gas_used:
                        type: string
                        example: '28596'
                      tags:
                        $ref: '#/components/schemas/Event'
                    type: object
                  tx:
                    type: string
                    example: >-
                      5wHwYl3uCkaoo2GaChQmSIu8hxpJxLcCuIi8fiHN4TMwrRIU/Af1cEG7Rcs/6LjTl7YjRSymJfYaFAoFdWF0b20SCzE0OTk5OTk1MDAwEhMKDQoFdWF0b20SBDUwMDAQwJoMGmoKJuta6YchAwswBShaB1wkZBctLIhYqBC3JrAI28XGzxP+rVEticGEEkAc+khTkKL9CDE47aDvjEHvUNt+izJfT4KVF2v2JkC+bmlH9K08q3PqHeMI9Z5up+XMusnTqlP985KF+SI5J3ZOIhhNYWRlIGJ5IENpcmNsZSB3aXRoIGxvdmU=
                  proof:
                    required:
                      - RootHash
                      - Data
                      - Proof
                    properties:
                      RootHash:
                        type: string
                        example: >-
                          72FE6BF6D4109105357AECE0A82E99D0F6288854D16D8767C5E72C57F876A14D
                      Data:
                        type: string
                        example: >-
                          5wHwYl3uCkaoo2GaChQmSIu8hxpJxLcCuIi8fiHN4TMwrRIU/Af1cEG7Rcs/6LjTl7YjRSymJfYaFAoFdWF0b20SCzE0OTk5OTk1MDAwEhMKDQoFdWF0b20SBDUwMDAQwJoMGmoKJuta6YchAwswBShaB1wkZBctLIhYqBC3JrAI28XGzxP+rVEticGEEkAc+khTkKL9CDE47aDvjEHvUNt+izJfT4KVF2v2JkC+bmlH9K08q3PqHeMI9Z5up+XMusnTqlP985KF+SI5J3ZOIhhNYWRlIGJ5IENpcmNsZSB3aXRoIGxvdmU=
                      Proof:
                        required:
                          - total
                          - index
                          - leaf_hash
                          - aunts
                        properties:
                          total:
                            type: string
                            example: '2'
                          index:
                            type: string
                            example: '0'
                          leaf_hash:
                            type: string
                            example: eoJxKCzF3m72Xiwb/Q43vJ37/2Sx8sfNS9JKJohlsYI=
                          aunts:
                            type: array
                            items:
                              type: string
                            example:
                              - eWb+HG/eMmukrQj4vNGyFYb3nKQncAWacq4HF5eFzDY=
                        type: object
                    type: object
            total_count:
              type: string
              example: '2'
          type: object
    TxResponse:
      type: object
      required:
        - jsonrpc
        - id
        - result
      properties:
        jsonrpc:
          type: string
          example: '2.0'
        id:
          type: integer
          example: 0
        result:
          required:
            - hash
            - height
            - index
            - tx_result
            - tx
          properties:
            hash:
              type: string
              example: D70952032620CC4E2737EB8AC379806359D8E0B17B0488F627997A0B043ABDED
            height:
              type: string
              example: '1000'
            index:
              type: integer
              example: 0
            tx_result:
              required:
                - log
                - gas_wanted
                - gas_used
                - tags
              properties:
                log:
                  type: string
                  example: '[{"msg_index":"0","success":true,"log":""}]'
                gas_wanted:
                  type: string
                  example: '200000'
                gas_used:
                  type: string
                  example: '28596'
                tags:
                  type: array
                  items:
                    $ref: '#/components/schemas/Event'
              type: object
            tx:
              type: string
              example: >-
                5wHwYl3uCkaoo2GaChQmSIu8hxpJxLcCuIi8fiHN4TMwrRIU/Af1cEG7Rcs/6LjTl7YjRSymJfYaFAoFdWF0b20SCzE0OTk5OTk1MDAwEhMKDQoFdWF0b20SBDUwMDAQwJoMGmoKJuta6YchAwswBShaB1wkZBctLIhYqBC3JrAI28XGzxP+rVEticGEEkAc+khTkKL9CDE47aDvjEHvUNt+izJfT4KVF2v2JkC+bmlH9K08q3PqHeMI9Z5up+XMusnTqlP985KF+SI5J3ZOIhhNYWRlIGJ5IENpcmNsZSB3aXRoIGxvdmU=
          type: object
    ABCIInfoResponse:
      type: object
      required:
        - jsonrpc
        - id
      properties:
        jsonrpc:
          type: string
          example: '2.0'
        id:
          type: integer
          example: 0
        result:
          required:
            - response
          properties:
            response:
              required:
                - data
                - version
                - app_version
                - last_block_height
                - last_block_app_hash
              properties:
                data:
                  type: string
                  example: '{"size":0}'
                version:
                  type: string
                  example: 0.16.1
                app_version:
                  type: string
                  example: '1'
                last_block_height:
                  type: string
                  example: '1314126'
                last_block_app_hash:
                  type: string
                  example: >-
                    C9AEBB441B787D9F1D846DE51F3826F4FD386108B59B08239653ABF59455C3F8
              type: object
          type: object
    ABCIQueryResponse:
      type: object
      required:
        - error
        - result
        - id
        - jsonrpc
      properties:
        error:
          type: string
          example: ''
        result:
          required:
            - response
          properties:
            response:
              required:
                - log
                - height
                - proof
                - value
                - key
                - index
                - code
              properties:
                log:
                  type: string
                  example: exists
                height:
                  type: string
                  example: '0'
                proof:
                  type: string
                  example: >-
                    010114FED0DAD959F36091AD761C922ABA3CBF1D8349990101020103011406AA2262E2F448242DF2C2607C3CDC705313EE3B0001149D16177BC71E445476174622EA559715C293740C
                value:
                  type: string
                  example: '61626364'
                key:
                  type: string
                  example: '61626364'
                index:
                  type: string
                  example: '-1'
                code:
                  type: string
                  example: '0'
              type: object
          type: object
        id:
          type: integer
          example: 0
        jsonrpc:
          type: string
          example: '2.0'
    BroadcastEvidenceResponse:
      type: object
      required:
        - id
        - jsonrpc
      properties:
        error:
          type: string
          example: ''
        result:
          type: string
          example: ''
        id:
          type: integer
          example: 0
        jsonrpc:
          type: string
          example: '2.0'
    BroadcastTxCommitResponse:
      type: object
      required:
        - error
        - result
        - id
        - jsonrpc
      properties:
        error:
          type: string
          example: ''
        result:
          required:
            - height
            - hash
            - deliver_tx
            - check_tx
          properties:
            height:
              type: string
              example: '26682'
            hash:
              type: string
              example: 75CA0F856A4DA078FC4911580360E70CEFB2EBEE
            deliver_tx:
              required:
                - log
                - data
                - code
              properties:
                log:
                  type: string
                  example: ''
                data:
                  type: string
                  example: ''
                code:
                  type: string
                  example: '0'
              type: object
            check_tx:
              required:
                - log
                - data
                - code
              properties:
                log:
                  type: string
                  example: ''
                data:
                  type: string
                  example: ''
                code:
                  type: string
                  example: '0'
              type: object
          type: object
        id:
          type: integer
          example: 0
        jsonrpc:
          type: string
          example: '2.0'
    CheckTxResponse:
      type: object
      required:
        - error
        - result
        - id
        - jsonrpc
      properties:
        error:
          type: string
          example: ''
        result:
          required:
            - log
            - data
            - code
          properties:
            code:
              type: string
              example: '0'
            data:
              type: string
              example: ''
            log:
              type: string
              example: ''
            info:
              type: string
              example: ''
            gas_wanted:
              type: string
              example: '1'
            gas_used:
              type: string
              example: '0'
            events:
              type: array
              nullable: true
              items:
                type: object
                properties:
                  type:
                    type: string
                    example: app
                  attributes:
                    type: array
                    nullable: false
                    items:
                      $ref: '#/components/schemas/Event'
            codespace:
              type: string
              example: bank
          type: object
        id:
          type: integer
          example: 0
        jsonrpc:
          type: string
          example: '2.0'
    BroadcastTxResponse:
      type: object
      required:
        - jsonrpc
        - id
        - result
        - error
      properties:
        jsonrpc:
          type: string
          example: '2.0'
        id:
          type: integer
          example: 0
        result:
          required:
            - code
            - data
            - log
            - hash
          properties:
            code:
              type: string
              example: '0'
            data:
              type: string
              example: ''
            log:
              type: string
              example: ''
            codespace:
              type: string
              example: ibc
            hash:
              type: string
              example: 0D33F2F03A5234F38706E43004489E061AC40A2E
          type: object
        error:
          type: string
          example: ''
    dialResp:
      type: object
      properties:
        Log:
          type: string
          example: Dialing seeds in progress. See /net_info for details
    BlockSearchResponse:
      type: object
      required:
        - jsonrpc
        - id
        - result
      properties:
        jsonrpc:
          type: string
          example: '2.0'
        id:
          type: integer
          example: 0
        result:
          required:
            - blocks
            - total_count
          properties:
            blocks:
              type: array
              items:
                $ref: '#/components/schemas/BlockComplete'
            total_count:
              type: integer
              example: 2
          type: object
    ValidatorPriority:
      type: object
      properties:
        address:
          type: string
          example: 000001E443FD237E4B616E2FA69DF4EE3D49A94F
        pub_key:
          required:
            - type
            - value
          properties:
            type:
              type: string
              example: tendermint/PubKeyEd25519
            value:
              type: string
              example: 9tK9IT+FPdf2qm+5c2qaxi10sWP+3erWTKgftn2PaQM=
          type: object
        voting_power:
          type: string
          example: '239727'
        proposer_priority:
          type: string
          example: '-11896414'
    Validator:
      type: object
      properties:
        pub_key:
          $ref: '#/components/schemas/PubKey'
        voting_power:
          type: integer
        address:
          type: string
    ConsensusParams:
      type: object
      nullable: true
      required:
        - block
        - evidence
        - validator
      properties:
        block:
          type: object
          required:
            - max_bytes
            - max_gas
            - time_iota_ms
          properties:
            max_bytes:
              type: string
              example: '22020096'
            max_gas:
              type: string
              example: '1000'
            time_iota_ms:
              type: string
              example: '1000'
        evidence:
          type: object
          required:
            - max_age
          properties:
            max_age:
              type: string
              example: '100000'
        validator:
          type: object
          required:
            - pub_key_types
          properties:
            pub_key_types:
              type: array
              items:
                type: string
              example:
                - ed25519
    Event:
      type: object
      properties:
        key:
          type: string
          example: action
        value:
          type: string
          example: send
        index:
          type: boolean
          example: false
    BlockHeader:
      required:
        - version
        - chain_id
        - height
        - time
        - last_block_id
        - last_commit_hash
        - data_hash
        - validators_hash
        - next_validators_hash
        - consensus_hash
        - app_hash
        - last_results_hash
        - evidence_hash
        - proposer_address
      properties:
        version:
          required:
            - block
            - app
          properties:
            block:
              type: string
              example: '10'
            app:
              type: string
              example: '0'
          type: object
        chain_id:
          type: string
          example: cosmoshub-2
        height:
          type: string
          example: '12'
        time:
          type: string
          example: '2019-04-22T17:01:51.701356223Z'
        last_block_id:
          $ref: '#/components/schemas/BlockID'
        last_commit_hash:
          type: string
          example: 21B9BC845AD2CB2C4193CDD17BFC506F1EBE5A7402E84AD96E64171287A34812
        data_hash:
          type: string
          example: 970886F99E77ED0D60DA8FCE0447C2676E59F2F77302B0C4AA10E1D02F18EF73
        validators_hash:
          type: string
          example: D658BFD100CA8025CFD3BECFE86194322731D387286FBD26E059115FD5F2BCA0
        next_validators_hash:
          type: string
          example: D658BFD100CA8025CFD3BECFE86194322731D387286FBD26E059115FD5F2BCA0
        consensus_hash:
          type: string
          example: 0F2908883A105C793B74495EB7D6DF2EEA479ED7FC9349206A65CB0F9987A0B8
        app_hash:
          type: string
          example: 223BF64D4A01074DC523A80E76B9BBC786C791FB0A1893AC5B14866356FCFD6C
        last_results_hash:
          type: string
          example: ''
        evidence_hash:
          type: string
          example: ''
        proposer_address:
          type: string
          example: D540AB022088612AC74B287D076DBFBC4A377A2E
      type: object
    BlockID:
      required:
        - hash
        - parts
      properties:
        hash:
          type: string
          example: 112BC173FD838FB68EB43476816CD7B4C6661B6884A9E357B417EE957E1CF8F7
        parts:
          required:
            - total
            - hash
          properties:
            total:
              type: integer
              example: 1
            hash:
              type: string
              example: 38D4B26B5B725C4F13571EFE022C030390E4C33C8CF6F88EDD142EA769642DBD
          type: object
